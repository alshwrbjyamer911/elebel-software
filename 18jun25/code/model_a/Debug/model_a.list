
model_a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004338  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080044c8  080044c8  000144c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004708  08004708  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004710  08004710  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004714  08004714  00014714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001fc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000026c  2000026c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010446  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000213c  00000000  00000000  000304e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00032628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc0  00000000  00000000  000333b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ffb  00000000  00000000  00034070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f9e6  00000000  00000000  0005706b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf2f6  00000000  00000000  00066a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00135d47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ff0  00000000  00000000  00135d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044b0 	.word	0x080044b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080044b0 	.word	0x080044b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <_Z9lora_initv>:
uint8_t my_id;
uint8_t my_addr;
uint8_t receiver_id;
uint8_t receiver_addr;

void lora_init(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	receiver_id = get_id();
 8000588:	f000 f86c 	bl	8000664 <_Z6get_idv>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <_Z9lora_initv+0x38>)
 8000592:	701a      	strb	r2, [r3, #0]
	receiver_addr = get_address();
 8000594:	f000 f88c 	bl	80006b0 <_Z11get_addressv>
 8000598:	4603      	mov	r3, r0
 800059a:	461a      	mov	r2, r3
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <_Z9lora_initv+0x3c>)
 800059e:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, band, sizeof(band)-1, 100);
 80005a0:	2364      	movs	r3, #100	; 0x64
 80005a2:	2213      	movs	r2, #19
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <_Z9lora_initv+0x40>)
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <_Z9lora_initv+0x44>)
 80005a8:	f002 fd23 	bl	8002ff2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, password, sizeof(password)-1, 100);
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	2218      	movs	r2, #24
 80005b0:	4906      	ldr	r1, [pc, #24]	; (80005cc <_Z9lora_initv+0x48>)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <_Z9lora_initv+0x44>)
 80005b4:	f002 fd1d 	bl	8002ff2 <HAL_UART_Transmit>

}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000f2 	.word	0x200000f2
 80005c0:	200000f3 	.word	0x200000f3
 80005c4:	08004520 	.word	0x08004520
 80005c8:	200001cc 	.word	0x200001cc
 80005cc:	08004534 	.word	0x08004534

080005d0 <_Z15receive_messagev>:
uint8_t lora_recive(){
	//+RCV=<Address>,<Length>,<Data>,<RSSI>,<SNR>
	return receive_message();
}

uint8_t receive_message(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	memset(uart_rx_buffer,0,100);
 80005d6:	2264      	movs	r2, #100	; 0x64
 80005d8:	2100      	movs	r1, #0
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <_Z15receive_messagev+0x40>)
 80005dc:	f003 f94a 	bl	8003874 <memset>
	uint8_t cmd;
	HAL_UART_Receive(&huart2, uart_rx_buffer, 100, 100);
 80005e0:	2364      	movs	r3, #100	; 0x64
 80005e2:	2264      	movs	r2, #100	; 0x64
 80005e4:	490a      	ldr	r1, [pc, #40]	; (8000610 <_Z15receive_messagev+0x40>)
 80005e6:	480b      	ldr	r0, [pc, #44]	; (8000614 <_Z15receive_messagev+0x44>)
 80005e8:	f002 fd95 	bl	8003116 <HAL_UART_Receive>

	if(strstr((const char*)uart_rx_buffer,"+RCV=")){
 80005ec:	490a      	ldr	r1, [pc, #40]	; (8000618 <_Z15receive_messagev+0x48>)
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <_Z15receive_messagev+0x40>)
 80005f0:	f003 f976 	bl	80038e0 <strstr>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d004      	beq.n	8000604 <_Z15receive_messagev+0x34>
		cmd =process_message((const char*)uart_rx_buffer);
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <_Z15receive_messagev+0x40>)
 80005fc:	f000 f80e 	bl	800061c <_Z15process_messagePKc>
 8000600:	4603      	mov	r3, r0
 8000602:	71fb      	strb	r3, [r7, #7]
	}

	return cmd;
 8000604:	79fb      	ldrb	r3, [r7, #7]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	2000008c 	.word	0x2000008c
 8000614:	200001cc 	.word	0x200001cc
 8000618:	080044c8 	.word	0x080044c8

0800061c <_Z15process_messagePKc>:
uint8_t process_message(const char *message){
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
	int address = 0;int rssi = 0;int lenth=0;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
	uint8_t data=0;
 8000630:	2300      	movs	r3, #0
 8000632:	72fb      	strb	r3, [r7, #11]
	sscanf(message, "+RCV=%d,%d,%c,%d,%d",&address,&lenth,&data,&rssi,NULL);
 8000634:	f107 010c 	add.w	r1, r7, #12
 8000638:	f107 0214 	add.w	r2, r7, #20
 800063c:	2300      	movs	r3, #0
 800063e:	9302      	str	r3, [sp, #8]
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	f107 030b 	add.w	r3, r7, #11
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	460b      	mov	r3, r1
 800064e:	4904      	ldr	r1, [pc, #16]	; (8000660 <_Z15process_messagePKc+0x44>)
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f003 f917 	bl	8003884 <siscanf>
	return data;
 8000656:	7afb      	ldrb	r3, [r7, #11]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	080044d0 	.word	0x080044d0

08000664 <_Z6get_idv>:
	sprintf((char*)buffer,"AT+SEND=%d,1,%c\r\n",receiver_addr,data);
	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), 100);

}

uint8_t get_id(){
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
	uint8_t buffer[25];

	HAL_UART_Transmit(&huart2, getid, sizeof(getid), 100);
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	220f      	movs	r2, #15
 800066e:	490c      	ldr	r1, [pc, #48]	; (80006a0 <_Z6get_idv+0x3c>)
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <_Z6get_idv+0x40>)
 8000672:	f002 fcbe 	bl	8002ff2 <HAL_UART_Transmit>
//	HAL_Delay(10);
	HAL_UART_Receive(&huart2, buffer, sizeof(buffer), 100);
 8000676:	1d39      	adds	r1, r7, #4
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	2219      	movs	r2, #25
 800067c:	4809      	ldr	r0, [pc, #36]	; (80006a4 <_Z6get_idv+0x40>)
 800067e:	f002 fd4a 	bl	8003116 <HAL_UART_Receive>
	sscanf((char*)buffer, "+NETWORKID=%d", &my_id);
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <_Z6get_idv+0x44>)
 8000686:	4909      	ldr	r1, [pc, #36]	; (80006ac <_Z6get_idv+0x48>)
 8000688:	4618      	mov	r0, r3
 800068a:	f003 f8fb 	bl	8003884 <siscanf>
	if(IAM ==1)
		return my_id+1;
	else if(IAM==0)
		return my_id-1;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <_Z6get_idv+0x44>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	3b01      	subs	r3, #1
 8000694:	b2db      	uxtb	r3, r3

}
 8000696:	4618      	mov	r0, r3
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	08004550 	.word	0x08004550
 80006a4:	200001cc 	.word	0x200001cc
 80006a8:	200000f0 	.word	0x200000f0
 80006ac:	080044f8 	.word	0x080044f8

080006b0 <_Z11get_addressv>:
uint8_t get_address(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
	uint8_t buffer[25];
	HAL_UART_Transmit(&huart2, getadd, sizeof(getadd), 100);
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	220d      	movs	r2, #13
 80006ba:	490c      	ldr	r1, [pc, #48]	; (80006ec <_Z11get_addressv+0x3c>)
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <_Z11get_addressv+0x40>)
 80006be:	f002 fc98 	bl	8002ff2 <HAL_UART_Transmit>
//	HAL_Delay(10);
	HAL_UART_Receive(&huart2, buffer, sizeof(buffer), 100);
 80006c2:	1d39      	adds	r1, r7, #4
 80006c4:	2364      	movs	r3, #100	; 0x64
 80006c6:	2219      	movs	r2, #25
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <_Z11get_addressv+0x40>)
 80006ca:	f002 fd24 	bl	8003116 <HAL_UART_Receive>
	sscanf((char*)buffer,"+ADDRESS=%d",&my_addr);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <_Z11get_addressv+0x44>)
 80006d2:	4909      	ldr	r1, [pc, #36]	; (80006f8 <_Z11get_addressv+0x48>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 f8d5 	bl	8003884 <siscanf>

	if(IAM ==1)
		return my_addr+1;
	else if(IAM==0)
		return my_addr-1;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <_Z11get_addressv+0x44>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	b2db      	uxtb	r3, r3

}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3720      	adds	r7, #32
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	08004560 	.word	0x08004560
 80006f0:	200001cc 	.word	0x200001cc
 80006f4:	200000f1 	.word	0x200000f1
 80006f8:	08004508 	.word	0x08004508

080006fc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
    	  //ADC data to soc
    	  //lcd_update

          //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Toggle the LED
      }
  }
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f000 fc71 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 f819 	bl	8000750 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f000 f9fb 	bl	8000b18 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000722:	f000 f99d 	bl	8000a60 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8000726:	f000 f93f 	bl	80009a8 <_ZL12MX_TIM2_Initv>
  MX_ADC1_Init();
 800072a:	f000 f885 	bl	8000838 <_ZL12MX_ADC1_Initv>
  MX_USART3_UART_Init();
 800072e:	f000 f9c5 	bl	8000abc <_ZL19MX_USART3_UART_Initv>
  MX_ADC2_Init();
 8000732:	f000 f8dd 	bl	80008f0 <_ZL12MX_ADC2_Initv>
  HAL_TIM_Base_Start_IT(&htim2);  // Start TIM2 in interrupt mode
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <main+0x3c>)
 8000738:	f001 ffdc 	bl	80026f4 <HAL_TIM_Base_Start_IT>
  lora_init();
 800073c:	f7ff ff22 	bl	8000584 <_Z9lora_initv>
  while (1)
  {

    /* USER CODE END WHILE */
	  //read uart and control motor or motors
	  char cmdc = static_cast<char> (receive_message());
 8000740:	f7ff ff46 	bl	80005d0 <_Z15receive_messagev>
 8000744:	4603      	mov	r3, r0
 8000746:	71fb      	strb	r3, [r7, #7]
	  }
	  else if (cmdc=='2'){
		  //motor continous hitt
	  }
    /* USER CODE BEGIN 3 */
  }
 8000748:	e7fa      	b.n	8000740 <main+0x30>
 800074a:	bf00      	nop
 800074c:	20000184 	.word	0x20000184

08000750 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	; 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f003 f888 	bl	8003874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <_Z18SystemClock_Configv+0xe0>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a2c      	ldr	r2, [pc, #176]	; (8000830 <_Z18SystemClock_Configv+0xe0>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <_Z18SystemClock_Configv+0xe0>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <_Z18SystemClock_Configv+0xe4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a26      	ldr	r2, [pc, #152]	; (8000834 <_Z18SystemClock_Configv+0xe4>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b24      	ldr	r3, [pc, #144]	; (8000834 <_Z18SystemClock_Configv+0xe4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b4:	2310      	movs	r3, #16
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c0:	2308      	movs	r3, #8
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007c4:	23a8      	movs	r3, #168	; 0xa8
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fae5 	bl	8001da4 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf14      	ite	ne
 80007e0:	2301      	movne	r3, #1
 80007e2:	2300      	moveq	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80007ea:	f000 f9fd 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2105      	movs	r1, #5
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fd41 	bl	8002294 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf14      	ite	ne
 8000818:	2301      	movne	r3, #1
 800081a:	2300      	moveq	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000822:	f000 f9e1 	bl	8000be8 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	; 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 800084c:	4a26      	ldr	r2, [pc, #152]	; (80008e8 <_ZL12MX_ADC1_Initv+0xb0>)
 800084e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 8000852:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000856:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 8000866:	2200      	movs	r2, #0
 8000868:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 8000874:	2200      	movs	r2, #0
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <_ZL12MX_ADC1_Initv+0xb4>)
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 8000886:	2201      	movs	r2, #1
 8000888:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 8000894:	2201      	movs	r2, #1
 8000896:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000898:	4812      	ldr	r0, [pc, #72]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 800089a:	f000 fc21 	bl	80010e0 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	bf14      	ite	ne
 80008a4:	2301      	movne	r3, #1
 80008a6:	2300      	moveq	r3, #0
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 80008ae:	f000 f99b 	bl	8000be8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80008ba:	2302      	movs	r3, #2
 80008bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	4619      	mov	r1, r3
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <_ZL12MX_ADC1_Initv+0xac>)
 80008c4:	f000 fd7e 	bl	80013c4 <HAL_ADC_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	bf14      	ite	ne
 80008ce:	2301      	movne	r3, #1
 80008d0:	2300      	moveq	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 80008d8:	f000 f986 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000f4 	.word	0x200000f4
 80008e8:	40012000 	.word	0x40012000
 80008ec:	0f000001 	.word	0x0f000001

080008f0 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000902:	4b26      	ldr	r3, [pc, #152]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 8000904:	4a26      	ldr	r2, [pc, #152]	; (80009a0 <_ZL12MX_ADC2_Initv+0xb0>)
 8000906:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 800090a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800090e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 800091e:	2200      	movs	r2, #0
 8000920:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 800092c:	2200      	movs	r2, #0
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	; (80009a4 <_ZL12MX_ADC2_Initv+0xb4>)
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 800093e:	2201      	movs	r2, #1
 8000940:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 800094c:	2201      	movs	r2, #1
 800094e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000950:	4812      	ldr	r0, [pc, #72]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 8000952:	f000 fbc5 	bl	80010e0 <HAL_ADC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	bf14      	ite	ne
 800095c:	2301      	movne	r3, #1
 800095e:	2300      	moveq	r3, #0
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <_ZL12MX_ADC2_Initv+0x7a>
  {
    Error_Handler();
 8000966:	f000 f93f 	bl	8000be8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800096a:	2301      	movs	r3, #1
 800096c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800096e:	2301      	movs	r3, #1
 8000970:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000972:	2302      	movs	r3, #2
 8000974:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000976:	463b      	mov	r3, r7
 8000978:	4619      	mov	r1, r3
 800097a:	4808      	ldr	r0, [pc, #32]	; (800099c <_ZL12MX_ADC2_Initv+0xac>)
 800097c:	f000 fd22 	bl	80013c4 <HAL_ADC_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	bf14      	ite	ne
 8000986:	2301      	movne	r3, #1
 8000988:	2300      	moveq	r3, #0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <_ZL12MX_ADC2_Initv+0xa4>
  {
    Error_Handler();
 8000990:	f000 f92a 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000013c 	.word	0x2000013c
 80009a0:	40012100 	.word	0x40012100
 80009a4:	0f000001 	.word	0x0f000001

080009a8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c4:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <_ZL12MX_TIM2_Initv+0xb4>)
 80009c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16800-1;
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <_ZL12MX_TIM2_Initv+0xb4>)
 80009ce:	f244 129f 	movw	r2, #16799	; 0x419f
 80009d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <_ZL12MX_TIM2_Initv+0xb4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <_ZL12MX_TIM2_Initv+0xb4>)
 80009dc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80009e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <_ZL12MX_TIM2_Initv+0xb4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <_ZL12MX_TIM2_Initv+0xb4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ee:	481b      	ldr	r0, [pc, #108]	; (8000a5c <_ZL12MX_TIM2_Initv+0xb4>)
 80009f0:	f001 fe30 	bl	8002654 <HAL_TIM_Base_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	bf14      	ite	ne
 80009fa:	2301      	movne	r3, #1
 80009fc:	2300      	moveq	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8000a04:	f000 f8f0 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4619      	mov	r1, r3
 8000a14:	4811      	ldr	r0, [pc, #68]	; (8000a5c <_ZL12MX_TIM2_Initv+0xb4>)
 8000a16:	f001 ffe5 	bl	80029e4 <HAL_TIM_ConfigClockSource>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bf14      	ite	ne
 8000a20:	2301      	movne	r3, #1
 8000a22:	2300      	moveq	r3, #0
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8000a2a:	f000 f8dd 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4808      	ldr	r0, [pc, #32]	; (8000a5c <_ZL12MX_TIM2_Initv+0xb4>)
 8000a3c:	f002 f9fc 	bl	8002e38 <HAL_TIMEx_MasterConfigSynchronization>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bf14      	ite	ne
 8000a46:	2301      	movne	r3, #1
 8000a48:	2300      	moveq	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8000a50:	f000 f8ca 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000184 	.word	0x20000184

08000a60 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a96:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a98:	f002 fa5e 	bl	8002f58 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf14      	ite	ne
 8000aa2:	2301      	movne	r3, #1
 8000aa4:	2300      	moveq	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000aac:	f000 f89c 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001cc 	.word	0x200001cc
 8000ab8:	40004400 	.word	0x40004400

08000abc <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <_ZL19MX_USART3_UART_Initv+0x58>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af2:	4807      	ldr	r0, [pc, #28]	; (8000b10 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000af4:	f002 fa30 	bl	8002f58 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bf14      	ite	ne
 8000afe:	2301      	movne	r3, #1
 8000b00:	2300      	moveq	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8000b08:	f000 f86e 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000210 	.word	0x20000210
 8000b14:	40004800 	.word	0x40004800

08000b18 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	4b2a      	ldr	r3, [pc, #168]	; (8000bdc <_ZL12MX_GPIO_Initv+0xc4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a29      	ldr	r2, [pc, #164]	; (8000bdc <_ZL12MX_GPIO_Initv+0xc4>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <_ZL12MX_GPIO_Initv+0xc4>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <_ZL12MX_GPIO_Initv+0xc4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <_ZL12MX_GPIO_Initv+0xc4>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <_ZL12MX_GPIO_Initv+0xc4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <_ZL12MX_GPIO_Initv+0xc4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a1b      	ldr	r2, [pc, #108]	; (8000bdc <_ZL12MX_GPIO_Initv+0xc4>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <_ZL12MX_GPIO_Initv+0xc4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTORD2_GPIO_Port, MOTORD2_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b88:	4815      	ldr	r0, [pc, #84]	; (8000be0 <_ZL12MX_GPIO_Initv+0xc8>)
 8000b8a:	f001 f8f1 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTORD1_GPIO_Port, MOTORD1_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2140      	movs	r1, #64	; 0x40
 8000b92:	4814      	ldr	r0, [pc, #80]	; (8000be4 <_ZL12MX_GPIO_Initv+0xcc>)
 8000b94:	f001 f8ec 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTORD2_Pin */
  GPIO_InitStruct.Pin = MOTORD2_Pin;
 8000b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTORD2_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <_ZL12MX_GPIO_Initv+0xc8>)
 8000bb2:	f000 ff41 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTORD1_Pin */
  GPIO_InitStruct.Pin = MOTORD1_Pin;
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTORD1_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <_ZL12MX_GPIO_Initv+0xcc>)
 8000bce:	f000 ff33 	bl	8001a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40020800 	.word	0x40020800

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <Error_Handler+0x8>
	...

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a36      	ldr	r2, [pc, #216]	; (8000d3c <HAL_ADC_MspInit+0xf8>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d130      	bne.n	8000cc8 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <HAL_ADC_MspInit+0xfc>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a34      	ldr	r2, [pc, #208]	; (8000d40 <HAL_ADC_MspInit+0xfc>)
 8000c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <HAL_ADC_MspInit+0xfc>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c7e:	61bb      	str	r3, [r7, #24]
 8000c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <HAL_ADC_MspInit+0xfc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a2d      	ldr	r2, [pc, #180]	; (8000d40 <HAL_ADC_MspInit+0xfc>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <HAL_ADC_MspInit+0xfc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4824      	ldr	r0, [pc, #144]	; (8000d44 <HAL_ADC_MspInit+0x100>)
 8000cb2:	f000 fec1 	bl	8001a38 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2012      	movs	r0, #18
 8000cbc:	f000 fe85 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cc0:	2012      	movs	r0, #18
 8000cc2:	f000 fe9e 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000cc6:	e034      	b.n	8000d32 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <HAL_ADC_MspInit+0x104>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d12f      	bne.n	8000d32 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_ADC_MspInit+0xfc>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_ADC_MspInit+0xfc>)
 8000cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_ADC_MspInit+0xfc>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_ADC_MspInit+0xfc>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <HAL_ADC_MspInit+0xfc>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <HAL_ADC_MspInit+0xfc>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <HAL_ADC_MspInit+0x100>)
 8000d1e:	f000 fe8b 	bl	8001a38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2012      	movs	r0, #18
 8000d28:	f000 fe4f 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d2c:	2012      	movs	r0, #18
 8000d2e:	f000 fe68 	bl	8001a02 <HAL_NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3730      	adds	r7, #48	; 0x30
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40012000 	.word	0x40012000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000
 8000d48:	40012100 	.word	0x40012100

08000d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d5c:	d115      	bne.n	8000d8a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <HAL_TIM_Base_MspInit+0x48>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <HAL_TIM_Base_MspInit+0x48>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_TIM_Base_MspInit+0x48>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	201c      	movs	r0, #28
 8000d80:	f000 fe23 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d84:	201c      	movs	r0, #28
 8000d86:	f000 fe3c 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	; 0x30
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a32      	ldr	r2, [pc, #200]	; (8000e80 <HAL_UART_MspInit+0xe8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d12c      	bne.n	8000e14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <HAL_UART_MspInit+0xec>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <HAL_UART_MspInit+0xec>)
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <HAL_UART_MspInit+0xec>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <HAL_UART_MspInit+0xec>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a29      	ldr	r2, [pc, #164]	; (8000e84 <HAL_UART_MspInit+0xec>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <HAL_UART_MspInit+0xec>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000df2:	230c      	movs	r3, #12
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e02:	2307      	movs	r3, #7
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481e      	ldr	r0, [pc, #120]	; (8000e88 <HAL_UART_MspInit+0xf0>)
 8000e0e:	f000 fe13 	bl	8001a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e12:	e031      	b.n	8000e78 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <HAL_UART_MspInit+0xf4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12c      	bne.n	8000e78 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_UART_MspInit+0xec>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HAL_UART_MspInit+0xec>)
 8000e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_UART_MspInit+0xec>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_UART_MspInit+0xec>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_UART_MspInit+0xec>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_UART_MspInit+0xec>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4807      	ldr	r0, [pc, #28]	; (8000e90 <HAL_UART_MspInit+0xf8>)
 8000e74:	f000 fde0 	bl	8001a38 <HAL_GPIO_Init>
}
 8000e78:	bf00      	nop
 8000e7a:	3730      	adds	r7, #48	; 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40004400 	.word	0x40004400
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40004800 	.word	0x40004800
 8000e90:	40020400 	.word	0x40020400

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f8de 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <ADC_IRQHandler+0x14>)
 8000eee:	f000 f93a 	bl	8001166 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <ADC_IRQHandler+0x18>)
 8000ef4:	f000 f937 	bl	8001166 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000f4 	.word	0x200000f4
 8000f00:	2000013c 	.word	0x2000013c

08000f04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <TIM2_IRQHandler+0x10>)
 8000f0a:	f001 fc63 	bl	80027d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000184 	.word	0x20000184

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f002 fc6a 	bl	8003820 <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20020000 	.word	0x20020000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	20000254 	.word	0x20000254
 8000f80:	20000270 	.word	0x20000270

08000f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fae:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc4:	4c0b      	ldr	r4, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd2:	f7ff ffd7 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f002 fc29 	bl	800382c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff fb99 	bl	8000710 <main>
  bx  lr    
 8000fde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fec:	08004718 	.word	0x08004718
  ldr r2, =_sbss
 8000ff0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ff4:	2000026c 	.word	0x2000026c

08000ff8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <CAN1_RX0_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_Init+0x40>)
 8001006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_Init+0x40>)
 8001012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_Init+0x40>)
 800101e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001024:	2003      	movs	r0, #3
 8001026:	f000 fcc5 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102a:	200f      	movs	r0, #15
 800102c:	f000 f808 	bl	8001040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001030:	f7ff fde0 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023c00 	.word	0x40023c00

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x54>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_InitTick+0x58>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	fbb3 f3f1 	udiv	r3, r3, r1
 800105a:	fbb2 f3f3 	udiv	r3, r2, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fcdd 	bl	8001a1e <HAL_SYSTICK_Config>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e00e      	b.n	800108c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d80a      	bhi.n	800108a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800107c:	f000 fca5 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001080:	4a06      	ldr	r2, [pc, #24]	; (800109c <HAL_InitTick+0x5c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000000 	.word	0x20000000
 8001098:	20000008 	.word	0x20000008
 800109c:	20000004 	.word	0x20000004

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000258 	.word	0x20000258

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000258 	.word	0x20000258

080010e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e033      	b.n	800115e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d109      	bne.n	8001112 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fda0 	bl	8000c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	2b00      	cmp	r3, #0
 800111c:	d118      	bne.n	8001150 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001126:	f023 0302 	bic.w	r3, r3, #2
 800112a:	f043 0202 	orr.w	r2, r3, #2
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 fa68 	bl	8001608 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f023 0303 	bic.w	r3, r3, #3
 8001146:	f043 0201 	orr.w	r2, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	641a      	str	r2, [r3, #64]	; 0x40
 800114e:	e001      	b.n	8001154 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f003 0320 	and.w	r3, r3, #32
 8001194:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d049      	beq.n	8001230 <HAL_ADC_IRQHandler+0xca>
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d046      	beq.n	8001230 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d105      	bne.n	80011ba <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d12b      	bne.n	8001220 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d127      	bne.n	8001220 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d119      	bne.n	8001220 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0220 	bic.w	r2, r2, #32
 80011fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d105      	bne.n	8001220 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f043 0201 	orr.w	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 f8b0 	bl	8001386 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f06f 0212 	mvn.w	r2, #18
 800122e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d057      	beq.n	80012f6 <HAL_ADC_IRQHandler+0x190>
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d054      	beq.n	80012f6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d139      	bne.n	80012e6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001278:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800127c:	2b00      	cmp	r3, #0
 800127e:	d006      	beq.n	800128e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800128a:	2b00      	cmp	r3, #0
 800128c:	d12b      	bne.n	80012e6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001298:	2b00      	cmp	r3, #0
 800129a:	d124      	bne.n	80012e6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d11d      	bne.n	80012e6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d119      	bne.n	80012e6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f043 0201 	orr.w	r2, r3, #1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fa8a 	bl	8001800 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f06f 020c 	mvn.w	r2, #12
 80012f4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001304:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d017      	beq.n	800133c <HAL_ADC_IRQHandler+0x1d6>
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d014      	beq.n	800133c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b01      	cmp	r3, #1
 800131e:	d10d      	bne.n	800133c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f834 	bl	800139a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f06f 0201 	mvn.w	r2, #1
 800133a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800134a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d015      	beq.n	800137e <HAL_ADC_IRQHandler+0x218>
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d012      	beq.n	800137e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	f043 0202 	orr.w	r2, r3, #2
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f06f 0220 	mvn.w	r2, #32
 800136c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f81d 	bl	80013ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f06f 0220 	mvn.w	r2, #32
 800137c:	601a      	str	r2, [r3, #0]
  }
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x1c>
 80013dc:	2302      	movs	r3, #2
 80013de:	e105      	b.n	80015ec <HAL_ADC_ConfigChannel+0x228>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	d925      	bls.n	800143c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68d9      	ldr	r1, [r3, #12]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	3b1e      	subs	r3, #30
 8001406:	2207      	movs	r2, #7
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43da      	mvns	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	400a      	ands	r2, r1
 8001414:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68d9      	ldr	r1, [r3, #12]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	4603      	mov	r3, r0
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4403      	add	r3, r0
 800142e:	3b1e      	subs	r3, #30
 8001430:	409a      	lsls	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	e022      	b.n	8001482 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6919      	ldr	r1, [r3, #16]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	2207      	movs	r2, #7
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	400a      	ands	r2, r1
 800145e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6919      	ldr	r1, [r3, #16]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	4603      	mov	r3, r0
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4403      	add	r3, r0
 8001478:	409a      	lsls	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b06      	cmp	r3, #6
 8001488:	d824      	bhi.n	80014d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b05      	subs	r3, #5
 800149c:	221f      	movs	r2, #31
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	400a      	ands	r2, r1
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	3b05      	subs	r3, #5
 80014c6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
 80014d2:	e04c      	b.n	800156e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b0c      	cmp	r3, #12
 80014da:	d824      	bhi.n	8001526 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	3b23      	subs	r3, #35	; 0x23
 80014ee:	221f      	movs	r2, #31
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43da      	mvns	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	400a      	ands	r2, r1
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b29b      	uxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3b23      	subs	r3, #35	; 0x23
 8001518:	fa00 f203 	lsl.w	r2, r0, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	631a      	str	r2, [r3, #48]	; 0x30
 8001524:	e023      	b.n	800156e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3b41      	subs	r3, #65	; 0x41
 8001538:	221f      	movs	r2, #31
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	400a      	ands	r2, r1
 8001546:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	3b41      	subs	r3, #65	; 0x41
 8001562:	fa00 f203 	lsl.w	r2, r0, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_ADC_ConfigChannel+0x234>)
 8001570:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a21      	ldr	r2, [pc, #132]	; (80015fc <HAL_ADC_ConfigChannel+0x238>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d109      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1cc>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b12      	cmp	r3, #18
 8001582:	d105      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_ADC_ConfigChannel+0x238>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d123      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x21e>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b10      	cmp	r3, #16
 80015a0:	d003      	beq.n	80015aa <HAL_ADC_ConfigChannel+0x1e6>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b11      	cmp	r3, #17
 80015a8:	d11b      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b10      	cmp	r3, #16
 80015bc:	d111      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_ADC_ConfigChannel+0x23c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a10      	ldr	r2, [pc, #64]	; (8001604 <HAL_ADC_ConfigChannel+0x240>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	0c9a      	lsrs	r2, r3, #18
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015d4:	e002      	b.n	80015dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3b01      	subs	r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f9      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40012300 	.word	0x40012300
 80015fc:	40012000 	.word	0x40012000
 8001600:	20000000 	.word	0x20000000
 8001604:	431bde83 	.word	0x431bde83

08001608 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001610:	4b79      	ldr	r3, [pc, #484]	; (80017f8 <ADC_Init+0x1f0>)
 8001612:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	431a      	orrs	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800163c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	021a      	lsls	r2, r3, #8
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	4a58      	ldr	r2, [pc, #352]	; (80017fc <ADC_Init+0x1f4>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d022      	beq.n	80016e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6899      	ldr	r1, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6899      	ldr	r1, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	e00f      	b.n	8001706 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001704:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0202 	bic.w	r2, r2, #2
 8001714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6899      	ldr	r1, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7e1b      	ldrb	r3, [r3, #24]
 8001720:	005a      	lsls	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d01b      	beq.n	800176c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001742:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001752:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6859      	ldr	r1, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	3b01      	subs	r3, #1
 8001760:	035a      	lsls	r2, r3, #13
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	e007      	b.n	800177c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800177a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	3b01      	subs	r3, #1
 8001798:	051a      	lsls	r2, r3, #20
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6899      	ldr	r1, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017be:	025a      	lsls	r2, r3, #9
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6899      	ldr	r1, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	029a      	lsls	r2, r3, #10
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	609a      	str	r2, [r3, #8]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40012300 	.word	0x40012300
 80017fc:	0f000001 	.word	0x0f000001

08001800 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff29 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff3e 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff8e 	bl	8001908 <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff31 	bl	8001878 <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa2 	bl	8001970 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	e16b      	b.n	8001d2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 815a 	bne.w	8001d26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d005      	beq.n	8001a8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d130      	bne.n	8001aec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 0201 	and.w	r2, r3, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d017      	beq.n	8001b28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d123      	bne.n	8001b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	08da      	lsrs	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3208      	adds	r2, #8
 8001b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	69b9      	ldr	r1, [r7, #24]
 8001b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80b4 	beq.w	8001d26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b60      	ldr	r3, [pc, #384]	; (8001d44 <HAL_GPIO_Init+0x30c>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a5f      	ldr	r2, [pc, #380]	; (8001d44 <HAL_GPIO_Init+0x30c>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b5d      	ldr	r3, [pc, #372]	; (8001d44 <HAL_GPIO_Init+0x30c>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bda:	4a5b      	ldr	r2, [pc, #364]	; (8001d48 <HAL_GPIO_Init+0x310>)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_GPIO_Init+0x314>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d02b      	beq.n	8001c5e <HAL_GPIO_Init+0x226>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a51      	ldr	r2, [pc, #324]	; (8001d50 <HAL_GPIO_Init+0x318>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d025      	beq.n	8001c5a <HAL_GPIO_Init+0x222>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a50      	ldr	r2, [pc, #320]	; (8001d54 <HAL_GPIO_Init+0x31c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01f      	beq.n	8001c56 <HAL_GPIO_Init+0x21e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4f      	ldr	r2, [pc, #316]	; (8001d58 <HAL_GPIO_Init+0x320>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d019      	beq.n	8001c52 <HAL_GPIO_Init+0x21a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4e      	ldr	r2, [pc, #312]	; (8001d5c <HAL_GPIO_Init+0x324>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0x216>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4d      	ldr	r2, [pc, #308]	; (8001d60 <HAL_GPIO_Init+0x328>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00d      	beq.n	8001c4a <HAL_GPIO_Init+0x212>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4c      	ldr	r2, [pc, #304]	; (8001d64 <HAL_GPIO_Init+0x32c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x20e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4b      	ldr	r2, [pc, #300]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_Init+0x20a>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e00e      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c42:	2308      	movs	r3, #8
 8001c44:	e00c      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c46:	2306      	movs	r3, #6
 8001c48:	e00a      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	e008      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c52:	2303      	movs	r3, #3
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f002 0203 	and.w	r2, r2, #3
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c70:	4935      	ldr	r1, [pc, #212]	; (8001d48 <HAL_GPIO_Init+0x310>)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	; (8001d6c <HAL_GPIO_Init+0x334>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca2:	4a32      	ldr	r2, [pc, #200]	; (8001d6c <HAL_GPIO_Init+0x334>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <HAL_GPIO_Init+0x334>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ccc:	4a27      	ldr	r2, [pc, #156]	; (8001d6c <HAL_GPIO_Init+0x334>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_GPIO_Init+0x334>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf6:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <HAL_GPIO_Init+0x334>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_GPIO_Init+0x334>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d20:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_GPIO_Init+0x334>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	f67f ae90 	bls.w	8001a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40013800 	.word	0x40013800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020400 	.word	0x40020400
 8001d54:	40020800 	.word	0x40020800
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40021400 	.word	0x40021400
 8001d64:	40021800 	.word	0x40021800
 8001d68:	40021c00 	.word	0x40021c00
 8001d6c:	40013c00 	.word	0x40013c00

08001d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d8c:	e003      	b.n	8001d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	041a      	lsls	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	619a      	str	r2, [r3, #24]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e267      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d075      	beq.n	8001eae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dc2:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d00c      	beq.n	8001de8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dce:	4b85      	ldr	r3, [pc, #532]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d112      	bne.n	8001e00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dda:	4b82      	ldr	r3, [pc, #520]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de6:	d10b      	bne.n	8001e00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	4b7e      	ldr	r3, [pc, #504]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d05b      	beq.n	8001eac <HAL_RCC_OscConfig+0x108>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d157      	bne.n	8001eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e242      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e08:	d106      	bne.n	8001e18 <HAL_RCC_OscConfig+0x74>
 8001e0a:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a75      	ldr	r2, [pc, #468]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e01d      	b.n	8001e54 <HAL_RCC_OscConfig+0xb0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x98>
 8001e22:	4b70      	ldr	r3, [pc, #448]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a6f      	ldr	r2, [pc, #444]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a6c      	ldr	r2, [pc, #432]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e00b      	b.n	8001e54 <HAL_RCC_OscConfig+0xb0>
 8001e3c:	4b69      	ldr	r3, [pc, #420]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a68      	ldr	r2, [pc, #416]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b66      	ldr	r3, [pc, #408]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a65      	ldr	r2, [pc, #404]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7ff f934 	bl	80010c8 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff f930 	bl	80010c8 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	; 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e207      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	4b5b      	ldr	r3, [pc, #364]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0xc0>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff f920 	bl	80010c8 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff f91c 	bl	80010c8 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1f3      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9e:	4b51      	ldr	r3, [pc, #324]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0xe8>
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d063      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eba:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec6:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d11c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed2:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d116      	bne.n	8001f0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ede:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x152>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e1c7      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4937      	ldr	r1, [pc, #220]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0a:	e03a      	b.n	8001f82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f14:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7ff f8d5 	bl	80010c8 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f22:	f7ff f8d1 	bl	80010c8 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e1a8      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f40:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4925      	ldr	r1, [pc, #148]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
 8001f54:	e015      	b.n	8001f82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7ff f8b4 	bl	80010c8 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f64:	f7ff f8b0 	bl	80010c8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e187      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f76:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d036      	beq.n	8001ffc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d016      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_RCC_OscConfig+0x248>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7ff f894 	bl	80010c8 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa4:	f7ff f890 	bl	80010c8 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e167      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x200>
 8001fc2:	e01b      	b.n	8001ffc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_RCC_OscConfig+0x248>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7ff f87d 	bl	80010c8 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd0:	e00e      	b.n	8001ff0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd2:	f7ff f879 	bl	80010c8 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d907      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e150      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	42470000 	.word	0x42470000
 8001fec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	4b88      	ldr	r3, [pc, #544]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1ea      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 8097 	beq.w	8002138 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200e:	4b81      	ldr	r3, [pc, #516]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10f      	bne.n	800203a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b7d      	ldr	r3, [pc, #500]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a7c      	ldr	r2, [pc, #496]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b7a      	ldr	r3, [pc, #488]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b77      	ldr	r3, [pc, #476]	; (8002218 <HAL_RCC_OscConfig+0x474>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d118      	bne.n	8002078 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002046:	4b74      	ldr	r3, [pc, #464]	; (8002218 <HAL_RCC_OscConfig+0x474>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a73      	ldr	r2, [pc, #460]	; (8002218 <HAL_RCC_OscConfig+0x474>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7ff f839 	bl	80010c8 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205a:	f7ff f835 	bl	80010c8 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e10c      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <HAL_RCC_OscConfig+0x474>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x2ea>
 8002080:	4b64      	ldr	r3, [pc, #400]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	4a63      	ldr	r2, [pc, #396]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6713      	str	r3, [r2, #112]	; 0x70
 800208c:	e01c      	b.n	80020c8 <HAL_RCC_OscConfig+0x324>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b05      	cmp	r3, #5
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x30c>
 8002096:	4b5f      	ldr	r3, [pc, #380]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	4a5e      	ldr	r2, [pc, #376]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	6713      	str	r3, [r2, #112]	; 0x70
 80020a2:	4b5c      	ldr	r3, [pc, #368]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	4a5b      	ldr	r2, [pc, #364]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6713      	str	r3, [r2, #112]	; 0x70
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_OscConfig+0x324>
 80020b0:	4b58      	ldr	r3, [pc, #352]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 80020b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b4:	4a57      	ldr	r2, [pc, #348]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 80020b6:	f023 0301 	bic.w	r3, r3, #1
 80020ba:	6713      	str	r3, [r2, #112]	; 0x70
 80020bc:	4b55      	ldr	r3, [pc, #340]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	4a54      	ldr	r2, [pc, #336]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 80020c2:	f023 0304 	bic.w	r3, r3, #4
 80020c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d015      	beq.n	80020fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7fe fffa 	bl	80010c8 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7fe fff6 	bl	80010c8 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e0cb      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	4b49      	ldr	r3, [pc, #292]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0ee      	beq.n	80020d8 <HAL_RCC_OscConfig+0x334>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fc:	f7fe ffe4 	bl	80010c8 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002102:	e00a      	b.n	800211a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7fe ffe0 	bl	80010c8 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e0b5      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211a:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ee      	bne.n	8002104 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002126:	7dfb      	ldrb	r3, [r7, #23]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212c:	4b39      	ldr	r3, [pc, #228]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a38      	ldr	r2, [pc, #224]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 8002132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a1 	beq.w	8002284 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002142:	4b34      	ldr	r3, [pc, #208]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b08      	cmp	r3, #8
 800214c:	d05c      	beq.n	8002208 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d141      	bne.n	80021da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b31      	ldr	r3, [pc, #196]	; (800221c <HAL_RCC_OscConfig+0x478>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe ffb4 	bl	80010c8 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002164:	f7fe ffb0 	bl	80010c8 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e087      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002176:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	019b      	lsls	r3, r3, #6
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	3b01      	subs	r3, #1
 800219c:	041b      	lsls	r3, r3, #16
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	061b      	lsls	r3, r3, #24
 80021a6:	491b      	ldr	r1, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <HAL_RCC_OscConfig+0x478>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe ff89 	bl	80010c8 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ba:	f7fe ff85 	bl	80010c8 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e05c      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x416>
 80021d8:	e054      	b.n	8002284 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <HAL_RCC_OscConfig+0x478>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe ff72 	bl	80010c8 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe ff6e 	bl	80010c8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e045      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCC_OscConfig+0x470>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x444>
 8002206:	e03d      	b.n	8002284 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d107      	bne.n	8002220 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e038      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
 8002214:	40023800 	.word	0x40023800
 8002218:	40007000 	.word	0x40007000
 800221c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_RCC_OscConfig+0x4ec>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d028      	beq.n	8002280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d121      	bne.n	8002280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d11a      	bne.n	8002280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002250:	4013      	ands	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002256:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002258:	4293      	cmp	r3, r2
 800225a:	d111      	bne.n	8002280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	085b      	lsrs	r3, r3, #1
 8002268:	3b01      	subs	r3, #1
 800226a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d107      	bne.n	8002280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0cc      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a8:	4b68      	ldr	r3, [pc, #416]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d90c      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b65      	ldr	r3, [pc, #404]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b63      	ldr	r3, [pc, #396]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0b8      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e8:	4b59      	ldr	r3, [pc, #356]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a58      	ldr	r2, [pc, #352]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002300:	4b53      	ldr	r3, [pc, #332]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a52      	ldr	r2, [pc, #328]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800230a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	4b50      	ldr	r3, [pc, #320]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	494d      	ldr	r1, [pc, #308]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d044      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d119      	bne.n	8002372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e07f      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d003      	beq.n	8002352 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800234e:	2b03      	cmp	r3, #3
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002352:	4b3f      	ldr	r3, [pc, #252]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e06f      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002362:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e067      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002372:	4b37      	ldr	r3, [pc, #220]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f023 0203 	bic.w	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4934      	ldr	r1, [pc, #208]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	4313      	orrs	r3, r2
 8002382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002384:	f7fe fea0 	bl	80010c8 <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800238c:	f7fe fe9c 	bl	80010c8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e04f      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 020c 	and.w	r2, r3, #12
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d1eb      	bne.n	800238c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d20c      	bcs.n	80023dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e032      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4916      	ldr	r1, [pc, #88]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	490e      	ldr	r1, [pc, #56]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800241a:	f000 f821 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 800241e:	4602      	mov	r2, r0
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	490a      	ldr	r1, [pc, #40]	; (8002454 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	5ccb      	ldrb	r3, [r1, r3]
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fe00 	bl	8001040 <HAL_InitTick>

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023c00 	.word	0x40023c00
 8002450:	40023800 	.word	0x40023800
 8002454:	08004570 	.word	0x08004570
 8002458:	20000000 	.word	0x20000000
 800245c:	20000004 	.word	0x20000004

08002460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002464:	b090      	sub	sp, #64	; 0x40
 8002466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
 800246c:	2300      	movs	r3, #0
 800246e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002470:	2300      	movs	r3, #0
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002478:	4b59      	ldr	r3, [pc, #356]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b08      	cmp	r3, #8
 8002482:	d00d      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002484:	2b08      	cmp	r3, #8
 8002486:	f200 80a1 	bhi.w	80025cc <HAL_RCC_GetSysClockFreq+0x16c>
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x34>
 800248e:	2b04      	cmp	r3, #4
 8002490:	d003      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x3a>
 8002492:	e09b      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002494:	4b53      	ldr	r3, [pc, #332]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002496:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002498:	e09b      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800249a:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800249e:	e098      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a0:	4b4f      	ldr	r3, [pc, #316]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024aa:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d028      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b6:	4b4a      	ldr	r3, [pc, #296]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	099b      	lsrs	r3, r3, #6
 80024bc:	2200      	movs	r2, #0
 80024be:	623b      	str	r3, [r7, #32]
 80024c0:	627a      	str	r2, [r7, #36]	; 0x24
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024c8:	2100      	movs	r1, #0
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80024cc:	fb03 f201 	mul.w	r2, r3, r1
 80024d0:	2300      	movs	r3, #0
 80024d2:	fb00 f303 	mul.w	r3, r0, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	4a43      	ldr	r2, [pc, #268]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80024da:	fba0 1202 	umull	r1, r2, r0, r2
 80024de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024e0:	460a      	mov	r2, r1
 80024e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80024e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e6:	4413      	add	r3, r2
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ec:	2200      	movs	r2, #0
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	61fa      	str	r2, [r7, #28]
 80024f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024fa:	f7fd fec1 	bl	8000280 <__aeabi_uldivmod>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4613      	mov	r3, r2
 8002504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002506:	e053      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002508:	4b35      	ldr	r3, [pc, #212]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	099b      	lsrs	r3, r3, #6
 800250e:	2200      	movs	r2, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	617a      	str	r2, [r7, #20]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800251a:	f04f 0b00 	mov.w	fp, #0
 800251e:	4652      	mov	r2, sl
 8002520:	465b      	mov	r3, fp
 8002522:	f04f 0000 	mov.w	r0, #0
 8002526:	f04f 0100 	mov.w	r1, #0
 800252a:	0159      	lsls	r1, r3, #5
 800252c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002530:	0150      	lsls	r0, r2, #5
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	ebb2 080a 	subs.w	r8, r2, sl
 800253a:	eb63 090b 	sbc.w	r9, r3, fp
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800254a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800254e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002552:	ebb2 0408 	subs.w	r4, r2, r8
 8002556:	eb63 0509 	sbc.w	r5, r3, r9
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	00eb      	lsls	r3, r5, #3
 8002564:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002568:	00e2      	lsls	r2, r4, #3
 800256a:	4614      	mov	r4, r2
 800256c:	461d      	mov	r5, r3
 800256e:	eb14 030a 	adds.w	r3, r4, sl
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	eb45 030b 	adc.w	r3, r5, fp
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002586:	4629      	mov	r1, r5
 8002588:	028b      	lsls	r3, r1, #10
 800258a:	4621      	mov	r1, r4
 800258c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002590:	4621      	mov	r1, r4
 8002592:	028a      	lsls	r2, r1, #10
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259a:	2200      	movs	r2, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	60fa      	str	r2, [r7, #12]
 80025a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025a4:	f7fd fe6c 	bl	8000280 <__aeabi_uldivmod>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4613      	mov	r3, r2
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	3301      	adds	r3, #1
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80025c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025ca:	e002      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3740      	adds	r7, #64	; 0x40
 80025d8:	46bd      	mov	sp, r7
 80025da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	00f42400 	.word	0x00f42400
 80025e8:	017d7840 	.word	0x017d7840

080025ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <HAL_RCC_GetHCLKFreq+0x14>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000000 	.word	0x20000000

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002608:	f7ff fff0 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	0a9b      	lsrs	r3, r3, #10
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	08004580 	.word	0x08004580

0800262c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002630:	f7ff ffdc 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0b5b      	lsrs	r3, r3, #13
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	08004580 	.word	0x08004580

08002654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e041      	b.n	80026ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe fb66 	bl	8000d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3304      	adds	r3, #4
 8002690:	4619      	mov	r1, r3
 8002692:	4610      	mov	r0, r2
 8002694:	f000 fa96 	bl	8002bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d001      	beq.n	800270c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e04e      	b.n	80027aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d022      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d01d      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1f      	ldr	r2, [pc, #124]	; (80027bc <HAL_TIM_Base_Start_IT+0xc8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d018      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d013      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00e      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1b      	ldr	r2, [pc, #108]	; (80027c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_TIM_Base_Start_IT+0xd8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d004      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d111      	bne.n	8002798 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b06      	cmp	r3, #6
 8002784:	d010      	beq.n	80027a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002796:	e007      	b.n	80027a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40010000 	.word	0x40010000
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800
 80027c4:	40000c00 	.word	0x40000c00
 80027c8:	40010400 	.word	0x40010400
 80027cc:	40014000 	.word	0x40014000
 80027d0:	40001800 	.word	0x40001800

080027d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d122      	bne.n	8002830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d11b      	bne.n	8002830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0202 	mvn.w	r2, #2
 8002800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f9b5 	bl	8002b86 <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f9a7 	bl	8002b72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f9b8 	bl	8002b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b04      	cmp	r3, #4
 800283c:	d122      	bne.n	8002884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d11b      	bne.n	8002884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0204 	mvn.w	r2, #4
 8002854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2202      	movs	r2, #2
 800285a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f98b 	bl	8002b86 <HAL_TIM_IC_CaptureCallback>
 8002870:	e005      	b.n	800287e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f97d 	bl	8002b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f98e 	bl	8002b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b08      	cmp	r3, #8
 8002890:	d122      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b08      	cmp	r3, #8
 800289e:	d11b      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0208 	mvn.w	r2, #8
 80028a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2204      	movs	r2, #4
 80028ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f961 	bl	8002b86 <HAL_TIM_IC_CaptureCallback>
 80028c4:	e005      	b.n	80028d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f953 	bl	8002b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f964 	bl	8002b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d122      	bne.n	800292c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d11b      	bne.n	800292c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0210 	mvn.w	r2, #16
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2208      	movs	r2, #8
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f937 	bl	8002b86 <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f929 	bl	8002b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f93a 	bl	8002b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d10e      	bne.n	8002958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d107      	bne.n	8002958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0201 	mvn.w	r2, #1
 8002950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fd fed2 	bl	80006fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d10e      	bne.n	8002984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002970:	2b80      	cmp	r3, #128	; 0x80
 8002972:	d107      	bne.n	8002984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800297c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fae0 	bl	8002f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	2b40      	cmp	r3, #64	; 0x40
 8002990:	d10e      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d107      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8ff 	bl	8002bae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d10e      	bne.n	80029dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d107      	bne.n	80029dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0220 	mvn.w	r2, #32
 80029d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 faaa 	bl	8002f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_TIM_ConfigClockSource+0x1c>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e0b4      	b.n	8002b6a <HAL_TIM_ConfigClockSource+0x186>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a38:	d03e      	beq.n	8002ab8 <HAL_TIM_ConfigClockSource+0xd4>
 8002a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3e:	f200 8087 	bhi.w	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a46:	f000 8086 	beq.w	8002b56 <HAL_TIM_ConfigClockSource+0x172>
 8002a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4e:	d87f      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a50:	2b70      	cmp	r3, #112	; 0x70
 8002a52:	d01a      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0xa6>
 8002a54:	2b70      	cmp	r3, #112	; 0x70
 8002a56:	d87b      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a58:	2b60      	cmp	r3, #96	; 0x60
 8002a5a:	d050      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x11a>
 8002a5c:	2b60      	cmp	r3, #96	; 0x60
 8002a5e:	d877      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a60:	2b50      	cmp	r3, #80	; 0x50
 8002a62:	d03c      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0xfa>
 8002a64:	2b50      	cmp	r3, #80	; 0x50
 8002a66:	d873      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d058      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x13a>
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d86f      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a70:	2b30      	cmp	r3, #48	; 0x30
 8002a72:	d064      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x15a>
 8002a74:	2b30      	cmp	r3, #48	; 0x30
 8002a76:	d86b      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d060      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x15a>
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d867      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d05c      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x15a>
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d05a      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x15a>
 8002a88:	e062      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f000 f9ad 	bl	8002df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	609a      	str	r2, [r3, #8]
      break;
 8002ab6:	e04f      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6899      	ldr	r1, [r3, #8]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f000 f996 	bl	8002df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ada:	609a      	str	r2, [r3, #8]
      break;
 8002adc:	e03c      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f000 f90a 	bl	8002d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2150      	movs	r1, #80	; 0x50
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f963 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002afc:	e02c      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f000 f929 	bl	8002d62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2160      	movs	r1, #96	; 0x60
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f953 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002b1c:	e01c      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f000 f8ea 	bl	8002d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2140      	movs	r1, #64	; 0x40
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f943 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002b3c:	e00c      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4619      	mov	r1, r3
 8002b48:	4610      	mov	r0, r2
 8002b4a:	f000 f93a 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002b4e:	e003      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      break;
 8002b54:	e000      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a40      	ldr	r2, [pc, #256]	; (8002cd8 <TIM_Base_SetConfig+0x114>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d013      	beq.n	8002c04 <TIM_Base_SetConfig+0x40>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be2:	d00f      	beq.n	8002c04 <TIM_Base_SetConfig+0x40>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3d      	ldr	r2, [pc, #244]	; (8002cdc <TIM_Base_SetConfig+0x118>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00b      	beq.n	8002c04 <TIM_Base_SetConfig+0x40>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3c      	ldr	r2, [pc, #240]	; (8002ce0 <TIM_Base_SetConfig+0x11c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d007      	beq.n	8002c04 <TIM_Base_SetConfig+0x40>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a3b      	ldr	r2, [pc, #236]	; (8002ce4 <TIM_Base_SetConfig+0x120>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d003      	beq.n	8002c04 <TIM_Base_SetConfig+0x40>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3a      	ldr	r2, [pc, #232]	; (8002ce8 <TIM_Base_SetConfig+0x124>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d108      	bne.n	8002c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a2f      	ldr	r2, [pc, #188]	; (8002cd8 <TIM_Base_SetConfig+0x114>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d02b      	beq.n	8002c76 <TIM_Base_SetConfig+0xb2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c24:	d027      	beq.n	8002c76 <TIM_Base_SetConfig+0xb2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a2c      	ldr	r2, [pc, #176]	; (8002cdc <TIM_Base_SetConfig+0x118>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d023      	beq.n	8002c76 <TIM_Base_SetConfig+0xb2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a2b      	ldr	r2, [pc, #172]	; (8002ce0 <TIM_Base_SetConfig+0x11c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01f      	beq.n	8002c76 <TIM_Base_SetConfig+0xb2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a2a      	ldr	r2, [pc, #168]	; (8002ce4 <TIM_Base_SetConfig+0x120>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d01b      	beq.n	8002c76 <TIM_Base_SetConfig+0xb2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a29      	ldr	r2, [pc, #164]	; (8002ce8 <TIM_Base_SetConfig+0x124>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d017      	beq.n	8002c76 <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a28      	ldr	r2, [pc, #160]	; (8002cec <TIM_Base_SetConfig+0x128>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a27      	ldr	r2, [pc, #156]	; (8002cf0 <TIM_Base_SetConfig+0x12c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00f      	beq.n	8002c76 <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a26      	ldr	r2, [pc, #152]	; (8002cf4 <TIM_Base_SetConfig+0x130>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00b      	beq.n	8002c76 <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <TIM_Base_SetConfig+0x134>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <TIM_Base_SetConfig+0x138>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d003      	beq.n	8002c76 <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <TIM_Base_SetConfig+0x13c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d108      	bne.n	8002c88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <TIM_Base_SetConfig+0x114>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <TIM_Base_SetConfig+0xf8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <TIM_Base_SetConfig+0x124>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d103      	bne.n	8002cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	615a      	str	r2, [r3, #20]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40000800 	.word	0x40000800
 8002ce4:	40000c00 	.word	0x40000c00
 8002ce8:	40010400 	.word	0x40010400
 8002cec:	40014000 	.word	0x40014000
 8002cf0:	40014400 	.word	0x40014400
 8002cf4:	40014800 	.word	0x40014800
 8002cf8:	40001800 	.word	0x40001800
 8002cfc:	40001c00 	.word	0x40001c00
 8002d00:	40002000 	.word	0x40002000

08002d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f023 0201 	bic.w	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f023 030a 	bic.w	r3, r3, #10
 8002d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	621a      	str	r2, [r3, #32]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b087      	sub	sp, #28
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f023 0210 	bic.w	r2, r3, #16
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	031b      	lsls	r3, r3, #12
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	621a      	str	r2, [r3, #32]
}
 8002db6:	bf00      	nop
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f043 0307 	orr.w	r3, r3, #7
 8002de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	021a      	lsls	r2, r3, #8
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	609a      	str	r2, [r3, #8]
}
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e05a      	b.n	8002f06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a21      	ldr	r2, [pc, #132]	; (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d022      	beq.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9c:	d01d      	beq.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d018      	beq.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00e      	beq.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	40000c00 	.word	0x40000c00
 8002f24:	40010400 	.word	0x40010400
 8002f28:	40014000 	.word	0x40014000
 8002f2c:	40001800 	.word	0x40001800

08002f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e03f      	b.n	8002fea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd ff0a 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2224      	movs	r2, #36	; 0x24
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f9cb 	bl	8003338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b08a      	sub	sp, #40	; 0x28
 8002ff6:	af02      	add	r7, sp, #8
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b20      	cmp	r3, #32
 8003010:	d17c      	bne.n	800310c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_UART_Transmit+0x2c>
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e075      	b.n	800310e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_UART_Transmit+0x3e>
 800302c:	2302      	movs	r3, #2
 800302e:	e06e      	b.n	800310e <HAL_UART_Transmit+0x11c>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2221      	movs	r2, #33	; 0x21
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003046:	f7fe f83f 	bl	80010c8 <HAL_GetTick>
 800304a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	88fa      	ldrh	r2, [r7, #6]
 8003050:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	88fa      	ldrh	r2, [r7, #6]
 8003056:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003060:	d108      	bne.n	8003074 <HAL_UART_Transmit+0x82>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d104      	bne.n	8003074 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	e003      	b.n	800307c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003084:	e02a      	b.n	80030dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f8e2 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e036      	b.n	800310e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	3302      	adds	r3, #2
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	e007      	b.n	80030ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	3301      	adds	r3, #1
 80030cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1cf      	bne.n	8003086 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f8b2 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e006      	b.n	800310e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e000      	b.n	800310e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
  }
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b08a      	sub	sp, #40	; 0x28
 800311a:	af02      	add	r7, sp, #8
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b20      	cmp	r3, #32
 8003134:	f040 808c 	bne.w	8003250 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_UART_Receive+0x2e>
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e084      	b.n	8003252 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_UART_Receive+0x40>
 8003152:	2302      	movs	r3, #2
 8003154:	e07d      	b.n	8003252 <HAL_UART_Receive+0x13c>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2222      	movs	r2, #34	; 0x22
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003172:	f7fd ffa9 	bl	80010c8 <HAL_GetTick>
 8003176:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	88fa      	ldrh	r2, [r7, #6]
 800317c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	88fa      	ldrh	r2, [r7, #6]
 8003182:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318c:	d108      	bne.n	80031a0 <HAL_UART_Receive+0x8a>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	e003      	b.n	80031a8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80031b0:	e043      	b.n	800323a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	2120      	movs	r1, #32
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f84c 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e042      	b.n	8003252 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10c      	bne.n	80031ec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031de:	b29a      	uxth	r2, r3
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	3302      	adds	r3, #2
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	e01f      	b.n	800322c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f4:	d007      	beq.n	8003206 <HAL_UART_Receive+0xf0>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <HAL_UART_Receive+0xfe>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	b2da      	uxtb	r2, r3
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e008      	b.n	8003226 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003220:	b2da      	uxtb	r2, r3
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3301      	adds	r3, #1
 800322a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1b6      	bne.n	80031b2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003250:	2302      	movs	r3, #2
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b090      	sub	sp, #64	; 0x40
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	4613      	mov	r3, r2
 8003268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800326a:	e050      	b.n	800330e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003272:	d04c      	beq.n	800330e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <UART_WaitOnFlagUntilTimeout+0x30>
 800327a:	f7fd ff25 	bl	80010c8 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003286:	429a      	cmp	r2, r3
 8003288:	d241      	bcs.n	800330e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	330c      	adds	r3, #12
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	330c      	adds	r3, #12
 80032a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032aa:	637a      	str	r2, [r7, #52]	; 0x34
 80032ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e5      	bne.n	800328a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3314      	adds	r3, #20
 80032c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	e853 3f00 	ldrex	r3, [r3]
 80032cc:	613b      	str	r3, [r7, #16]
   return(result);
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f023 0301 	bic.w	r3, r3, #1
 80032d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3314      	adds	r3, #20
 80032dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032de:	623a      	str	r2, [r7, #32]
 80032e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e2:	69f9      	ldr	r1, [r7, #28]
 80032e4:	6a3a      	ldr	r2, [r7, #32]
 80032e6:	e841 2300 	strex	r3, r2, [r1]
 80032ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1e5      	bne.n	80032be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e00f      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	429a      	cmp	r2, r3
 800331c:	bf0c      	ite	eq
 800331e:	2301      	moveq	r3, #1
 8003320:	2300      	movne	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	429a      	cmp	r2, r3
 800332a:	d09f      	beq.n	800326c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3740      	adds	r7, #64	; 0x40
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800333c:	b0c0      	sub	sp, #256	; 0x100
 800333e:	af00      	add	r7, sp, #0
 8003340:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	68d9      	ldr	r1, [r3, #12]
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	ea40 0301 	orr.w	r3, r0, r1
 8003360:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	431a      	orrs	r2, r3
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	431a      	orrs	r2, r3
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003390:	f021 010c 	bic.w	r1, r1, #12
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800339e:	430b      	orrs	r3, r1
 80033a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b2:	6999      	ldr	r1, [r3, #24]
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	ea40 0301 	orr.w	r3, r0, r1
 80033be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b8f      	ldr	r3, [pc, #572]	; (8003604 <UART_SetConfig+0x2cc>)
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d005      	beq.n	80033d8 <UART_SetConfig+0xa0>
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b8d      	ldr	r3, [pc, #564]	; (8003608 <UART_SetConfig+0x2d0>)
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d104      	bne.n	80033e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7ff f928 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 80033dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033e0:	e003      	b.n	80033ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033e2:	f7ff f90f 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 80033e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f4:	f040 810c 	bne.w	8003610 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033fc:	2200      	movs	r2, #0
 80033fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003402:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003406:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800340a:	4622      	mov	r2, r4
 800340c:	462b      	mov	r3, r5
 800340e:	1891      	adds	r1, r2, r2
 8003410:	65b9      	str	r1, [r7, #88]	; 0x58
 8003412:	415b      	adcs	r3, r3
 8003414:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003416:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800341a:	4621      	mov	r1, r4
 800341c:	eb12 0801 	adds.w	r8, r2, r1
 8003420:	4629      	mov	r1, r5
 8003422:	eb43 0901 	adc.w	r9, r3, r1
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800343a:	4690      	mov	r8, r2
 800343c:	4699      	mov	r9, r3
 800343e:	4623      	mov	r3, r4
 8003440:	eb18 0303 	adds.w	r3, r8, r3
 8003444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003448:	462b      	mov	r3, r5
 800344a:	eb49 0303 	adc.w	r3, r9, r3
 800344e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800345e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003462:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003466:	460b      	mov	r3, r1
 8003468:	18db      	adds	r3, r3, r3
 800346a:	653b      	str	r3, [r7, #80]	; 0x50
 800346c:	4613      	mov	r3, r2
 800346e:	eb42 0303 	adc.w	r3, r2, r3
 8003472:	657b      	str	r3, [r7, #84]	; 0x54
 8003474:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003478:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800347c:	f7fc ff00 	bl	8000280 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4b61      	ldr	r3, [pc, #388]	; (800360c <UART_SetConfig+0x2d4>)
 8003486:	fba3 2302 	umull	r2, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	011c      	lsls	r4, r3, #4
 800348e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003492:	2200      	movs	r2, #0
 8003494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003498:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800349c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034a0:	4642      	mov	r2, r8
 80034a2:	464b      	mov	r3, r9
 80034a4:	1891      	adds	r1, r2, r2
 80034a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80034a8:	415b      	adcs	r3, r3
 80034aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034b0:	4641      	mov	r1, r8
 80034b2:	eb12 0a01 	adds.w	sl, r2, r1
 80034b6:	4649      	mov	r1, r9
 80034b8:	eb43 0b01 	adc.w	fp, r3, r1
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034d0:	4692      	mov	sl, r2
 80034d2:	469b      	mov	fp, r3
 80034d4:	4643      	mov	r3, r8
 80034d6:	eb1a 0303 	adds.w	r3, sl, r3
 80034da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034de:	464b      	mov	r3, r9
 80034e0:	eb4b 0303 	adc.w	r3, fp, r3
 80034e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034fc:	460b      	mov	r3, r1
 80034fe:	18db      	adds	r3, r3, r3
 8003500:	643b      	str	r3, [r7, #64]	; 0x40
 8003502:	4613      	mov	r3, r2
 8003504:	eb42 0303 	adc.w	r3, r2, r3
 8003508:	647b      	str	r3, [r7, #68]	; 0x44
 800350a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800350e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003512:	f7fc feb5 	bl	8000280 <__aeabi_uldivmod>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4611      	mov	r1, r2
 800351c:	4b3b      	ldr	r3, [pc, #236]	; (800360c <UART_SetConfig+0x2d4>)
 800351e:	fba3 2301 	umull	r2, r3, r3, r1
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2264      	movs	r2, #100	; 0x64
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	1acb      	subs	r3, r1, r3
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003532:	4b36      	ldr	r3, [pc, #216]	; (800360c <UART_SetConfig+0x2d4>)
 8003534:	fba3 2302 	umull	r2, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003540:	441c      	add	r4, r3
 8003542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003546:	2200      	movs	r2, #0
 8003548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800354c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003550:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003554:	4642      	mov	r2, r8
 8003556:	464b      	mov	r3, r9
 8003558:	1891      	adds	r1, r2, r2
 800355a:	63b9      	str	r1, [r7, #56]	; 0x38
 800355c:	415b      	adcs	r3, r3
 800355e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003564:	4641      	mov	r1, r8
 8003566:	1851      	adds	r1, r2, r1
 8003568:	6339      	str	r1, [r7, #48]	; 0x30
 800356a:	4649      	mov	r1, r9
 800356c:	414b      	adcs	r3, r1
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800357c:	4659      	mov	r1, fp
 800357e:	00cb      	lsls	r3, r1, #3
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003586:	4651      	mov	r1, sl
 8003588:	00ca      	lsls	r2, r1, #3
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	4603      	mov	r3, r0
 8003590:	4642      	mov	r2, r8
 8003592:	189b      	adds	r3, r3, r2
 8003594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003598:	464b      	mov	r3, r9
 800359a:	460a      	mov	r2, r1
 800359c:	eb42 0303 	adc.w	r3, r2, r3
 80035a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035b8:	460b      	mov	r3, r1
 80035ba:	18db      	adds	r3, r3, r3
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035be:	4613      	mov	r3, r2
 80035c0:	eb42 0303 	adc.w	r3, r2, r3
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035ce:	f7fc fe57 	bl	8000280 <__aeabi_uldivmod>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <UART_SetConfig+0x2d4>)
 80035d8:	fba3 1302 	umull	r1, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	2164      	movs	r1, #100	; 0x64
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	3332      	adds	r3, #50	; 0x32
 80035ea:	4a08      	ldr	r2, [pc, #32]	; (800360c <UART_SetConfig+0x2d4>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	f003 0207 	and.w	r2, r3, #7
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4422      	add	r2, r4
 80035fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003600:	e105      	b.n	800380e <UART_SetConfig+0x4d6>
 8003602:	bf00      	nop
 8003604:	40011000 	.word	0x40011000
 8003608:	40011400 	.word	0x40011400
 800360c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003614:	2200      	movs	r2, #0
 8003616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800361a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800361e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003622:	4642      	mov	r2, r8
 8003624:	464b      	mov	r3, r9
 8003626:	1891      	adds	r1, r2, r2
 8003628:	6239      	str	r1, [r7, #32]
 800362a:	415b      	adcs	r3, r3
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
 800362e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003632:	4641      	mov	r1, r8
 8003634:	1854      	adds	r4, r2, r1
 8003636:	4649      	mov	r1, r9
 8003638:	eb43 0501 	adc.w	r5, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	00eb      	lsls	r3, r5, #3
 8003646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800364a:	00e2      	lsls	r2, r4, #3
 800364c:	4614      	mov	r4, r2
 800364e:	461d      	mov	r5, r3
 8003650:	4643      	mov	r3, r8
 8003652:	18e3      	adds	r3, r4, r3
 8003654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003658:	464b      	mov	r3, r9
 800365a:	eb45 0303 	adc.w	r3, r5, r3
 800365e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800366e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800367e:	4629      	mov	r1, r5
 8003680:	008b      	lsls	r3, r1, #2
 8003682:	4621      	mov	r1, r4
 8003684:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003688:	4621      	mov	r1, r4
 800368a:	008a      	lsls	r2, r1, #2
 800368c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003690:	f7fc fdf6 	bl	8000280 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4b60      	ldr	r3, [pc, #384]	; (800381c <UART_SetConfig+0x4e4>)
 800369a:	fba3 2302 	umull	r2, r3, r3, r2
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	011c      	lsls	r4, r3, #4
 80036a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036b4:	4642      	mov	r2, r8
 80036b6:	464b      	mov	r3, r9
 80036b8:	1891      	adds	r1, r2, r2
 80036ba:	61b9      	str	r1, [r7, #24]
 80036bc:	415b      	adcs	r3, r3
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c4:	4641      	mov	r1, r8
 80036c6:	1851      	adds	r1, r2, r1
 80036c8:	6139      	str	r1, [r7, #16]
 80036ca:	4649      	mov	r1, r9
 80036cc:	414b      	adcs	r3, r1
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036dc:	4659      	mov	r1, fp
 80036de:	00cb      	lsls	r3, r1, #3
 80036e0:	4651      	mov	r1, sl
 80036e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036e6:	4651      	mov	r1, sl
 80036e8:	00ca      	lsls	r2, r1, #3
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	4642      	mov	r2, r8
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036f8:	464b      	mov	r3, r9
 80036fa:	460a      	mov	r2, r1
 80036fc:	eb42 0303 	adc.w	r3, r2, r3
 8003700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	67bb      	str	r3, [r7, #120]	; 0x78
 800370e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800371c:	4649      	mov	r1, r9
 800371e:	008b      	lsls	r3, r1, #2
 8003720:	4641      	mov	r1, r8
 8003722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003726:	4641      	mov	r1, r8
 8003728:	008a      	lsls	r2, r1, #2
 800372a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800372e:	f7fc fda7 	bl	8000280 <__aeabi_uldivmod>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4b39      	ldr	r3, [pc, #228]	; (800381c <UART_SetConfig+0x4e4>)
 8003738:	fba3 1302 	umull	r1, r3, r3, r2
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	2164      	movs	r1, #100	; 0x64
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	3332      	adds	r3, #50	; 0x32
 800374a:	4a34      	ldr	r2, [pc, #208]	; (800381c <UART_SetConfig+0x4e4>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003756:	441c      	add	r4, r3
 8003758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375c:	2200      	movs	r2, #0
 800375e:	673b      	str	r3, [r7, #112]	; 0x70
 8003760:	677a      	str	r2, [r7, #116]	; 0x74
 8003762:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003766:	4642      	mov	r2, r8
 8003768:	464b      	mov	r3, r9
 800376a:	1891      	adds	r1, r2, r2
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	415b      	adcs	r3, r3
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003776:	4641      	mov	r1, r8
 8003778:	1851      	adds	r1, r2, r1
 800377a:	6039      	str	r1, [r7, #0]
 800377c:	4649      	mov	r1, r9
 800377e:	414b      	adcs	r3, r1
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800378e:	4659      	mov	r1, fp
 8003790:	00cb      	lsls	r3, r1, #3
 8003792:	4651      	mov	r1, sl
 8003794:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003798:	4651      	mov	r1, sl
 800379a:	00ca      	lsls	r2, r1, #3
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	4603      	mov	r3, r0
 80037a2:	4642      	mov	r2, r8
 80037a4:	189b      	adds	r3, r3, r2
 80037a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80037a8:	464b      	mov	r3, r9
 80037aa:	460a      	mov	r2, r1
 80037ac:	eb42 0303 	adc.w	r3, r2, r3
 80037b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	663b      	str	r3, [r7, #96]	; 0x60
 80037bc:	667a      	str	r2, [r7, #100]	; 0x64
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037ca:	4649      	mov	r1, r9
 80037cc:	008b      	lsls	r3, r1, #2
 80037ce:	4641      	mov	r1, r8
 80037d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d4:	4641      	mov	r1, r8
 80037d6:	008a      	lsls	r2, r1, #2
 80037d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037dc:	f7fc fd50 	bl	8000280 <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4b0d      	ldr	r3, [pc, #52]	; (800381c <UART_SetConfig+0x4e4>)
 80037e6:	fba3 1302 	umull	r1, r3, r3, r2
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	2164      	movs	r1, #100	; 0x64
 80037ee:	fb01 f303 	mul.w	r3, r1, r3
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	3332      	adds	r3, #50	; 0x32
 80037f8:	4a08      	ldr	r2, [pc, #32]	; (800381c <UART_SetConfig+0x4e4>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	f003 020f 	and.w	r2, r3, #15
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4422      	add	r2, r4
 800380c:	609a      	str	r2, [r3, #8]
}
 800380e:	bf00      	nop
 8003810:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003814:	46bd      	mov	sp, r7
 8003816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800381a:	bf00      	nop
 800381c:	51eb851f 	.word	0x51eb851f

08003820 <__errno>:
 8003820:	4b01      	ldr	r3, [pc, #4]	; (8003828 <__errno+0x8>)
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	2000000c 	.word	0x2000000c

0800382c <__libc_init_array>:
 800382c:	b570      	push	{r4, r5, r6, lr}
 800382e:	4d0d      	ldr	r5, [pc, #52]	; (8003864 <__libc_init_array+0x38>)
 8003830:	4c0d      	ldr	r4, [pc, #52]	; (8003868 <__libc_init_array+0x3c>)
 8003832:	1b64      	subs	r4, r4, r5
 8003834:	10a4      	asrs	r4, r4, #2
 8003836:	2600      	movs	r6, #0
 8003838:	42a6      	cmp	r6, r4
 800383a:	d109      	bne.n	8003850 <__libc_init_array+0x24>
 800383c:	4d0b      	ldr	r5, [pc, #44]	; (800386c <__libc_init_array+0x40>)
 800383e:	4c0c      	ldr	r4, [pc, #48]	; (8003870 <__libc_init_array+0x44>)
 8003840:	f000 fe36 	bl	80044b0 <_init>
 8003844:	1b64      	subs	r4, r4, r5
 8003846:	10a4      	asrs	r4, r4, #2
 8003848:	2600      	movs	r6, #0
 800384a:	42a6      	cmp	r6, r4
 800384c:	d105      	bne.n	800385a <__libc_init_array+0x2e>
 800384e:	bd70      	pop	{r4, r5, r6, pc}
 8003850:	f855 3b04 	ldr.w	r3, [r5], #4
 8003854:	4798      	blx	r3
 8003856:	3601      	adds	r6, #1
 8003858:	e7ee      	b.n	8003838 <__libc_init_array+0xc>
 800385a:	f855 3b04 	ldr.w	r3, [r5], #4
 800385e:	4798      	blx	r3
 8003860:	3601      	adds	r6, #1
 8003862:	e7f2      	b.n	800384a <__libc_init_array+0x1e>
 8003864:	08004710 	.word	0x08004710
 8003868:	08004710 	.word	0x08004710
 800386c:	08004710 	.word	0x08004710
 8003870:	08004714 	.word	0x08004714

08003874 <memset>:
 8003874:	4402      	add	r2, r0
 8003876:	4603      	mov	r3, r0
 8003878:	4293      	cmp	r3, r2
 800387a:	d100      	bne.n	800387e <memset+0xa>
 800387c:	4770      	bx	lr
 800387e:	f803 1b01 	strb.w	r1, [r3], #1
 8003882:	e7f9      	b.n	8003878 <memset+0x4>

08003884 <siscanf>:
 8003884:	b40e      	push	{r1, r2, r3}
 8003886:	b510      	push	{r4, lr}
 8003888:	b09f      	sub	sp, #124	; 0x7c
 800388a:	ac21      	add	r4, sp, #132	; 0x84
 800388c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003890:	f854 2b04 	ldr.w	r2, [r4], #4
 8003894:	9201      	str	r2, [sp, #4]
 8003896:	f8ad 101c 	strh.w	r1, [sp, #28]
 800389a:	9004      	str	r0, [sp, #16]
 800389c:	9008      	str	r0, [sp, #32]
 800389e:	f7fc fc97 	bl	80001d0 <strlen>
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <siscanf+0x50>)
 80038a4:	9005      	str	r0, [sp, #20]
 80038a6:	9009      	str	r0, [sp, #36]	; 0x24
 80038a8:	930d      	str	r3, [sp, #52]	; 0x34
 80038aa:	480b      	ldr	r0, [pc, #44]	; (80038d8 <siscanf+0x54>)
 80038ac:	9a01      	ldr	r2, [sp, #4]
 80038ae:	6800      	ldr	r0, [r0, #0]
 80038b0:	9403      	str	r4, [sp, #12]
 80038b2:	2300      	movs	r3, #0
 80038b4:	9311      	str	r3, [sp, #68]	; 0x44
 80038b6:	9316      	str	r3, [sp, #88]	; 0x58
 80038b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038bc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80038c0:	a904      	add	r1, sp, #16
 80038c2:	4623      	mov	r3, r4
 80038c4:	f000 f87c 	bl	80039c0 <__ssvfiscanf_r>
 80038c8:	b01f      	add	sp, #124	; 0x7c
 80038ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ce:	b003      	add	sp, #12
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	080038dd 	.word	0x080038dd
 80038d8:	2000000c 	.word	0x2000000c

080038dc <__seofread>:
 80038dc:	2000      	movs	r0, #0
 80038de:	4770      	bx	lr

080038e0 <strstr>:
 80038e0:	780a      	ldrb	r2, [r1, #0]
 80038e2:	b570      	push	{r4, r5, r6, lr}
 80038e4:	b96a      	cbnz	r2, 8003902 <strstr+0x22>
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d109      	bne.n	8003900 <strstr+0x20>
 80038ec:	460c      	mov	r4, r1
 80038ee:	4605      	mov	r5, r0
 80038f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0f6      	beq.n	80038e6 <strstr+0x6>
 80038f8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80038fc:	429e      	cmp	r6, r3
 80038fe:	d0f7      	beq.n	80038f0 <strstr+0x10>
 8003900:	3001      	adds	r0, #1
 8003902:	7803      	ldrb	r3, [r0, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1ef      	bne.n	80038e8 <strstr+0x8>
 8003908:	4618      	mov	r0, r3
 800390a:	e7ec      	b.n	80038e6 <strstr+0x6>

0800390c <_sungetc_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	1c4b      	adds	r3, r1, #1
 8003910:	4614      	mov	r4, r2
 8003912:	d103      	bne.n	800391c <_sungetc_r+0x10>
 8003914:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003918:	4628      	mov	r0, r5
 800391a:	bd38      	pop	{r3, r4, r5, pc}
 800391c:	8993      	ldrh	r3, [r2, #12]
 800391e:	f023 0320 	bic.w	r3, r3, #32
 8003922:	8193      	strh	r3, [r2, #12]
 8003924:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003926:	6852      	ldr	r2, [r2, #4]
 8003928:	b2cd      	uxtb	r5, r1
 800392a:	b18b      	cbz	r3, 8003950 <_sungetc_r+0x44>
 800392c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800392e:	4293      	cmp	r3, r2
 8003930:	dd08      	ble.n	8003944 <_sungetc_r+0x38>
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	1e5a      	subs	r2, r3, #1
 8003936:	6022      	str	r2, [r4, #0]
 8003938:	f803 5c01 	strb.w	r5, [r3, #-1]
 800393c:	6863      	ldr	r3, [r4, #4]
 800393e:	3301      	adds	r3, #1
 8003940:	6063      	str	r3, [r4, #4]
 8003942:	e7e9      	b.n	8003918 <_sungetc_r+0xc>
 8003944:	4621      	mov	r1, r4
 8003946:	f000 fc35 	bl	80041b4 <__submore>
 800394a:	2800      	cmp	r0, #0
 800394c:	d0f1      	beq.n	8003932 <_sungetc_r+0x26>
 800394e:	e7e1      	b.n	8003914 <_sungetc_r+0x8>
 8003950:	6921      	ldr	r1, [r4, #16]
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	b151      	cbz	r1, 800396c <_sungetc_r+0x60>
 8003956:	4299      	cmp	r1, r3
 8003958:	d208      	bcs.n	800396c <_sungetc_r+0x60>
 800395a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800395e:	42a9      	cmp	r1, r5
 8003960:	d104      	bne.n	800396c <_sungetc_r+0x60>
 8003962:	3b01      	subs	r3, #1
 8003964:	3201      	adds	r2, #1
 8003966:	6023      	str	r3, [r4, #0]
 8003968:	6062      	str	r2, [r4, #4]
 800396a:	e7d5      	b.n	8003918 <_sungetc_r+0xc>
 800396c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003974:	6363      	str	r3, [r4, #52]	; 0x34
 8003976:	2303      	movs	r3, #3
 8003978:	63a3      	str	r3, [r4, #56]	; 0x38
 800397a:	4623      	mov	r3, r4
 800397c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003980:	6023      	str	r3, [r4, #0]
 8003982:	2301      	movs	r3, #1
 8003984:	e7dc      	b.n	8003940 <_sungetc_r+0x34>

08003986 <__ssrefill_r>:
 8003986:	b510      	push	{r4, lr}
 8003988:	460c      	mov	r4, r1
 800398a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800398c:	b169      	cbz	r1, 80039aa <__ssrefill_r+0x24>
 800398e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003992:	4299      	cmp	r1, r3
 8003994:	d001      	beq.n	800399a <__ssrefill_r+0x14>
 8003996:	f000 fc57 	bl	8004248 <_free_r>
 800399a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800399c:	6063      	str	r3, [r4, #4]
 800399e:	2000      	movs	r0, #0
 80039a0:	6360      	str	r0, [r4, #52]	; 0x34
 80039a2:	b113      	cbz	r3, 80039aa <__ssrefill_r+0x24>
 80039a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80039a6:	6023      	str	r3, [r4, #0]
 80039a8:	bd10      	pop	{r4, pc}
 80039aa:	6923      	ldr	r3, [r4, #16]
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	2300      	movs	r3, #0
 80039b0:	6063      	str	r3, [r4, #4]
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	f043 0320 	orr.w	r3, r3, #32
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039be:	e7f3      	b.n	80039a8 <__ssrefill_r+0x22>

080039c0 <__ssvfiscanf_r>:
 80039c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039c4:	460c      	mov	r4, r1
 80039c6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80039ca:	2100      	movs	r1, #0
 80039cc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80039d0:	49a6      	ldr	r1, [pc, #664]	; (8003c6c <__ssvfiscanf_r+0x2ac>)
 80039d2:	91a0      	str	r1, [sp, #640]	; 0x280
 80039d4:	f10d 0804 	add.w	r8, sp, #4
 80039d8:	49a5      	ldr	r1, [pc, #660]	; (8003c70 <__ssvfiscanf_r+0x2b0>)
 80039da:	4fa6      	ldr	r7, [pc, #664]	; (8003c74 <__ssvfiscanf_r+0x2b4>)
 80039dc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003c78 <__ssvfiscanf_r+0x2b8>
 80039e0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80039e4:	4606      	mov	r6, r0
 80039e6:	91a1      	str	r1, [sp, #644]	; 0x284
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	7813      	ldrb	r3, [r2, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 815a 	beq.w	8003ca6 <__ssvfiscanf_r+0x2e6>
 80039f2:	5dd9      	ldrb	r1, [r3, r7]
 80039f4:	f011 0108 	ands.w	r1, r1, #8
 80039f8:	f102 0501 	add.w	r5, r2, #1
 80039fc:	d019      	beq.n	8003a32 <__ssvfiscanf_r+0x72>
 80039fe:	6863      	ldr	r3, [r4, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	dd0f      	ble.n	8003a24 <__ssvfiscanf_r+0x64>
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	781a      	ldrb	r2, [r3, #0]
 8003a08:	5cba      	ldrb	r2, [r7, r2]
 8003a0a:	0712      	lsls	r2, r2, #28
 8003a0c:	d401      	bmi.n	8003a12 <__ssvfiscanf_r+0x52>
 8003a0e:	462a      	mov	r2, r5
 8003a10:	e7eb      	b.n	80039ea <__ssvfiscanf_r+0x2a>
 8003a12:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003a14:	3201      	adds	r2, #1
 8003a16:	9245      	str	r2, [sp, #276]	; 0x114
 8003a18:	6862      	ldr	r2, [r4, #4]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	3a01      	subs	r2, #1
 8003a1e:	6062      	str	r2, [r4, #4]
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	e7ec      	b.n	80039fe <__ssvfiscanf_r+0x3e>
 8003a24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a26:	4621      	mov	r1, r4
 8003a28:	4630      	mov	r0, r6
 8003a2a:	4798      	blx	r3
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d0e9      	beq.n	8003a04 <__ssvfiscanf_r+0x44>
 8003a30:	e7ed      	b.n	8003a0e <__ssvfiscanf_r+0x4e>
 8003a32:	2b25      	cmp	r3, #37	; 0x25
 8003a34:	d012      	beq.n	8003a5c <__ssvfiscanf_r+0x9c>
 8003a36:	469a      	mov	sl, r3
 8003a38:	6863      	ldr	r3, [r4, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f340 8091 	ble.w	8003b62 <__ssvfiscanf_r+0x1a2>
 8003a40:	6822      	ldr	r2, [r4, #0]
 8003a42:	7813      	ldrb	r3, [r2, #0]
 8003a44:	4553      	cmp	r3, sl
 8003a46:	f040 812e 	bne.w	8003ca6 <__ssvfiscanf_r+0x2e6>
 8003a4a:	6863      	ldr	r3, [r4, #4]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	6063      	str	r3, [r4, #4]
 8003a50:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003a52:	3201      	adds	r2, #1
 8003a54:	3301      	adds	r3, #1
 8003a56:	6022      	str	r2, [r4, #0]
 8003a58:	9345      	str	r3, [sp, #276]	; 0x114
 8003a5a:	e7d8      	b.n	8003a0e <__ssvfiscanf_r+0x4e>
 8003a5c:	9141      	str	r1, [sp, #260]	; 0x104
 8003a5e:	9143      	str	r1, [sp, #268]	; 0x10c
 8003a60:	7853      	ldrb	r3, [r2, #1]
 8003a62:	2b2a      	cmp	r3, #42	; 0x2a
 8003a64:	bf02      	ittt	eq
 8003a66:	2310      	moveq	r3, #16
 8003a68:	1c95      	addeq	r5, r2, #2
 8003a6a:	9341      	streq	r3, [sp, #260]	; 0x104
 8003a6c:	220a      	movs	r2, #10
 8003a6e:	46aa      	mov	sl, r5
 8003a70:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003a74:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003a78:	2b09      	cmp	r3, #9
 8003a7a:	d91d      	bls.n	8003ab8 <__ssvfiscanf_r+0xf8>
 8003a7c:	487e      	ldr	r0, [pc, #504]	; (8003c78 <__ssvfiscanf_r+0x2b8>)
 8003a7e:	2203      	movs	r2, #3
 8003a80:	f7fc fbae 	bl	80001e0 <memchr>
 8003a84:	b140      	cbz	r0, 8003a98 <__ssvfiscanf_r+0xd8>
 8003a86:	2301      	movs	r3, #1
 8003a88:	eba0 0009 	sub.w	r0, r0, r9
 8003a8c:	fa03 f000 	lsl.w	r0, r3, r0
 8003a90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003a92:	4318      	orrs	r0, r3
 8003a94:	9041      	str	r0, [sp, #260]	; 0x104
 8003a96:	4655      	mov	r5, sl
 8003a98:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a9c:	2b78      	cmp	r3, #120	; 0x78
 8003a9e:	d806      	bhi.n	8003aae <__ssvfiscanf_r+0xee>
 8003aa0:	2b57      	cmp	r3, #87	; 0x57
 8003aa2:	d810      	bhi.n	8003ac6 <__ssvfiscanf_r+0x106>
 8003aa4:	2b25      	cmp	r3, #37	; 0x25
 8003aa6:	d0c6      	beq.n	8003a36 <__ssvfiscanf_r+0x76>
 8003aa8:	d856      	bhi.n	8003b58 <__ssvfiscanf_r+0x198>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d064      	beq.n	8003b78 <__ssvfiscanf_r+0x1b8>
 8003aae:	2303      	movs	r3, #3
 8003ab0:	9347      	str	r3, [sp, #284]	; 0x11c
 8003ab2:	230a      	movs	r3, #10
 8003ab4:	9342      	str	r3, [sp, #264]	; 0x108
 8003ab6:	e071      	b.n	8003b9c <__ssvfiscanf_r+0x1dc>
 8003ab8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003aba:	fb02 1103 	mla	r1, r2, r3, r1
 8003abe:	3930      	subs	r1, #48	; 0x30
 8003ac0:	9143      	str	r1, [sp, #268]	; 0x10c
 8003ac2:	4655      	mov	r5, sl
 8003ac4:	e7d3      	b.n	8003a6e <__ssvfiscanf_r+0xae>
 8003ac6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003aca:	2a20      	cmp	r2, #32
 8003acc:	d8ef      	bhi.n	8003aae <__ssvfiscanf_r+0xee>
 8003ace:	a101      	add	r1, pc, #4	; (adr r1, 8003ad4 <__ssvfiscanf_r+0x114>)
 8003ad0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003ad4:	08003b87 	.word	0x08003b87
 8003ad8:	08003aaf 	.word	0x08003aaf
 8003adc:	08003aaf 	.word	0x08003aaf
 8003ae0:	08003be5 	.word	0x08003be5
 8003ae4:	08003aaf 	.word	0x08003aaf
 8003ae8:	08003aaf 	.word	0x08003aaf
 8003aec:	08003aaf 	.word	0x08003aaf
 8003af0:	08003aaf 	.word	0x08003aaf
 8003af4:	08003aaf 	.word	0x08003aaf
 8003af8:	08003aaf 	.word	0x08003aaf
 8003afc:	08003aaf 	.word	0x08003aaf
 8003b00:	08003bfb 	.word	0x08003bfb
 8003b04:	08003bd1 	.word	0x08003bd1
 8003b08:	08003b5f 	.word	0x08003b5f
 8003b0c:	08003b5f 	.word	0x08003b5f
 8003b10:	08003b5f 	.word	0x08003b5f
 8003b14:	08003aaf 	.word	0x08003aaf
 8003b18:	08003bd5 	.word	0x08003bd5
 8003b1c:	08003aaf 	.word	0x08003aaf
 8003b20:	08003aaf 	.word	0x08003aaf
 8003b24:	08003aaf 	.word	0x08003aaf
 8003b28:	08003aaf 	.word	0x08003aaf
 8003b2c:	08003c0b 	.word	0x08003c0b
 8003b30:	08003bdd 	.word	0x08003bdd
 8003b34:	08003b7f 	.word	0x08003b7f
 8003b38:	08003aaf 	.word	0x08003aaf
 8003b3c:	08003aaf 	.word	0x08003aaf
 8003b40:	08003c07 	.word	0x08003c07
 8003b44:	08003aaf 	.word	0x08003aaf
 8003b48:	08003bd1 	.word	0x08003bd1
 8003b4c:	08003aaf 	.word	0x08003aaf
 8003b50:	08003aaf 	.word	0x08003aaf
 8003b54:	08003b87 	.word	0x08003b87
 8003b58:	3b45      	subs	r3, #69	; 0x45
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d8a7      	bhi.n	8003aae <__ssvfiscanf_r+0xee>
 8003b5e:	2305      	movs	r3, #5
 8003b60:	e01b      	b.n	8003b9a <__ssvfiscanf_r+0x1da>
 8003b62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b64:	4621      	mov	r1, r4
 8003b66:	4630      	mov	r0, r6
 8003b68:	4798      	blx	r3
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	f43f af68 	beq.w	8003a40 <__ssvfiscanf_r+0x80>
 8003b70:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003b72:	2800      	cmp	r0, #0
 8003b74:	f040 808d 	bne.w	8003c92 <__ssvfiscanf_r+0x2d2>
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b7c:	e08f      	b.n	8003c9e <__ssvfiscanf_r+0x2de>
 8003b7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b80:	f042 0220 	orr.w	r2, r2, #32
 8003b84:	9241      	str	r2, [sp, #260]	; 0x104
 8003b86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8c:	9241      	str	r2, [sp, #260]	; 0x104
 8003b8e:	2210      	movs	r2, #16
 8003b90:	2b6f      	cmp	r3, #111	; 0x6f
 8003b92:	9242      	str	r2, [sp, #264]	; 0x108
 8003b94:	bf34      	ite	cc
 8003b96:	2303      	movcc	r3, #3
 8003b98:	2304      	movcs	r3, #4
 8003b9a:	9347      	str	r3, [sp, #284]	; 0x11c
 8003b9c:	6863      	ldr	r3, [r4, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	dd42      	ble.n	8003c28 <__ssvfiscanf_r+0x268>
 8003ba2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003ba4:	0659      	lsls	r1, r3, #25
 8003ba6:	d404      	bmi.n	8003bb2 <__ssvfiscanf_r+0x1f2>
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	781a      	ldrb	r2, [r3, #0]
 8003bac:	5cba      	ldrb	r2, [r7, r2]
 8003bae:	0712      	lsls	r2, r2, #28
 8003bb0:	d441      	bmi.n	8003c36 <__ssvfiscanf_r+0x276>
 8003bb2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	dc50      	bgt.n	8003c5a <__ssvfiscanf_r+0x29a>
 8003bb8:	466b      	mov	r3, sp
 8003bba:	4622      	mov	r2, r4
 8003bbc:	a941      	add	r1, sp, #260	; 0x104
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f000 f876 	bl	8003cb0 <_scanf_chars>
 8003bc4:	2801      	cmp	r0, #1
 8003bc6:	d06e      	beq.n	8003ca6 <__ssvfiscanf_r+0x2e6>
 8003bc8:	2802      	cmp	r0, #2
 8003bca:	f47f af20 	bne.w	8003a0e <__ssvfiscanf_r+0x4e>
 8003bce:	e7cf      	b.n	8003b70 <__ssvfiscanf_r+0x1b0>
 8003bd0:	220a      	movs	r2, #10
 8003bd2:	e7dd      	b.n	8003b90 <__ssvfiscanf_r+0x1d0>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	9342      	str	r3, [sp, #264]	; 0x108
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e7de      	b.n	8003b9a <__ssvfiscanf_r+0x1da>
 8003bdc:	2308      	movs	r3, #8
 8003bde:	9342      	str	r3, [sp, #264]	; 0x108
 8003be0:	2304      	movs	r3, #4
 8003be2:	e7da      	b.n	8003b9a <__ssvfiscanf_r+0x1da>
 8003be4:	4629      	mov	r1, r5
 8003be6:	4640      	mov	r0, r8
 8003be8:	f000 f9b4 	bl	8003f54 <__sccl>
 8003bec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bf2:	9341      	str	r3, [sp, #260]	; 0x104
 8003bf4:	4605      	mov	r5, r0
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e7cf      	b.n	8003b9a <__ssvfiscanf_r+0x1da>
 8003bfa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c00:	9341      	str	r3, [sp, #260]	; 0x104
 8003c02:	2300      	movs	r3, #0
 8003c04:	e7c9      	b.n	8003b9a <__ssvfiscanf_r+0x1da>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e7c7      	b.n	8003b9a <__ssvfiscanf_r+0x1da>
 8003c0a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003c0c:	06c3      	lsls	r3, r0, #27
 8003c0e:	f53f aefe 	bmi.w	8003a0e <__ssvfiscanf_r+0x4e>
 8003c12:	9b00      	ldr	r3, [sp, #0]
 8003c14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003c16:	1d19      	adds	r1, r3, #4
 8003c18:	9100      	str	r1, [sp, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f010 0f01 	tst.w	r0, #1
 8003c20:	bf14      	ite	ne
 8003c22:	801a      	strhne	r2, [r3, #0]
 8003c24:	601a      	streq	r2, [r3, #0]
 8003c26:	e6f2      	b.n	8003a0e <__ssvfiscanf_r+0x4e>
 8003c28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	4798      	blx	r3
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d0b6      	beq.n	8003ba2 <__ssvfiscanf_r+0x1e2>
 8003c34:	e79c      	b.n	8003b70 <__ssvfiscanf_r+0x1b0>
 8003c36:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003c38:	3201      	adds	r2, #1
 8003c3a:	9245      	str	r2, [sp, #276]	; 0x114
 8003c3c:	6862      	ldr	r2, [r4, #4]
 8003c3e:	3a01      	subs	r2, #1
 8003c40:	2a00      	cmp	r2, #0
 8003c42:	6062      	str	r2, [r4, #4]
 8003c44:	dd02      	ble.n	8003c4c <__ssvfiscanf_r+0x28c>
 8003c46:	3301      	adds	r3, #1
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	e7ad      	b.n	8003ba8 <__ssvfiscanf_r+0x1e8>
 8003c4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c4e:	4621      	mov	r1, r4
 8003c50:	4630      	mov	r0, r6
 8003c52:	4798      	blx	r3
 8003c54:	2800      	cmp	r0, #0
 8003c56:	d0a7      	beq.n	8003ba8 <__ssvfiscanf_r+0x1e8>
 8003c58:	e78a      	b.n	8003b70 <__ssvfiscanf_r+0x1b0>
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	dc0e      	bgt.n	8003c7c <__ssvfiscanf_r+0x2bc>
 8003c5e:	466b      	mov	r3, sp
 8003c60:	4622      	mov	r2, r4
 8003c62:	a941      	add	r1, sp, #260	; 0x104
 8003c64:	4630      	mov	r0, r6
 8003c66:	f000 f87d 	bl	8003d64 <_scanf_i>
 8003c6a:	e7ab      	b.n	8003bc4 <__ssvfiscanf_r+0x204>
 8003c6c:	0800390d 	.word	0x0800390d
 8003c70:	08003987 	.word	0x08003987
 8003c74:	080045a8 	.word	0x080045a8
 8003c78:	08004588 	.word	0x08004588
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <__ssvfiscanf_r+0x2ec>)
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f43f aec5 	beq.w	8003a0e <__ssvfiscanf_r+0x4e>
 8003c84:	466b      	mov	r3, sp
 8003c86:	4622      	mov	r2, r4
 8003c88:	a941      	add	r1, sp, #260	; 0x104
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	f3af 8000 	nop.w
 8003c90:	e798      	b.n	8003bc4 <__ssvfiscanf_r+0x204>
 8003c92:	89a3      	ldrh	r3, [r4, #12]
 8003c94:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c98:	bf18      	it	ne
 8003c9a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003c9e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003ca8:	e7f9      	b.n	8003c9e <__ssvfiscanf_r+0x2de>
 8003caa:	bf00      	nop
 8003cac:	00000000 	.word	0x00000000

08003cb0 <_scanf_chars>:
 8003cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cb4:	4615      	mov	r5, r2
 8003cb6:	688a      	ldr	r2, [r1, #8]
 8003cb8:	4680      	mov	r8, r0
 8003cba:	460c      	mov	r4, r1
 8003cbc:	b932      	cbnz	r2, 8003ccc <_scanf_chars+0x1c>
 8003cbe:	698a      	ldr	r2, [r1, #24]
 8003cc0:	2a00      	cmp	r2, #0
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2201      	moveq	r2, #1
 8003cc6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8003cca:	608a      	str	r2, [r1, #8]
 8003ccc:	6822      	ldr	r2, [r4, #0]
 8003cce:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003d60 <_scanf_chars+0xb0>
 8003cd2:	06d1      	lsls	r1, r2, #27
 8003cd4:	bf5f      	itttt	pl
 8003cd6:	681a      	ldrpl	r2, [r3, #0]
 8003cd8:	1d11      	addpl	r1, r2, #4
 8003cda:	6019      	strpl	r1, [r3, #0]
 8003cdc:	6816      	ldrpl	r6, [r2, #0]
 8003cde:	2700      	movs	r7, #0
 8003ce0:	69a0      	ldr	r0, [r4, #24]
 8003ce2:	b188      	cbz	r0, 8003d08 <_scanf_chars+0x58>
 8003ce4:	2801      	cmp	r0, #1
 8003ce6:	d107      	bne.n	8003cf8 <_scanf_chars+0x48>
 8003ce8:	682a      	ldr	r2, [r5, #0]
 8003cea:	7811      	ldrb	r1, [r2, #0]
 8003cec:	6962      	ldr	r2, [r4, #20]
 8003cee:	5c52      	ldrb	r2, [r2, r1]
 8003cf0:	b952      	cbnz	r2, 8003d08 <_scanf_chars+0x58>
 8003cf2:	2f00      	cmp	r7, #0
 8003cf4:	d031      	beq.n	8003d5a <_scanf_chars+0xaa>
 8003cf6:	e022      	b.n	8003d3e <_scanf_chars+0x8e>
 8003cf8:	2802      	cmp	r0, #2
 8003cfa:	d120      	bne.n	8003d3e <_scanf_chars+0x8e>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003d04:	071b      	lsls	r3, r3, #28
 8003d06:	d41a      	bmi.n	8003d3e <_scanf_chars+0x8e>
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	06da      	lsls	r2, r3, #27
 8003d0c:	bf5e      	ittt	pl
 8003d0e:	682b      	ldrpl	r3, [r5, #0]
 8003d10:	781b      	ldrbpl	r3, [r3, #0]
 8003d12:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003d16:	682a      	ldr	r2, [r5, #0]
 8003d18:	686b      	ldr	r3, [r5, #4]
 8003d1a:	3201      	adds	r2, #1
 8003d1c:	602a      	str	r2, [r5, #0]
 8003d1e:	68a2      	ldr	r2, [r4, #8]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	3a01      	subs	r2, #1
 8003d24:	606b      	str	r3, [r5, #4]
 8003d26:	3701      	adds	r7, #1
 8003d28:	60a2      	str	r2, [r4, #8]
 8003d2a:	b142      	cbz	r2, 8003d3e <_scanf_chars+0x8e>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	dcd7      	bgt.n	8003ce0 <_scanf_chars+0x30>
 8003d30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003d34:	4629      	mov	r1, r5
 8003d36:	4640      	mov	r0, r8
 8003d38:	4798      	blx	r3
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d0d0      	beq.n	8003ce0 <_scanf_chars+0x30>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	f013 0310 	ands.w	r3, r3, #16
 8003d44:	d105      	bne.n	8003d52 <_scanf_chars+0xa2>
 8003d46:	68e2      	ldr	r2, [r4, #12]
 8003d48:	3201      	adds	r2, #1
 8003d4a:	60e2      	str	r2, [r4, #12]
 8003d4c:	69a2      	ldr	r2, [r4, #24]
 8003d4e:	b102      	cbz	r2, 8003d52 <_scanf_chars+0xa2>
 8003d50:	7033      	strb	r3, [r6, #0]
 8003d52:	6923      	ldr	r3, [r4, #16]
 8003d54:	443b      	add	r3, r7
 8003d56:	6123      	str	r3, [r4, #16]
 8003d58:	2000      	movs	r0, #0
 8003d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d5e:	bf00      	nop
 8003d60:	080045a8 	.word	0x080045a8

08003d64 <_scanf_i>:
 8003d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d68:	4698      	mov	r8, r3
 8003d6a:	4b76      	ldr	r3, [pc, #472]	; (8003f44 <_scanf_i+0x1e0>)
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	4682      	mov	sl, r0
 8003d70:	4616      	mov	r6, r2
 8003d72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d76:	b087      	sub	sp, #28
 8003d78:	ab03      	add	r3, sp, #12
 8003d7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d7e:	4b72      	ldr	r3, [pc, #456]	; (8003f48 <_scanf_i+0x1e4>)
 8003d80:	69a1      	ldr	r1, [r4, #24]
 8003d82:	4a72      	ldr	r2, [pc, #456]	; (8003f4c <_scanf_i+0x1e8>)
 8003d84:	2903      	cmp	r1, #3
 8003d86:	bf18      	it	ne
 8003d88:	461a      	movne	r2, r3
 8003d8a:	68a3      	ldr	r3, [r4, #8]
 8003d8c:	9201      	str	r2, [sp, #4]
 8003d8e:	1e5a      	subs	r2, r3, #1
 8003d90:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003d94:	bf88      	it	hi
 8003d96:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003d9a:	4627      	mov	r7, r4
 8003d9c:	bf82      	ittt	hi
 8003d9e:	eb03 0905 	addhi.w	r9, r3, r5
 8003da2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003da6:	60a3      	strhi	r3, [r4, #8]
 8003da8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003dac:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003db0:	bf98      	it	ls
 8003db2:	f04f 0900 	movls.w	r9, #0
 8003db6:	6023      	str	r3, [r4, #0]
 8003db8:	463d      	mov	r5, r7
 8003dba:	f04f 0b00 	mov.w	fp, #0
 8003dbe:	6831      	ldr	r1, [r6, #0]
 8003dc0:	ab03      	add	r3, sp, #12
 8003dc2:	7809      	ldrb	r1, [r1, #0]
 8003dc4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	f7fc fa09 	bl	80001e0 <memchr>
 8003dce:	b328      	cbz	r0, 8003e1c <_scanf_i+0xb8>
 8003dd0:	f1bb 0f01 	cmp.w	fp, #1
 8003dd4:	d159      	bne.n	8003e8a <_scanf_i+0x126>
 8003dd6:	6862      	ldr	r2, [r4, #4]
 8003dd8:	b92a      	cbnz	r2, 8003de6 <_scanf_i+0x82>
 8003dda:	6822      	ldr	r2, [r4, #0]
 8003ddc:	2308      	movs	r3, #8
 8003dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de2:	6063      	str	r3, [r4, #4]
 8003de4:	6022      	str	r2, [r4, #0]
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003dec:	6022      	str	r2, [r4, #0]
 8003dee:	68a2      	ldr	r2, [r4, #8]
 8003df0:	1e51      	subs	r1, r2, #1
 8003df2:	60a1      	str	r1, [r4, #8]
 8003df4:	b192      	cbz	r2, 8003e1c <_scanf_i+0xb8>
 8003df6:	6832      	ldr	r2, [r6, #0]
 8003df8:	1c51      	adds	r1, r2, #1
 8003dfa:	6031      	str	r1, [r6, #0]
 8003dfc:	7812      	ldrb	r2, [r2, #0]
 8003dfe:	f805 2b01 	strb.w	r2, [r5], #1
 8003e02:	6872      	ldr	r2, [r6, #4]
 8003e04:	3a01      	subs	r2, #1
 8003e06:	2a00      	cmp	r2, #0
 8003e08:	6072      	str	r2, [r6, #4]
 8003e0a:	dc07      	bgt.n	8003e1c <_scanf_i+0xb8>
 8003e0c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003e10:	4631      	mov	r1, r6
 8003e12:	4650      	mov	r0, sl
 8003e14:	4790      	blx	r2
 8003e16:	2800      	cmp	r0, #0
 8003e18:	f040 8085 	bne.w	8003f26 <_scanf_i+0x1c2>
 8003e1c:	f10b 0b01 	add.w	fp, fp, #1
 8003e20:	f1bb 0f03 	cmp.w	fp, #3
 8003e24:	d1cb      	bne.n	8003dbe <_scanf_i+0x5a>
 8003e26:	6863      	ldr	r3, [r4, #4]
 8003e28:	b90b      	cbnz	r3, 8003e2e <_scanf_i+0xca>
 8003e2a:	230a      	movs	r3, #10
 8003e2c:	6063      	str	r3, [r4, #4]
 8003e2e:	6863      	ldr	r3, [r4, #4]
 8003e30:	4947      	ldr	r1, [pc, #284]	; (8003f50 <_scanf_i+0x1ec>)
 8003e32:	6960      	ldr	r0, [r4, #20]
 8003e34:	1ac9      	subs	r1, r1, r3
 8003e36:	f000 f88d 	bl	8003f54 <__sccl>
 8003e3a:	f04f 0b00 	mov.w	fp, #0
 8003e3e:	68a3      	ldr	r3, [r4, #8]
 8003e40:	6822      	ldr	r2, [r4, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d03d      	beq.n	8003ec2 <_scanf_i+0x15e>
 8003e46:	6831      	ldr	r1, [r6, #0]
 8003e48:	6960      	ldr	r0, [r4, #20]
 8003e4a:	f891 c000 	ldrb.w	ip, [r1]
 8003e4e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d035      	beq.n	8003ec2 <_scanf_i+0x15e>
 8003e56:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003e5a:	d124      	bne.n	8003ea6 <_scanf_i+0x142>
 8003e5c:	0510      	lsls	r0, r2, #20
 8003e5e:	d522      	bpl.n	8003ea6 <_scanf_i+0x142>
 8003e60:	f10b 0b01 	add.w	fp, fp, #1
 8003e64:	f1b9 0f00 	cmp.w	r9, #0
 8003e68:	d003      	beq.n	8003e72 <_scanf_i+0x10e>
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003e70:	60a3      	str	r3, [r4, #8]
 8003e72:	6873      	ldr	r3, [r6, #4]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	6073      	str	r3, [r6, #4]
 8003e7a:	dd1b      	ble.n	8003eb4 <_scanf_i+0x150>
 8003e7c:	6833      	ldr	r3, [r6, #0]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	6033      	str	r3, [r6, #0]
 8003e82:	68a3      	ldr	r3, [r4, #8]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	60a3      	str	r3, [r4, #8]
 8003e88:	e7d9      	b.n	8003e3e <_scanf_i+0xda>
 8003e8a:	f1bb 0f02 	cmp.w	fp, #2
 8003e8e:	d1ae      	bne.n	8003dee <_scanf_i+0x8a>
 8003e90:	6822      	ldr	r2, [r4, #0]
 8003e92:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003e96:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003e9a:	d1bf      	bne.n	8003e1c <_scanf_i+0xb8>
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	6063      	str	r3, [r4, #4]
 8003ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea4:	e7a2      	b.n	8003dec <_scanf_i+0x88>
 8003ea6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003eaa:	6022      	str	r2, [r4, #0]
 8003eac:	780b      	ldrb	r3, [r1, #0]
 8003eae:	f805 3b01 	strb.w	r3, [r5], #1
 8003eb2:	e7de      	b.n	8003e72 <_scanf_i+0x10e>
 8003eb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003eb8:	4631      	mov	r1, r6
 8003eba:	4650      	mov	r0, sl
 8003ebc:	4798      	blx	r3
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d0df      	beq.n	8003e82 <_scanf_i+0x11e>
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	05db      	lsls	r3, r3, #23
 8003ec6:	d50d      	bpl.n	8003ee4 <_scanf_i+0x180>
 8003ec8:	42bd      	cmp	r5, r7
 8003eca:	d909      	bls.n	8003ee0 <_scanf_i+0x17c>
 8003ecc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003ed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ed4:	4632      	mov	r2, r6
 8003ed6:	4650      	mov	r0, sl
 8003ed8:	4798      	blx	r3
 8003eda:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8003ede:	464d      	mov	r5, r9
 8003ee0:	42bd      	cmp	r5, r7
 8003ee2:	d02d      	beq.n	8003f40 <_scanf_i+0x1dc>
 8003ee4:	6822      	ldr	r2, [r4, #0]
 8003ee6:	f012 0210 	ands.w	r2, r2, #16
 8003eea:	d113      	bne.n	8003f14 <_scanf_i+0x1b0>
 8003eec:	702a      	strb	r2, [r5, #0]
 8003eee:	6863      	ldr	r3, [r4, #4]
 8003ef0:	9e01      	ldr	r6, [sp, #4]
 8003ef2:	4639      	mov	r1, r7
 8003ef4:	4650      	mov	r0, sl
 8003ef6:	47b0      	blx	r6
 8003ef8:	6821      	ldr	r1, [r4, #0]
 8003efa:	f8d8 3000 	ldr.w	r3, [r8]
 8003efe:	f011 0f20 	tst.w	r1, #32
 8003f02:	d013      	beq.n	8003f2c <_scanf_i+0x1c8>
 8003f04:	1d1a      	adds	r2, r3, #4
 8003f06:	f8c8 2000 	str.w	r2, [r8]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6018      	str	r0, [r3, #0]
 8003f0e:	68e3      	ldr	r3, [r4, #12]
 8003f10:	3301      	adds	r3, #1
 8003f12:	60e3      	str	r3, [r4, #12]
 8003f14:	1bed      	subs	r5, r5, r7
 8003f16:	44ab      	add	fp, r5
 8003f18:	6925      	ldr	r5, [r4, #16]
 8003f1a:	445d      	add	r5, fp
 8003f1c:	6125      	str	r5, [r4, #16]
 8003f1e:	2000      	movs	r0, #0
 8003f20:	b007      	add	sp, #28
 8003f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f26:	f04f 0b00 	mov.w	fp, #0
 8003f2a:	e7ca      	b.n	8003ec2 <_scanf_i+0x15e>
 8003f2c:	1d1a      	adds	r2, r3, #4
 8003f2e:	f8c8 2000 	str.w	r2, [r8]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f011 0f01 	tst.w	r1, #1
 8003f38:	bf14      	ite	ne
 8003f3a:	8018      	strhne	r0, [r3, #0]
 8003f3c:	6018      	streq	r0, [r3, #0]
 8003f3e:	e7e6      	b.n	8003f0e <_scanf_i+0x1aa>
 8003f40:	2001      	movs	r0, #1
 8003f42:	e7ed      	b.n	8003f20 <_scanf_i+0x1bc>
 8003f44:	08004514 	.word	0x08004514
 8003f48:	080041b1 	.word	0x080041b1
 8003f4c:	080040c9 	.word	0x080040c9
 8003f50:	080045a5 	.word	0x080045a5

08003f54 <__sccl>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	780b      	ldrb	r3, [r1, #0]
 8003f58:	4604      	mov	r4, r0
 8003f5a:	2b5e      	cmp	r3, #94	; 0x5e
 8003f5c:	bf0b      	itete	eq
 8003f5e:	784b      	ldrbeq	r3, [r1, #1]
 8003f60:	1c48      	addne	r0, r1, #1
 8003f62:	1c88      	addeq	r0, r1, #2
 8003f64:	2200      	movne	r2, #0
 8003f66:	bf08      	it	eq
 8003f68:	2201      	moveq	r2, #1
 8003f6a:	1e61      	subs	r1, r4, #1
 8003f6c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003f70:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003f74:	42a9      	cmp	r1, r5
 8003f76:	d1fb      	bne.n	8003f70 <__sccl+0x1c>
 8003f78:	b90b      	cbnz	r3, 8003f7e <__sccl+0x2a>
 8003f7a:	3801      	subs	r0, #1
 8003f7c:	bd70      	pop	{r4, r5, r6, pc}
 8003f7e:	f082 0201 	eor.w	r2, r2, #1
 8003f82:	54e2      	strb	r2, [r4, r3]
 8003f84:	4605      	mov	r5, r0
 8003f86:	4628      	mov	r0, r5
 8003f88:	f810 1b01 	ldrb.w	r1, [r0], #1
 8003f8c:	292d      	cmp	r1, #45	; 0x2d
 8003f8e:	d006      	beq.n	8003f9e <__sccl+0x4a>
 8003f90:	295d      	cmp	r1, #93	; 0x5d
 8003f92:	d0f3      	beq.n	8003f7c <__sccl+0x28>
 8003f94:	b909      	cbnz	r1, 8003f9a <__sccl+0x46>
 8003f96:	4628      	mov	r0, r5
 8003f98:	e7f0      	b.n	8003f7c <__sccl+0x28>
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	e7f1      	b.n	8003f82 <__sccl+0x2e>
 8003f9e:	786e      	ldrb	r6, [r5, #1]
 8003fa0:	2e5d      	cmp	r6, #93	; 0x5d
 8003fa2:	d0fa      	beq.n	8003f9a <__sccl+0x46>
 8003fa4:	42b3      	cmp	r3, r6
 8003fa6:	dcf8      	bgt.n	8003f9a <__sccl+0x46>
 8003fa8:	3502      	adds	r5, #2
 8003faa:	4619      	mov	r1, r3
 8003fac:	3101      	adds	r1, #1
 8003fae:	428e      	cmp	r6, r1
 8003fb0:	5462      	strb	r2, [r4, r1]
 8003fb2:	dcfb      	bgt.n	8003fac <__sccl+0x58>
 8003fb4:	1af1      	subs	r1, r6, r3
 8003fb6:	3901      	subs	r1, #1
 8003fb8:	1c58      	adds	r0, r3, #1
 8003fba:	42b3      	cmp	r3, r6
 8003fbc:	bfa8      	it	ge
 8003fbe:	2100      	movge	r1, #0
 8003fc0:	1843      	adds	r3, r0, r1
 8003fc2:	e7e0      	b.n	8003f86 <__sccl+0x32>

08003fc4 <_strtol_l.constprop.0>:
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fca:	d001      	beq.n	8003fd0 <_strtol_l.constprop.0+0xc>
 8003fcc:	2b24      	cmp	r3, #36	; 0x24
 8003fce:	d906      	bls.n	8003fde <_strtol_l.constprop.0+0x1a>
 8003fd0:	f7ff fc26 	bl	8003820 <__errno>
 8003fd4:	2316      	movs	r3, #22
 8003fd6:	6003      	str	r3, [r0, #0]
 8003fd8:	2000      	movs	r0, #0
 8003fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fde:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80040c4 <_strtol_l.constprop.0+0x100>
 8003fe2:	460d      	mov	r5, r1
 8003fe4:	462e      	mov	r6, r5
 8003fe6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003fea:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003fee:	f017 0708 	ands.w	r7, r7, #8
 8003ff2:	d1f7      	bne.n	8003fe4 <_strtol_l.constprop.0+0x20>
 8003ff4:	2c2d      	cmp	r4, #45	; 0x2d
 8003ff6:	d132      	bne.n	800405e <_strtol_l.constprop.0+0x9a>
 8003ff8:	782c      	ldrb	r4, [r5, #0]
 8003ffa:	2701      	movs	r7, #1
 8003ffc:	1cb5      	adds	r5, r6, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d05b      	beq.n	80040ba <_strtol_l.constprop.0+0xf6>
 8004002:	2b10      	cmp	r3, #16
 8004004:	d109      	bne.n	800401a <_strtol_l.constprop.0+0x56>
 8004006:	2c30      	cmp	r4, #48	; 0x30
 8004008:	d107      	bne.n	800401a <_strtol_l.constprop.0+0x56>
 800400a:	782c      	ldrb	r4, [r5, #0]
 800400c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004010:	2c58      	cmp	r4, #88	; 0x58
 8004012:	d14d      	bne.n	80040b0 <_strtol_l.constprop.0+0xec>
 8004014:	786c      	ldrb	r4, [r5, #1]
 8004016:	2310      	movs	r3, #16
 8004018:	3502      	adds	r5, #2
 800401a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800401e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004022:	f04f 0c00 	mov.w	ip, #0
 8004026:	fbb8 f9f3 	udiv	r9, r8, r3
 800402a:	4666      	mov	r6, ip
 800402c:	fb03 8a19 	mls	sl, r3, r9, r8
 8004030:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004034:	f1be 0f09 	cmp.w	lr, #9
 8004038:	d816      	bhi.n	8004068 <_strtol_l.constprop.0+0xa4>
 800403a:	4674      	mov	r4, lr
 800403c:	42a3      	cmp	r3, r4
 800403e:	dd24      	ble.n	800408a <_strtol_l.constprop.0+0xc6>
 8004040:	f1bc 0f00 	cmp.w	ip, #0
 8004044:	db1e      	blt.n	8004084 <_strtol_l.constprop.0+0xc0>
 8004046:	45b1      	cmp	r9, r6
 8004048:	d31c      	bcc.n	8004084 <_strtol_l.constprop.0+0xc0>
 800404a:	d101      	bne.n	8004050 <_strtol_l.constprop.0+0x8c>
 800404c:	45a2      	cmp	sl, r4
 800404e:	db19      	blt.n	8004084 <_strtol_l.constprop.0+0xc0>
 8004050:	fb06 4603 	mla	r6, r6, r3, r4
 8004054:	f04f 0c01 	mov.w	ip, #1
 8004058:	f815 4b01 	ldrb.w	r4, [r5], #1
 800405c:	e7e8      	b.n	8004030 <_strtol_l.constprop.0+0x6c>
 800405e:	2c2b      	cmp	r4, #43	; 0x2b
 8004060:	bf04      	itt	eq
 8004062:	782c      	ldrbeq	r4, [r5, #0]
 8004064:	1cb5      	addeq	r5, r6, #2
 8004066:	e7ca      	b.n	8003ffe <_strtol_l.constprop.0+0x3a>
 8004068:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800406c:	f1be 0f19 	cmp.w	lr, #25
 8004070:	d801      	bhi.n	8004076 <_strtol_l.constprop.0+0xb2>
 8004072:	3c37      	subs	r4, #55	; 0x37
 8004074:	e7e2      	b.n	800403c <_strtol_l.constprop.0+0x78>
 8004076:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800407a:	f1be 0f19 	cmp.w	lr, #25
 800407e:	d804      	bhi.n	800408a <_strtol_l.constprop.0+0xc6>
 8004080:	3c57      	subs	r4, #87	; 0x57
 8004082:	e7db      	b.n	800403c <_strtol_l.constprop.0+0x78>
 8004084:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8004088:	e7e6      	b.n	8004058 <_strtol_l.constprop.0+0x94>
 800408a:	f1bc 0f00 	cmp.w	ip, #0
 800408e:	da05      	bge.n	800409c <_strtol_l.constprop.0+0xd8>
 8004090:	2322      	movs	r3, #34	; 0x22
 8004092:	6003      	str	r3, [r0, #0]
 8004094:	4646      	mov	r6, r8
 8004096:	b942      	cbnz	r2, 80040aa <_strtol_l.constprop.0+0xe6>
 8004098:	4630      	mov	r0, r6
 800409a:	e79e      	b.n	8003fda <_strtol_l.constprop.0+0x16>
 800409c:	b107      	cbz	r7, 80040a0 <_strtol_l.constprop.0+0xdc>
 800409e:	4276      	negs	r6, r6
 80040a0:	2a00      	cmp	r2, #0
 80040a2:	d0f9      	beq.n	8004098 <_strtol_l.constprop.0+0xd4>
 80040a4:	f1bc 0f00 	cmp.w	ip, #0
 80040a8:	d000      	beq.n	80040ac <_strtol_l.constprop.0+0xe8>
 80040aa:	1e69      	subs	r1, r5, #1
 80040ac:	6011      	str	r1, [r2, #0]
 80040ae:	e7f3      	b.n	8004098 <_strtol_l.constprop.0+0xd4>
 80040b0:	2430      	movs	r4, #48	; 0x30
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1b1      	bne.n	800401a <_strtol_l.constprop.0+0x56>
 80040b6:	2308      	movs	r3, #8
 80040b8:	e7af      	b.n	800401a <_strtol_l.constprop.0+0x56>
 80040ba:	2c30      	cmp	r4, #48	; 0x30
 80040bc:	d0a5      	beq.n	800400a <_strtol_l.constprop.0+0x46>
 80040be:	230a      	movs	r3, #10
 80040c0:	e7ab      	b.n	800401a <_strtol_l.constprop.0+0x56>
 80040c2:	bf00      	nop
 80040c4:	080045a8 	.word	0x080045a8

080040c8 <_strtol_r>:
 80040c8:	f7ff bf7c 	b.w	8003fc4 <_strtol_l.constprop.0>

080040cc <_strtoul_l.constprop.0>:
 80040cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040d0:	4f36      	ldr	r7, [pc, #216]	; (80041ac <_strtoul_l.constprop.0+0xe0>)
 80040d2:	4686      	mov	lr, r0
 80040d4:	460d      	mov	r5, r1
 80040d6:	4628      	mov	r0, r5
 80040d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040dc:	5de6      	ldrb	r6, [r4, r7]
 80040de:	f016 0608 	ands.w	r6, r6, #8
 80040e2:	d1f8      	bne.n	80040d6 <_strtoul_l.constprop.0+0xa>
 80040e4:	2c2d      	cmp	r4, #45	; 0x2d
 80040e6:	d12f      	bne.n	8004148 <_strtoul_l.constprop.0+0x7c>
 80040e8:	782c      	ldrb	r4, [r5, #0]
 80040ea:	2601      	movs	r6, #1
 80040ec:	1c85      	adds	r5, r0, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d057      	beq.n	80041a2 <_strtoul_l.constprop.0+0xd6>
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d109      	bne.n	800410a <_strtoul_l.constprop.0+0x3e>
 80040f6:	2c30      	cmp	r4, #48	; 0x30
 80040f8:	d107      	bne.n	800410a <_strtoul_l.constprop.0+0x3e>
 80040fa:	7828      	ldrb	r0, [r5, #0]
 80040fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004100:	2858      	cmp	r0, #88	; 0x58
 8004102:	d149      	bne.n	8004198 <_strtoul_l.constprop.0+0xcc>
 8004104:	786c      	ldrb	r4, [r5, #1]
 8004106:	2310      	movs	r3, #16
 8004108:	3502      	adds	r5, #2
 800410a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800410e:	2700      	movs	r7, #0
 8004110:	fbb8 f8f3 	udiv	r8, r8, r3
 8004114:	fb03 f908 	mul.w	r9, r3, r8
 8004118:	ea6f 0909 	mvn.w	r9, r9
 800411c:	4638      	mov	r0, r7
 800411e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004122:	f1bc 0f09 	cmp.w	ip, #9
 8004126:	d814      	bhi.n	8004152 <_strtoul_l.constprop.0+0x86>
 8004128:	4664      	mov	r4, ip
 800412a:	42a3      	cmp	r3, r4
 800412c:	dd22      	ble.n	8004174 <_strtoul_l.constprop.0+0xa8>
 800412e:	2f00      	cmp	r7, #0
 8004130:	db1d      	blt.n	800416e <_strtoul_l.constprop.0+0xa2>
 8004132:	4580      	cmp	r8, r0
 8004134:	d31b      	bcc.n	800416e <_strtoul_l.constprop.0+0xa2>
 8004136:	d101      	bne.n	800413c <_strtoul_l.constprop.0+0x70>
 8004138:	45a1      	cmp	r9, r4
 800413a:	db18      	blt.n	800416e <_strtoul_l.constprop.0+0xa2>
 800413c:	fb00 4003 	mla	r0, r0, r3, r4
 8004140:	2701      	movs	r7, #1
 8004142:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004146:	e7ea      	b.n	800411e <_strtoul_l.constprop.0+0x52>
 8004148:	2c2b      	cmp	r4, #43	; 0x2b
 800414a:	bf04      	itt	eq
 800414c:	782c      	ldrbeq	r4, [r5, #0]
 800414e:	1c85      	addeq	r5, r0, #2
 8004150:	e7cd      	b.n	80040ee <_strtoul_l.constprop.0+0x22>
 8004152:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004156:	f1bc 0f19 	cmp.w	ip, #25
 800415a:	d801      	bhi.n	8004160 <_strtoul_l.constprop.0+0x94>
 800415c:	3c37      	subs	r4, #55	; 0x37
 800415e:	e7e4      	b.n	800412a <_strtoul_l.constprop.0+0x5e>
 8004160:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004164:	f1bc 0f19 	cmp.w	ip, #25
 8004168:	d804      	bhi.n	8004174 <_strtoul_l.constprop.0+0xa8>
 800416a:	3c57      	subs	r4, #87	; 0x57
 800416c:	e7dd      	b.n	800412a <_strtoul_l.constprop.0+0x5e>
 800416e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004172:	e7e6      	b.n	8004142 <_strtoul_l.constprop.0+0x76>
 8004174:	2f00      	cmp	r7, #0
 8004176:	da07      	bge.n	8004188 <_strtoul_l.constprop.0+0xbc>
 8004178:	2322      	movs	r3, #34	; 0x22
 800417a:	f8ce 3000 	str.w	r3, [lr]
 800417e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004182:	b932      	cbnz	r2, 8004192 <_strtoul_l.constprop.0+0xc6>
 8004184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004188:	b106      	cbz	r6, 800418c <_strtoul_l.constprop.0+0xc0>
 800418a:	4240      	negs	r0, r0
 800418c:	2a00      	cmp	r2, #0
 800418e:	d0f9      	beq.n	8004184 <_strtoul_l.constprop.0+0xb8>
 8004190:	b107      	cbz	r7, 8004194 <_strtoul_l.constprop.0+0xc8>
 8004192:	1e69      	subs	r1, r5, #1
 8004194:	6011      	str	r1, [r2, #0]
 8004196:	e7f5      	b.n	8004184 <_strtoul_l.constprop.0+0xb8>
 8004198:	2430      	movs	r4, #48	; 0x30
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1b5      	bne.n	800410a <_strtoul_l.constprop.0+0x3e>
 800419e:	2308      	movs	r3, #8
 80041a0:	e7b3      	b.n	800410a <_strtoul_l.constprop.0+0x3e>
 80041a2:	2c30      	cmp	r4, #48	; 0x30
 80041a4:	d0a9      	beq.n	80040fa <_strtoul_l.constprop.0+0x2e>
 80041a6:	230a      	movs	r3, #10
 80041a8:	e7af      	b.n	800410a <_strtoul_l.constprop.0+0x3e>
 80041aa:	bf00      	nop
 80041ac:	080045a8 	.word	0x080045a8

080041b0 <_strtoul_r>:
 80041b0:	f7ff bf8c 	b.w	80040cc <_strtoul_l.constprop.0>

080041b4 <__submore>:
 80041b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b8:	460c      	mov	r4, r1
 80041ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80041bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041c0:	4299      	cmp	r1, r3
 80041c2:	d11d      	bne.n	8004200 <__submore+0x4c>
 80041c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041c8:	f000 f8aa 	bl	8004320 <_malloc_r>
 80041cc:	b918      	cbnz	r0, 80041d6 <__submore+0x22>
 80041ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041da:	63a3      	str	r3, [r4, #56]	; 0x38
 80041dc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80041e0:	6360      	str	r0, [r4, #52]	; 0x34
 80041e2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80041e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80041ea:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80041ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80041f2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80041f6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80041fa:	6020      	str	r0, [r4, #0]
 80041fc:	2000      	movs	r0, #0
 80041fe:	e7e8      	b.n	80041d2 <__submore+0x1e>
 8004200:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004202:	0077      	lsls	r7, r6, #1
 8004204:	463a      	mov	r2, r7
 8004206:	f000 f8ff 	bl	8004408 <_realloc_r>
 800420a:	4605      	mov	r5, r0
 800420c:	2800      	cmp	r0, #0
 800420e:	d0de      	beq.n	80041ce <__submore+0x1a>
 8004210:	eb00 0806 	add.w	r8, r0, r6
 8004214:	4601      	mov	r1, r0
 8004216:	4632      	mov	r2, r6
 8004218:	4640      	mov	r0, r8
 800421a:	f000 f807 	bl	800422c <memcpy>
 800421e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004222:	f8c4 8000 	str.w	r8, [r4]
 8004226:	e7e9      	b.n	80041fc <__submore+0x48>

08004228 <__retarget_lock_acquire_recursive>:
 8004228:	4770      	bx	lr

0800422a <__retarget_lock_release_recursive>:
 800422a:	4770      	bx	lr

0800422c <memcpy>:
 800422c:	440a      	add	r2, r1
 800422e:	4291      	cmp	r1, r2
 8004230:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004234:	d100      	bne.n	8004238 <memcpy+0xc>
 8004236:	4770      	bx	lr
 8004238:	b510      	push	{r4, lr}
 800423a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800423e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004242:	4291      	cmp	r1, r2
 8004244:	d1f9      	bne.n	800423a <memcpy+0xe>
 8004246:	bd10      	pop	{r4, pc}

08004248 <_free_r>:
 8004248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800424a:	2900      	cmp	r1, #0
 800424c:	d044      	beq.n	80042d8 <_free_r+0x90>
 800424e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004252:	9001      	str	r0, [sp, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f1a1 0404 	sub.w	r4, r1, #4
 800425a:	bfb8      	it	lt
 800425c:	18e4      	addlt	r4, r4, r3
 800425e:	f000 f913 	bl	8004488 <__malloc_lock>
 8004262:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <_free_r+0x94>)
 8004264:	9801      	ldr	r0, [sp, #4]
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	b933      	cbnz	r3, 8004278 <_free_r+0x30>
 800426a:	6063      	str	r3, [r4, #4]
 800426c:	6014      	str	r4, [r2, #0]
 800426e:	b003      	add	sp, #12
 8004270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004274:	f000 b90e 	b.w	8004494 <__malloc_unlock>
 8004278:	42a3      	cmp	r3, r4
 800427a:	d908      	bls.n	800428e <_free_r+0x46>
 800427c:	6825      	ldr	r5, [r4, #0]
 800427e:	1961      	adds	r1, r4, r5
 8004280:	428b      	cmp	r3, r1
 8004282:	bf01      	itttt	eq
 8004284:	6819      	ldreq	r1, [r3, #0]
 8004286:	685b      	ldreq	r3, [r3, #4]
 8004288:	1949      	addeq	r1, r1, r5
 800428a:	6021      	streq	r1, [r4, #0]
 800428c:	e7ed      	b.n	800426a <_free_r+0x22>
 800428e:	461a      	mov	r2, r3
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	b10b      	cbz	r3, 8004298 <_free_r+0x50>
 8004294:	42a3      	cmp	r3, r4
 8004296:	d9fa      	bls.n	800428e <_free_r+0x46>
 8004298:	6811      	ldr	r1, [r2, #0]
 800429a:	1855      	adds	r5, r2, r1
 800429c:	42a5      	cmp	r5, r4
 800429e:	d10b      	bne.n	80042b8 <_free_r+0x70>
 80042a0:	6824      	ldr	r4, [r4, #0]
 80042a2:	4421      	add	r1, r4
 80042a4:	1854      	adds	r4, r2, r1
 80042a6:	42a3      	cmp	r3, r4
 80042a8:	6011      	str	r1, [r2, #0]
 80042aa:	d1e0      	bne.n	800426e <_free_r+0x26>
 80042ac:	681c      	ldr	r4, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	6053      	str	r3, [r2, #4]
 80042b2:	4421      	add	r1, r4
 80042b4:	6011      	str	r1, [r2, #0]
 80042b6:	e7da      	b.n	800426e <_free_r+0x26>
 80042b8:	d902      	bls.n	80042c0 <_free_r+0x78>
 80042ba:	230c      	movs	r3, #12
 80042bc:	6003      	str	r3, [r0, #0]
 80042be:	e7d6      	b.n	800426e <_free_r+0x26>
 80042c0:	6825      	ldr	r5, [r4, #0]
 80042c2:	1961      	adds	r1, r4, r5
 80042c4:	428b      	cmp	r3, r1
 80042c6:	bf04      	itt	eq
 80042c8:	6819      	ldreq	r1, [r3, #0]
 80042ca:	685b      	ldreq	r3, [r3, #4]
 80042cc:	6063      	str	r3, [r4, #4]
 80042ce:	bf04      	itt	eq
 80042d0:	1949      	addeq	r1, r1, r5
 80042d2:	6021      	streq	r1, [r4, #0]
 80042d4:	6054      	str	r4, [r2, #4]
 80042d6:	e7ca      	b.n	800426e <_free_r+0x26>
 80042d8:	b003      	add	sp, #12
 80042da:	bd30      	pop	{r4, r5, pc}
 80042dc:	20000264 	.word	0x20000264

080042e0 <sbrk_aligned>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	4e0e      	ldr	r6, [pc, #56]	; (800431c <sbrk_aligned+0x3c>)
 80042e4:	460c      	mov	r4, r1
 80042e6:	6831      	ldr	r1, [r6, #0]
 80042e8:	4605      	mov	r5, r0
 80042ea:	b911      	cbnz	r1, 80042f2 <sbrk_aligned+0x12>
 80042ec:	f000 f8bc 	bl	8004468 <_sbrk_r>
 80042f0:	6030      	str	r0, [r6, #0]
 80042f2:	4621      	mov	r1, r4
 80042f4:	4628      	mov	r0, r5
 80042f6:	f000 f8b7 	bl	8004468 <_sbrk_r>
 80042fa:	1c43      	adds	r3, r0, #1
 80042fc:	d00a      	beq.n	8004314 <sbrk_aligned+0x34>
 80042fe:	1cc4      	adds	r4, r0, #3
 8004300:	f024 0403 	bic.w	r4, r4, #3
 8004304:	42a0      	cmp	r0, r4
 8004306:	d007      	beq.n	8004318 <sbrk_aligned+0x38>
 8004308:	1a21      	subs	r1, r4, r0
 800430a:	4628      	mov	r0, r5
 800430c:	f000 f8ac 	bl	8004468 <_sbrk_r>
 8004310:	3001      	adds	r0, #1
 8004312:	d101      	bne.n	8004318 <sbrk_aligned+0x38>
 8004314:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004318:	4620      	mov	r0, r4
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	20000268 	.word	0x20000268

08004320 <_malloc_r>:
 8004320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004324:	1ccd      	adds	r5, r1, #3
 8004326:	f025 0503 	bic.w	r5, r5, #3
 800432a:	3508      	adds	r5, #8
 800432c:	2d0c      	cmp	r5, #12
 800432e:	bf38      	it	cc
 8004330:	250c      	movcc	r5, #12
 8004332:	2d00      	cmp	r5, #0
 8004334:	4607      	mov	r7, r0
 8004336:	db01      	blt.n	800433c <_malloc_r+0x1c>
 8004338:	42a9      	cmp	r1, r5
 800433a:	d905      	bls.n	8004348 <_malloc_r+0x28>
 800433c:	230c      	movs	r3, #12
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	2600      	movs	r6, #0
 8004342:	4630      	mov	r0, r6
 8004344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004348:	4e2e      	ldr	r6, [pc, #184]	; (8004404 <_malloc_r+0xe4>)
 800434a:	f000 f89d 	bl	8004488 <__malloc_lock>
 800434e:	6833      	ldr	r3, [r6, #0]
 8004350:	461c      	mov	r4, r3
 8004352:	bb34      	cbnz	r4, 80043a2 <_malloc_r+0x82>
 8004354:	4629      	mov	r1, r5
 8004356:	4638      	mov	r0, r7
 8004358:	f7ff ffc2 	bl	80042e0 <sbrk_aligned>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	4604      	mov	r4, r0
 8004360:	d14d      	bne.n	80043fe <_malloc_r+0xde>
 8004362:	6834      	ldr	r4, [r6, #0]
 8004364:	4626      	mov	r6, r4
 8004366:	2e00      	cmp	r6, #0
 8004368:	d140      	bne.n	80043ec <_malloc_r+0xcc>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	4631      	mov	r1, r6
 800436e:	4638      	mov	r0, r7
 8004370:	eb04 0803 	add.w	r8, r4, r3
 8004374:	f000 f878 	bl	8004468 <_sbrk_r>
 8004378:	4580      	cmp	r8, r0
 800437a:	d13a      	bne.n	80043f2 <_malloc_r+0xd2>
 800437c:	6821      	ldr	r1, [r4, #0]
 800437e:	3503      	adds	r5, #3
 8004380:	1a6d      	subs	r5, r5, r1
 8004382:	f025 0503 	bic.w	r5, r5, #3
 8004386:	3508      	adds	r5, #8
 8004388:	2d0c      	cmp	r5, #12
 800438a:	bf38      	it	cc
 800438c:	250c      	movcc	r5, #12
 800438e:	4629      	mov	r1, r5
 8004390:	4638      	mov	r0, r7
 8004392:	f7ff ffa5 	bl	80042e0 <sbrk_aligned>
 8004396:	3001      	adds	r0, #1
 8004398:	d02b      	beq.n	80043f2 <_malloc_r+0xd2>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	442b      	add	r3, r5
 800439e:	6023      	str	r3, [r4, #0]
 80043a0:	e00e      	b.n	80043c0 <_malloc_r+0xa0>
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	1b52      	subs	r2, r2, r5
 80043a6:	d41e      	bmi.n	80043e6 <_malloc_r+0xc6>
 80043a8:	2a0b      	cmp	r2, #11
 80043aa:	d916      	bls.n	80043da <_malloc_r+0xba>
 80043ac:	1961      	adds	r1, r4, r5
 80043ae:	42a3      	cmp	r3, r4
 80043b0:	6025      	str	r5, [r4, #0]
 80043b2:	bf18      	it	ne
 80043b4:	6059      	strne	r1, [r3, #4]
 80043b6:	6863      	ldr	r3, [r4, #4]
 80043b8:	bf08      	it	eq
 80043ba:	6031      	streq	r1, [r6, #0]
 80043bc:	5162      	str	r2, [r4, r5]
 80043be:	604b      	str	r3, [r1, #4]
 80043c0:	4638      	mov	r0, r7
 80043c2:	f104 060b 	add.w	r6, r4, #11
 80043c6:	f000 f865 	bl	8004494 <__malloc_unlock>
 80043ca:	f026 0607 	bic.w	r6, r6, #7
 80043ce:	1d23      	adds	r3, r4, #4
 80043d0:	1af2      	subs	r2, r6, r3
 80043d2:	d0b6      	beq.n	8004342 <_malloc_r+0x22>
 80043d4:	1b9b      	subs	r3, r3, r6
 80043d6:	50a3      	str	r3, [r4, r2]
 80043d8:	e7b3      	b.n	8004342 <_malloc_r+0x22>
 80043da:	6862      	ldr	r2, [r4, #4]
 80043dc:	42a3      	cmp	r3, r4
 80043de:	bf0c      	ite	eq
 80043e0:	6032      	streq	r2, [r6, #0]
 80043e2:	605a      	strne	r2, [r3, #4]
 80043e4:	e7ec      	b.n	80043c0 <_malloc_r+0xa0>
 80043e6:	4623      	mov	r3, r4
 80043e8:	6864      	ldr	r4, [r4, #4]
 80043ea:	e7b2      	b.n	8004352 <_malloc_r+0x32>
 80043ec:	4634      	mov	r4, r6
 80043ee:	6876      	ldr	r6, [r6, #4]
 80043f0:	e7b9      	b.n	8004366 <_malloc_r+0x46>
 80043f2:	230c      	movs	r3, #12
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	4638      	mov	r0, r7
 80043f8:	f000 f84c 	bl	8004494 <__malloc_unlock>
 80043fc:	e7a1      	b.n	8004342 <_malloc_r+0x22>
 80043fe:	6025      	str	r5, [r4, #0]
 8004400:	e7de      	b.n	80043c0 <_malloc_r+0xa0>
 8004402:	bf00      	nop
 8004404:	20000264 	.word	0x20000264

08004408 <_realloc_r>:
 8004408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800440c:	4680      	mov	r8, r0
 800440e:	4614      	mov	r4, r2
 8004410:	460e      	mov	r6, r1
 8004412:	b921      	cbnz	r1, 800441e <_realloc_r+0x16>
 8004414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004418:	4611      	mov	r1, r2
 800441a:	f7ff bf81 	b.w	8004320 <_malloc_r>
 800441e:	b92a      	cbnz	r2, 800442c <_realloc_r+0x24>
 8004420:	f7ff ff12 	bl	8004248 <_free_r>
 8004424:	4625      	mov	r5, r4
 8004426:	4628      	mov	r0, r5
 8004428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800442c:	f000 f838 	bl	80044a0 <_malloc_usable_size_r>
 8004430:	4284      	cmp	r4, r0
 8004432:	4607      	mov	r7, r0
 8004434:	d802      	bhi.n	800443c <_realloc_r+0x34>
 8004436:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800443a:	d812      	bhi.n	8004462 <_realloc_r+0x5a>
 800443c:	4621      	mov	r1, r4
 800443e:	4640      	mov	r0, r8
 8004440:	f7ff ff6e 	bl	8004320 <_malloc_r>
 8004444:	4605      	mov	r5, r0
 8004446:	2800      	cmp	r0, #0
 8004448:	d0ed      	beq.n	8004426 <_realloc_r+0x1e>
 800444a:	42bc      	cmp	r4, r7
 800444c:	4622      	mov	r2, r4
 800444e:	4631      	mov	r1, r6
 8004450:	bf28      	it	cs
 8004452:	463a      	movcs	r2, r7
 8004454:	f7ff feea 	bl	800422c <memcpy>
 8004458:	4631      	mov	r1, r6
 800445a:	4640      	mov	r0, r8
 800445c:	f7ff fef4 	bl	8004248 <_free_r>
 8004460:	e7e1      	b.n	8004426 <_realloc_r+0x1e>
 8004462:	4635      	mov	r5, r6
 8004464:	e7df      	b.n	8004426 <_realloc_r+0x1e>
	...

08004468 <_sbrk_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4d06      	ldr	r5, [pc, #24]	; (8004484 <_sbrk_r+0x1c>)
 800446c:	2300      	movs	r3, #0
 800446e:	4604      	mov	r4, r0
 8004470:	4608      	mov	r0, r1
 8004472:	602b      	str	r3, [r5, #0]
 8004474:	f7fc fd50 	bl	8000f18 <_sbrk>
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	d102      	bne.n	8004482 <_sbrk_r+0x1a>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	b103      	cbz	r3, 8004482 <_sbrk_r+0x1a>
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	bd38      	pop	{r3, r4, r5, pc}
 8004484:	2000025c 	.word	0x2000025c

08004488 <__malloc_lock>:
 8004488:	4801      	ldr	r0, [pc, #4]	; (8004490 <__malloc_lock+0x8>)
 800448a:	f7ff becd 	b.w	8004228 <__retarget_lock_acquire_recursive>
 800448e:	bf00      	nop
 8004490:	20000260 	.word	0x20000260

08004494 <__malloc_unlock>:
 8004494:	4801      	ldr	r0, [pc, #4]	; (800449c <__malloc_unlock+0x8>)
 8004496:	f7ff bec8 	b.w	800422a <__retarget_lock_release_recursive>
 800449a:	bf00      	nop
 800449c:	20000260 	.word	0x20000260

080044a0 <_malloc_usable_size_r>:
 80044a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044a4:	1f18      	subs	r0, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bfbc      	itt	lt
 80044aa:	580b      	ldrlt	r3, [r1, r0]
 80044ac:	18c0      	addlt	r0, r0, r3
 80044ae:	4770      	bx	lr

080044b0 <_init>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr

080044bc <_fini>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr
