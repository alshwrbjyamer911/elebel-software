
transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000492c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d2c  08004d2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d34  08004d34  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d34  08004d34  00014d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001f0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011302  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000214d  00000000  00000000  000313a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  000334f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e10  00000000  00000000  000343c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232d9  00000000  00000000  000351d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109a7  00000000  00000000  000584b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0cbf  00000000  00000000  00068e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139b17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004760  00000000  00000000  00139b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004aa4 	.word	0x08004aa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004aa4 	.word	0x08004aa4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <_Z9lora_initv>:
uint8_t my_id;
uint8_t my_addr;
uint8_t receiver_id;
uint8_t receiver_addr;

void lora_init(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	receiver_id = get_id();
 8000588:	f000 f84e 	bl	8000628 <_Z6get_idv>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <_Z9lora_initv+0x38>)
 8000592:	701a      	strb	r2, [r3, #0]
	receiver_addr = get_address();
 8000594:	f000 f86e 	bl	8000674 <_Z11get_addressv>
 8000598:	4603      	mov	r3, r0
 800059a:	461a      	mov	r2, r3
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <_Z9lora_initv+0x3c>)
 800059e:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, band, sizeof(band)-1, 100);
 80005a0:	2364      	movs	r3, #100	; 0x64
 80005a2:	2213      	movs	r2, #19
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <_Z9lora_initv+0x40>)
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <_Z9lora_initv+0x44>)
 80005a8:	f002 fd09 	bl	8002fbe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, password, sizeof(password)-1, 100);
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	2218      	movs	r2, #24
 80005b0:	4906      	ldr	r1, [pc, #24]	; (80005cc <_Z9lora_initv+0x48>)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <_Z9lora_initv+0x44>)
 80005b4:	f002 fd03 	bl	8002fbe <HAL_UART_Transmit>


}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000008e 	.word	0x2000008e
 80005c0:	2000008f 	.word	0x2000008f
 80005c4:	08004b14 	.word	0x08004b14
 80005c8:	200001c0 	.word	0x200001c0
 80005cc:	08004b28 	.word	0x08004b28

080005d0 <_Z14lora_send_charh>:
	int address = 0;int rssi = 0;int lenth=0;
	uint8_t data=0;
	sscanf(message, "+RCV=%d,%d,%c,%d,%d",&address,&lenth,&data,&rssi,NULL);
	return data;
}
void lora_send_char(uint8_t data){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b090      	sub	sp, #64	; 0x40
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[50];
	memset(buffer,0,50);
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2232      	movs	r2, #50	; 0x32
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 f92c 	bl	8003840 <memset>
	sprintf((char*)buffer,"AT+SEND=%d,1,%c\r\n",receiver_addr,data);
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <_Z14lora_send_charh+0x4c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f107 000c 	add.w	r0, r7, #12
 80005f4:	490a      	ldr	r1, [pc, #40]	; (8000620 <_Z14lora_send_charh+0x50>)
 80005f6:	f003 f92b 	bl	8003850 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), 100);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fde6 	bl	80001d0 <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	f107 010c 	add.w	r1, r7, #12
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <_Z14lora_send_charh+0x54>)
 8000610:	f002 fcd5 	bl	8002fbe <HAL_UART_Transmit>

}
 8000614:	bf00      	nop
 8000616:	3740      	adds	r7, #64	; 0x40
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000008f 	.word	0x2000008f
 8000620:	08004ad8 	.word	0x08004ad8
 8000624:	200001c0 	.word	0x200001c0

08000628 <_Z6get_idv>:

uint8_t get_id(){
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
	uint8_t buffer[25];

	HAL_UART_Transmit(&huart2, getid, sizeof(getid), 100);
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	220f      	movs	r2, #15
 8000632:	490c      	ldr	r1, [pc, #48]	; (8000664 <_Z6get_idv+0x3c>)
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <_Z6get_idv+0x40>)
 8000636:	f002 fcc2 	bl	8002fbe <HAL_UART_Transmit>
//	HAL_Delay(10);
	HAL_UART_Receive(&huart2, buffer, sizeof(buffer), 100);
 800063a:	1d39      	adds	r1, r7, #4
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	2219      	movs	r2, #25
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <_Z6get_idv+0x40>)
 8000642:	f002 fd4e 	bl	80030e2 <HAL_UART_Receive>
	sscanf((char*)buffer, "+NETWORKID=%d", &my_id);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4a08      	ldr	r2, [pc, #32]	; (800066c <_Z6get_idv+0x44>)
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <_Z6get_idv+0x48>)
 800064c:	4618      	mov	r0, r3
 800064e:	f003 f91f 	bl	8003890 <siscanf>
	if(IAM ==1)
		return my_id+1;
	else if(IAM==0)
		return my_id-1;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <_Z6get_idv+0x44>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	3b01      	subs	r3, #1
 8000658:	b2db      	uxtb	r3, r3

}
 800065a:	4618      	mov	r0, r3
 800065c:	3720      	adds	r7, #32
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	08004b44 	.word	0x08004b44
 8000668:	200001c0 	.word	0x200001c0
 800066c:	2000008c 	.word	0x2000008c
 8000670:	08004aec 	.word	0x08004aec

08000674 <_Z11get_addressv>:
uint8_t get_address(){
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
	uint8_t buffer[25];
	HAL_UART_Transmit(&huart2, getadd, sizeof(getadd), 100);
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	220d      	movs	r2, #13
 800067e:	490c      	ldr	r1, [pc, #48]	; (80006b0 <_Z11get_addressv+0x3c>)
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <_Z11get_addressv+0x40>)
 8000682:	f002 fc9c 	bl	8002fbe <HAL_UART_Transmit>
//	HAL_Delay(10);
	HAL_UART_Receive(&huart2, buffer, sizeof(buffer), 100);
 8000686:	1d39      	adds	r1, r7, #4
 8000688:	2364      	movs	r3, #100	; 0x64
 800068a:	2219      	movs	r2, #25
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <_Z11get_addressv+0x40>)
 800068e:	f002 fd28 	bl	80030e2 <HAL_UART_Receive>
	sscanf((char*)buffer,"+ADDRESS=%d",&my_addr);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <_Z11get_addressv+0x44>)
 8000696:	4909      	ldr	r1, [pc, #36]	; (80006bc <_Z11get_addressv+0x48>)
 8000698:	4618      	mov	r0, r3
 800069a:	f003 f8f9 	bl	8003890 <siscanf>

	if(IAM ==1)
		return my_addr+1;
	else if(IAM==0)
		return my_addr-1;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <_Z11get_addressv+0x44>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	b2db      	uxtb	r3, r3

}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3720      	adds	r7, #32
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	08004b54 	.word	0x08004b54
 80006b4:	200001c0 	.word	0x200001c0
 80006b8:	2000008d 	.word	0x2000008d
 80006bc:	08004afc 	.word	0x08004afc

080006c0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  {
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    	  //ADC data to soc
    	  //lcd_update

          //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Toggle the LED
      }
  }
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 fd0e 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f858 	bl	8000790 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 fa76 	bl	8000bd0 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80006e4:	f000 f8c8 	bl	8000878 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 80006e8:	f000 f922 	bl	8000930 <_ZL12MX_ADC2_Initv>
  MX_TIM2_Init();
 80006ec:	f000 f9b8 	bl	8000a60 <_ZL12MX_TIM2_Initv>
  MX_USART2_UART_Init();
 80006f0:	f000 fa12 	bl	8000b18 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 80006f4:	f000 fa3e 	bl	8000b74 <_ZL19MX_USART3_UART_Initv>
  MX_SPI1_Init();
 80006f8:	f000 f976 	bl	80009e8 <_ZL12MX_SPI1_Initv>
  HAL_TIM_Base_Start_IT(&htim2);  // Start TIM2 in interrupt mode
 80006fc:	4822      	ldr	r0, [pc, #136]	; (8000788 <main+0xb4>)
 80006fe:	f001 ffdf 	bl	80026c0 <HAL_TIM_Base_Start_IT>
  lora_init();
 8000702:	f7ff ff3f 	bl	8000584 <_Z9lora_initv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(GPIOC,CHIT_Pin)||HAL_GPIO_ReadPin(GPIOC, OHIT_Pin)||HAL_GPIO_ReadPin(GPIOC, STOPWATCH_Pin)){
 8000706:	2102      	movs	r1, #2
 8000708:	4820      	ldr	r0, [pc, #128]	; (800078c <main+0xb8>)
 800070a:	f001 fa77 	bl	8001bfc <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10d      	bne.n	8000730 <main+0x5c>
 8000714:	2104      	movs	r1, #4
 8000716:	481d      	ldr	r0, [pc, #116]	; (800078c <main+0xb8>)
 8000718:	f001 fa70 	bl	8001bfc <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d106      	bne.n	8000730 <main+0x5c>
 8000722:	2101      	movs	r1, #1
 8000724:	4819      	ldr	r0, [pc, #100]	; (800078c <main+0xb8>)
 8000726:	f001 fa69 	bl	8001bfc <HAL_GPIO_ReadPin>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <main+0x60>
 8000730:	2301      	movs	r3, #1
 8000732:	e000      	b.n	8000736 <main+0x62>
 8000734:	2300      	movs	r3, #0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0e5      	beq.n	8000706 <main+0x32>
		  if(HAL_GPIO_ReadPin(GPIOC,CHIT_Pin))
 800073a:	2102      	movs	r1, #2
 800073c:	4813      	ldr	r0, [pc, #76]	; (800078c <main+0xb8>)
 800073e:	f001 fa5d 	bl	8001bfc <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf14      	ite	ne
 8000748:	2301      	movne	r3, #1
 800074a:	2300      	moveq	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d003      	beq.n	800075a <main+0x86>
			  lora_send_char('2');
 8000752:	2032      	movs	r0, #50	; 0x32
 8000754:	f7ff ff3c 	bl	80005d0 <_Z14lora_send_charh>
 8000758:	e7d5      	b.n	8000706 <main+0x32>
		  else if(HAL_GPIO_ReadPin(GPIOC, OHIT_Pin))
 800075a:	2104      	movs	r1, #4
 800075c:	480b      	ldr	r0, [pc, #44]	; (800078c <main+0xb8>)
 800075e:	f001 fa4d 	bl	8001bfc <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	bf14      	ite	ne
 8000768:	2301      	movne	r3, #1
 800076a:	2300      	moveq	r3, #0
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d003      	beq.n	800077a <main+0xa6>
			  lora_send_char('1');
 8000772:	2031      	movs	r0, #49	; 0x31
 8000774:	f7ff ff2c 	bl	80005d0 <_Z14lora_send_charh>
 8000778:	e7c5      	b.n	8000706 <main+0x32>
		  else if(HAL_GPIO_ReadPin(GPIOC, STOPWATCH_Pin)){
 800077a:	2101      	movs	r1, #1
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <main+0xb8>)
 800077e:	f001 fa3d 	bl	8001bfc <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
	  if(HAL_GPIO_ReadPin(GPIOC,CHIT_Pin)||HAL_GPIO_ReadPin(GPIOC, OHIT_Pin)||HAL_GPIO_ReadPin(GPIOC, STOPWATCH_Pin)){
 8000786:	e7be      	b.n	8000706 <main+0x32>
 8000788:	20000178 	.word	0x20000178
 800078c:	40020800 	.word	0x40020800

08000790 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	; 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	2230      	movs	r2, #48	; 0x30
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 f84e 	bl	8003840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <_Z18SystemClock_Configv+0xe0>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	4a2c      	ldr	r2, [pc, #176]	; (8000870 <_Z18SystemClock_Configv+0xe0>)
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c2:	6413      	str	r3, [r2, #64]	; 0x40
 80007c4:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <_Z18SystemClock_Configv+0xe0>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <_Z18SystemClock_Configv+0xe4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a26      	ldr	r2, [pc, #152]	; (8000874 <_Z18SystemClock_Configv+0xe4>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <_Z18SystemClock_Configv+0xe4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000800:	2308      	movs	r3, #8
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000804:	23a8      	movs	r3, #168	; 0xa8
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800080c:	2304      	movs	r3, #4
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	4618      	mov	r0, r3
 8000816:	f001 fa23 	bl	8001c60 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf14      	ite	ne
 8000820:	2301      	movne	r3, #1
 8000822:	2300      	moveq	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800082a:	f000 fa31 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2302      	movs	r3, #2
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800083a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000844:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2105      	movs	r1, #5
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fc7f 	bl	8002150 <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf14      	ite	ne
 8000858:	2301      	movne	r3, #1
 800085a:	2300      	moveq	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000862:	f000 fa15 	bl	8000c90 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3750      	adds	r7, #80	; 0x50
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 800088c:	4a26      	ldr	r2, [pc, #152]	; (8000928 <_ZL12MX_ADC1_Initv+0xb0>)
 800088e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 8000892:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000896:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <_ZL12MX_ADC1_Initv+0xb4>)
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d8:	4812      	ldr	r0, [pc, #72]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 80008da:	f000 fc7f 	bl	80011dc <HAL_ADC_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	bf14      	ite	ne
 80008e4:	2301      	movne	r3, #1
 80008e6:	2300      	moveq	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 80008ee:	f000 f9cf 	bl	8000c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80008fa:	2302      	movs	r3, #2
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fe:	463b      	mov	r3, r7
 8000900:	4619      	mov	r1, r3
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <_ZL12MX_ADC1_Initv+0xac>)
 8000904:	f000 fcae 	bl	8001264 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	bf14      	ite	ne
 800090e:	2301      	movne	r3, #1
 8000910:	2300      	moveq	r3, #0
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000918:	f000 f9ba 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000090 	.word	0x20000090
 8000928:	40012000 	.word	0x40012000
 800092c:	0f000001 	.word	0x0f000001

08000930 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000936:	463b      	mov	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 8000944:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <_ZL12MX_ADC2_Initv+0xb0>)
 8000946:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 800094a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800094e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 800095e:	2200      	movs	r2, #0
 8000960:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 800096c:	2200      	movs	r2, #0
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <_ZL12MX_ADC2_Initv+0xb4>)
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 800097e:	2201      	movs	r2, #1
 8000980:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 800098c:	2201      	movs	r2, #1
 800098e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000990:	4812      	ldr	r0, [pc, #72]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 8000992:	f000 fc23 	bl	80011dc <HAL_ADC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	bf14      	ite	ne
 800099c:	2301      	movne	r3, #1
 800099e:	2300      	moveq	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <_ZL12MX_ADC2_Initv+0x7a>
  {
    Error_Handler();
 80009a6:	f000 f973 	bl	8000c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80009b2:	2302      	movs	r3, #2
 80009b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	4619      	mov	r1, r3
 80009ba:	4808      	ldr	r0, [pc, #32]	; (80009dc <_ZL12MX_ADC2_Initv+0xac>)
 80009bc:	f000 fc52 	bl	8001264 <HAL_ADC_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bf14      	ite	ne
 80009c6:	2301      	movne	r3, #1
 80009c8:	2300      	moveq	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <_ZL12MX_ADC2_Initv+0xa4>
  {
    Error_Handler();
 80009d0:	f000 f95e 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000d8 	.word	0x200000d8
 80009e0:	40012100 	.word	0x40012100
 80009e4:	0f000001 	.word	0x0f000001

080009e8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <_ZL12MX_SPI1_Initv+0x70>)
 80009ee:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <_ZL12MX_SPI1_Initv+0x74>)
 80009f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <_ZL12MX_SPI1_Initv+0x70>)
 80009f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <_ZL12MX_SPI1_Initv+0x70>)
 80009fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a00:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_ZL12MX_SPI1_Initv+0x70>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <_ZL12MX_SPI1_Initv+0x70>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <_ZL12MX_SPI1_Initv+0x70>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <_ZL12MX_SPI1_Initv+0x70>)
 8000a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <_ZL12MX_SPI1_Initv+0x70>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <_ZL12MX_SPI1_Initv+0x70>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <_ZL12MX_SPI1_Initv+0x70>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <_ZL12MX_SPI1_Initv+0x70>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <_ZL12MX_SPI1_Initv+0x70>)
 8000a36:	220a      	movs	r2, #10
 8000a38:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a3a:	4807      	ldr	r0, [pc, #28]	; (8000a58 <_ZL12MX_SPI1_Initv+0x70>)
 8000a3c:	f001 fd68 	bl	8002510 <HAL_SPI_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bf14      	ite	ne
 8000a46:	2301      	movne	r3, #1
 8000a48:	2300      	moveq	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <_ZL12MX_SPI1_Initv+0x6c>
  {
    Error_Handler();
 8000a50:	f000 f91e 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000120 	.word	0x20000120
 8000a5c:	40013000 	.word	0x40013000

08000a60 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <_ZL12MX_TIM2_Initv+0xb4>)
 8000a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16800-1;
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <_ZL12MX_TIM2_Initv+0xb4>)
 8000a86:	f244 129f 	movw	r2, #16799	; 0x419f
 8000a8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <_ZL12MX_TIM2_Initv+0xb4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <_ZL12MX_TIM2_Initv+0xb4>)
 8000a94:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000a98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <_ZL12MX_TIM2_Initv+0xb4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <_ZL12MX_TIM2_Initv+0xb4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa6:	481b      	ldr	r0, [pc, #108]	; (8000b14 <_ZL12MX_TIM2_Initv+0xb4>)
 8000aa8:	f001 fdbb 	bl	8002622 <HAL_TIM_Base_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bf14      	ite	ne
 8000ab2:	2301      	movne	r3, #1
 8000ab4:	2300      	moveq	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8000abc:	f000 f8e8 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	4619      	mov	r1, r3
 8000acc:	4811      	ldr	r0, [pc, #68]	; (8000b14 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ace:	f001 ff6f 	bl	80029b0 <HAL_TIM_ConfigClockSource>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf14      	ite	ne
 8000ad8:	2301      	movne	r3, #1
 8000ada:	2300      	moveq	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8000ae2:	f000 f8d5 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aee:	463b      	mov	r3, r7
 8000af0:	4619      	mov	r1, r3
 8000af2:	4808      	ldr	r0, [pc, #32]	; (8000b14 <_ZL12MX_TIM2_Initv+0xb4>)
 8000af4:	f002 f986 	bl	8002e04 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bf14      	ite	ne
 8000afe:	2301      	movne	r3, #1
 8000b00:	2300      	moveq	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8000b08:	f000 f8c2 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000178 	.word	0x20000178

08000b18 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b50:	f002 f9e8 	bl	8002f24 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf14      	ite	ne
 8000b5a:	2301      	movne	r3, #1
 8000b5c:	2300      	moveq	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000b64:	f000 f894 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200001c0 	.word	0x200001c0
 8000b70:	40004400 	.word	0x40004400

08000b74 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b7a:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_ZL19MX_USART3_UART_Initv+0x58>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000bac:	f002 f9ba 	bl	8002f24 <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf14      	ite	ne
 8000bb6:	2301      	movne	r3, #1
 8000bb8:	2300      	moveq	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8000bc0:	f000 f866 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000204 	.word	0x20000204
 8000bcc:	40004800 	.word	0x40004800

08000bd0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <_ZL12MX_GPIO_Initv+0xb4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a25      	ldr	r2, [pc, #148]	; (8000c84 <_ZL12MX_GPIO_Initv+0xb4>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <_ZL12MX_GPIO_Initv+0xb4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <_ZL12MX_GPIO_Initv+0xb4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	; (8000c84 <_ZL12MX_GPIO_Initv+0xb4>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <_ZL12MX_GPIO_Initv+0xb4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <_ZL12MX_GPIO_Initv+0xb4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <_ZL12MX_GPIO_Initv+0xb4>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <_ZL12MX_GPIO_Initv+0xb4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c40:	4811      	ldr	r0, [pc, #68]	; (8000c88 <_ZL12MX_GPIO_Initv+0xb8>)
 8000c42:	f000 fff3 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STOPWATCH_Pin CHIT_Pin OHIT_Pin */
  GPIO_InitStruct.Pin = STOPWATCH_Pin|CHIT_Pin|OHIT_Pin;
 8000c46:	2307      	movs	r3, #7
 8000c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <_ZL12MX_GPIO_Initv+0xbc>)
 8000c5a:	f000 fe33 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 8000c5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4619      	mov	r1, r3
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <_ZL12MX_GPIO_Initv+0xb8>)
 8000c78:	f000 fe24 	bl	80018c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020800 	.word	0x40020800

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a2e      	ldr	r2, [pc, #184]	; (8000dc4 <HAL_ADC_MspInit+0xd8>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d128      	bne.n	8000d60 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a2c      	ldr	r2, [pc, #176]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a25      	ldr	r2, [pc, #148]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	481c      	ldr	r0, [pc, #112]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d5a:	f000 fdb3 	bl	80018c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d5e:	e02c      	b.n	8000dba <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <HAL_ADC_MspInit+0xe4>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d127      	bne.n	8000dba <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da6:	2303      	movs	r3, #3
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000db6:	f000 fd85 	bl	80018c4 <HAL_GPIO_Init>
}
 8000dba:	bf00      	nop
 8000dbc:	3730      	adds	r7, #48	; 0x30
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40012000 	.word	0x40012000
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	40012100 	.word	0x40012100

08000dd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <HAL_SPI_MspInit+0x84>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d12b      	bne.n	8000e4e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_SPI_MspInit+0x88>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <HAL_SPI_MspInit+0x88>)
 8000e00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_SPI_MspInit+0x88>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_SPI_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <HAL_SPI_MspInit+0x88>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_SPI_MspInit+0x88>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e2e:	23a0      	movs	r3, #160	; 0xa0
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e3e:	2305      	movs	r3, #5
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_SPI_MspInit+0x8c>)
 8000e4a:	f000 fd3b 	bl	80018c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	; 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40013000 	.word	0x40013000
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e74:	d115      	bne.n	8000ea2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_TIM_Base_MspInit+0x48>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_TIM_Base_MspInit+0x48>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_TIM_Base_MspInit+0x48>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	201c      	movs	r0, #28
 8000e98:	f000 fcdd 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e9c:	201c      	movs	r0, #28
 8000e9e:	f000 fcf6 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a32      	ldr	r2, [pc, #200]	; (8000f98 <HAL_UART_MspInit+0xe8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12c      	bne.n	8000f2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
 8000ed6:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <HAL_UART_MspInit+0xec>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <HAL_UART_MspInit+0xec>)
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <HAL_UART_MspInit+0xec>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_UART_MspInit+0xec>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a29      	ldr	r2, [pc, #164]	; (8000f9c <HAL_UART_MspInit+0xec>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <HAL_UART_MspInit+0xec>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	481e      	ldr	r0, [pc, #120]	; (8000fa0 <HAL_UART_MspInit+0xf0>)
 8000f26:	f000 fccd 	bl	80018c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f2a:	e031      	b.n	8000f90 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <HAL_UART_MspInit+0xf4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12c      	bne.n	8000f90 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_UART_MspInit+0xec>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <HAL_UART_MspInit+0xec>)
 8000f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <HAL_UART_MspInit+0xec>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_UART_MspInit+0xec>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_UART_MspInit+0xec>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_UART_MspInit+0xec>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f80:	2307      	movs	r3, #7
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <HAL_UART_MspInit+0xf8>)
 8000f8c:	f000 fc9a 	bl	80018c4 <HAL_GPIO_Init>
}
 8000f90:	bf00      	nop
 8000f92:	3730      	adds	r7, #48	; 0x30
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40004400 	.word	0x40004400
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40004800 	.word	0x40004800
 8000fa8:	40020400 	.word	0x40020400

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 f8d0 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <TIM2_IRQHandler+0x10>)
 8001006:	f001 fbcb 	bl	80027a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000178 	.word	0x20000178

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f002 fbd2 	bl	80037ec <__errno>
 8001048:	4603      	mov	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <_sbrk+0x64>)
 8001064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20020000 	.word	0x20020000
 8001074:	00000400 	.word	0x00000400
 8001078:	20000248 	.word	0x20000248
 800107c:	20000260 	.word	0x20000260

08001080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <SystemInit+0x20>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <SystemInit+0x20>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010aa:	490e      	ldr	r1, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010ac:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c0:	4c0b      	ldr	r4, [pc, #44]	; (80010f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ce:	f7ff ffd7 	bl	8001080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d2:	f002 fb91 	bl	80037f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d6:	f7ff fafd 	bl	80006d4 <main>
  bx  lr    
 80010da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010e8:	08004d3c 	.word	0x08004d3c
  ldr r2, =_sbss
 80010ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010f0:	20000260 	.word	0x20000260

080010f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_Init+0x40>)
 8001102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_Init+0x40>)
 800110e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_Init+0x40>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 fb8d 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f808 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff fdb6 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023c00 	.word	0x40023c00

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fba5 	bl	80018aa <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001178:	f000 fb6d 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000000 	.word	0x20000000
 8001194:	20000008 	.word	0x20000008
 8001198:	20000004 	.word	0x20000004

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008
 80011c0:	2000024c 	.word	0x2000024c

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000024c 	.word	0x2000024c

080011dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e033      	b.n	800125a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fd76 	bl	8000cec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	2b00      	cmp	r3, #0
 8001218:	d118      	bne.n	800124c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001222:	f023 0302 	bic.w	r3, r3, #2
 8001226:	f043 0202 	orr.w	r2, r3, #2
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f93a 	bl	80014a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f023 0303 	bic.w	r3, r3, #3
 8001242:	f043 0201 	orr.w	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	641a      	str	r2, [r3, #64]	; 0x40
 800124a:	e001      	b.n	8001250 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1c>
 800127c:	2302      	movs	r3, #2
 800127e:	e105      	b.n	800148c <HAL_ADC_ConfigChannel+0x228>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b09      	cmp	r3, #9
 800128e:	d925      	bls.n	80012dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68d9      	ldr	r1, [r3, #12]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	3b1e      	subs	r3, #30
 80012a6:	2207      	movs	r2, #7
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43da      	mvns	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	400a      	ands	r2, r1
 80012b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68d9      	ldr	r1, [r3, #12]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	4603      	mov	r3, r0
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4403      	add	r3, r0
 80012ce:	3b1e      	subs	r3, #30
 80012d0:	409a      	lsls	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	e022      	b.n	8001322 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6919      	ldr	r1, [r3, #16]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	2207      	movs	r2, #7
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	400a      	ands	r2, r1
 80012fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6919      	ldr	r1, [r3, #16]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	4603      	mov	r3, r0
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4403      	add	r3, r0
 8001318:	409a      	lsls	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b06      	cmp	r3, #6
 8001328:	d824      	bhi.n	8001374 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	3b05      	subs	r3, #5
 800133c:	221f      	movs	r2, #31
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	400a      	ands	r2, r1
 800134a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	3b05      	subs	r3, #5
 8001366:	fa00 f203 	lsl.w	r2, r0, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
 8001372:	e04c      	b.n	800140e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d824      	bhi.n	80013c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	3b23      	subs	r3, #35	; 0x23
 800138e:	221f      	movs	r2, #31
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43da      	mvns	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	400a      	ands	r2, r1
 800139c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	3b23      	subs	r3, #35	; 0x23
 80013b8:	fa00 f203 	lsl.w	r2, r0, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
 80013c4:	e023      	b.n	800140e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b41      	subs	r3, #65	; 0x41
 80013d8:	221f      	movs	r2, #31
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	400a      	ands	r2, r1
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3b41      	subs	r3, #65	; 0x41
 8001402:	fa00 f203 	lsl.w	r2, r0, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <HAL_ADC_ConfigChannel+0x234>)
 8001410:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a21      	ldr	r2, [pc, #132]	; (800149c <HAL_ADC_ConfigChannel+0x238>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d109      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x1cc>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b12      	cmp	r3, #18
 8001422:	d105      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a19      	ldr	r2, [pc, #100]	; (800149c <HAL_ADC_ConfigChannel+0x238>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d123      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x21e>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b10      	cmp	r3, #16
 8001440:	d003      	beq.n	800144a <HAL_ADC_ConfigChannel+0x1e6>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b11      	cmp	r3, #17
 8001448:	d11b      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d111      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_ADC_ConfigChannel+0x23c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_ADC_ConfigChannel+0x240>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	0c9a      	lsrs	r2, r3, #18
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001474:	e002      	b.n	800147c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3b01      	subs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f9      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40012300 	.word	0x40012300
 800149c:	40012000 	.word	0x40012000
 80014a0:	20000000 	.word	0x20000000
 80014a4:	431bde83 	.word	0x431bde83

080014a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b0:	4b79      	ldr	r3, [pc, #484]	; (8001698 <ADC_Init+0x1f0>)
 80014b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	431a      	orrs	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	021a      	lsls	r2, r3, #8
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6899      	ldr	r1, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	4a58      	ldr	r2, [pc, #352]	; (800169c <ADC_Init+0x1f4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d022      	beq.n	8001586 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800154e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6899      	ldr	r1, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6899      	ldr	r1, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e00f      	b.n	80015a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0202 	bic.w	r2, r2, #2
 80015b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6899      	ldr	r1, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7e1b      	ldrb	r3, [r3, #24]
 80015c0:	005a      	lsls	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d01b      	beq.n	800160c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6859      	ldr	r1, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	3b01      	subs	r3, #1
 8001600:	035a      	lsls	r2, r3, #13
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	e007      	b.n	800161c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800161a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	3b01      	subs	r3, #1
 8001638:	051a      	lsls	r2, r3, #20
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6899      	ldr	r1, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800165e:	025a      	lsls	r2, r3, #9
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6899      	ldr	r1, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	029a      	lsls	r2, r3, #10
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	609a      	str	r2, [r3, #8]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40012300 	.word	0x40012300
 800169c:	0f000001 	.word	0x0f000001

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <__NVIC_EnableIRQ+0x38>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001820:	f7ff ff8e 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff29 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff3e 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff8e 	bl	8001794 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5d 	bl	8001740 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff31 	bl	8001704 <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffa2 	bl	80017fc <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e16b      	b.n	8001bb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 815a 	bne.w	8001bb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d005      	beq.n	8001916 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001912:	2b02      	cmp	r3, #2
 8001914:	d130      	bne.n	8001978 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 0201 	and.w	r2, r3, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b03      	cmp	r3, #3
 8001982:	d017      	beq.n	80019b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d123      	bne.n	8001a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3208      	adds	r2, #8
 80019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	69b9      	ldr	r1, [r7, #24]
 8001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0203 	and.w	r2, r3, #3
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80b4 	beq.w	8001bb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b60      	ldr	r3, [pc, #384]	; (8001bd0 <HAL_GPIO_Init+0x30c>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a5f      	ldr	r2, [pc, #380]	; (8001bd0 <HAL_GPIO_Init+0x30c>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <HAL_GPIO_Init+0x30c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a66:	4a5b      	ldr	r2, [pc, #364]	; (8001bd4 <HAL_GPIO_Init+0x310>)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a52      	ldr	r2, [pc, #328]	; (8001bd8 <HAL_GPIO_Init+0x314>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d02b      	beq.n	8001aea <HAL_GPIO_Init+0x226>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a51      	ldr	r2, [pc, #324]	; (8001bdc <HAL_GPIO_Init+0x318>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d025      	beq.n	8001ae6 <HAL_GPIO_Init+0x222>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a50      	ldr	r2, [pc, #320]	; (8001be0 <HAL_GPIO_Init+0x31c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d01f      	beq.n	8001ae2 <HAL_GPIO_Init+0x21e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4f      	ldr	r2, [pc, #316]	; (8001be4 <HAL_GPIO_Init+0x320>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d019      	beq.n	8001ade <HAL_GPIO_Init+0x21a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4e      	ldr	r2, [pc, #312]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d013      	beq.n	8001ada <HAL_GPIO_Init+0x216>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4d      	ldr	r2, [pc, #308]	; (8001bec <HAL_GPIO_Init+0x328>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00d      	beq.n	8001ad6 <HAL_GPIO_Init+0x212>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4c      	ldr	r2, [pc, #304]	; (8001bf0 <HAL_GPIO_Init+0x32c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d007      	beq.n	8001ad2 <HAL_GPIO_Init+0x20e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4b      	ldr	r2, [pc, #300]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d101      	bne.n	8001ace <HAL_GPIO_Init+0x20a>
 8001aca:	2307      	movs	r3, #7
 8001acc:	e00e      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ace:	2308      	movs	r3, #8
 8001ad0:	e00c      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ad2:	2306      	movs	r3, #6
 8001ad4:	e00a      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	e008      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ada:	2304      	movs	r3, #4
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001aea:	2300      	movs	r3, #0
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	f002 0203 	and.w	r2, r2, #3
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001afc:	4935      	ldr	r1, [pc, #212]	; (8001bd4 <HAL_GPIO_Init+0x310>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_GPIO_Init+0x334>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2e:	4a32      	ldr	r2, [pc, #200]	; (8001bf8 <HAL_GPIO_Init+0x334>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b34:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <HAL_GPIO_Init+0x334>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b58:	4a27      	ldr	r2, [pc, #156]	; (8001bf8 <HAL_GPIO_Init+0x334>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_GPIO_Init+0x334>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b82:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <HAL_GPIO_Init+0x334>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_GPIO_Init+0x334>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bac:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <HAL_GPIO_Init+0x334>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b0f      	cmp	r3, #15
 8001bbc:	f67f ae90 	bls.w	80018e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40021400 	.word	0x40021400
 8001bf0:	40021800 	.word	0x40021800
 8001bf4:	40021c00 	.word	0x40021c00
 8001bf8:	40013c00 	.word	0x40013c00

08001bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e001      	b.n	8001c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c48:	e003      	b.n	8001c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	041a      	lsls	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	619a      	str	r2, [r3, #24]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e267      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d075      	beq.n	8001d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c7e:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d00c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8a:	4b85      	ldr	r3, [pc, #532]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d112      	bne.n	8001cbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c96:	4b82      	ldr	r3, [pc, #520]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca2:	d10b      	bne.n	8001cbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	4b7e      	ldr	r3, [pc, #504]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d05b      	beq.n	8001d68 <HAL_RCC_OscConfig+0x108>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d157      	bne.n	8001d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e242      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d106      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x74>
 8001cc6:	4b76      	ldr	r3, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e01d      	b.n	8001d10 <HAL_RCC_OscConfig+0xb0>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x98>
 8001cde:	4b70      	ldr	r3, [pc, #448]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6f      	ldr	r2, [pc, #444]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a6c      	ldr	r2, [pc, #432]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0xb0>
 8001cf8:	4b69      	ldr	r3, [pc, #420]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a68      	ldr	r2, [pc, #416]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a65      	ldr	r2, [pc, #404]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff fa54 	bl	80011c4 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff fa50 	bl	80011c4 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e207      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	4b5b      	ldr	r3, [pc, #364]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0xc0>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff fa40 	bl	80011c4 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff fa3c 	bl	80011c4 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e1f3      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0xe8>
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d063      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d76:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00b      	beq.n	8001d9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d11c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8e:	4b44      	ldr	r3, [pc, #272]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d116      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_RCC_OscConfig+0x152>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e1c7      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	e03a      	b.n	8001e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_RCC_OscConfig+0x244>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd6:	f7ff f9f5 	bl	80011c4 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dde:	f7ff f9f1 	bl	80011c4 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1a8      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4925      	ldr	r1, [pc, #148]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
 8001e10:	e015      	b.n	8001e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e12:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <HAL_RCC_OscConfig+0x244>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f9d4 	bl	80011c4 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e20:	f7ff f9d0 	bl	80011c4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e187      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d036      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d016      	beq.n	8001e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_RCC_OscConfig+0x248>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff f9b4 	bl	80011c4 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff f9b0 	bl	80011c4 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e167      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x200>
 8001e7e:	e01b      	b.n	8001eb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_OscConfig+0x248>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7ff f99d 	bl	80011c4 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	e00e      	b.n	8001eac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f999 	bl	80011c4 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d907      	bls.n	8001eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e150      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	42470000 	.word	0x42470000
 8001ea8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eac:	4b88      	ldr	r3, [pc, #544]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1ea      	bne.n	8001e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8097 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eca:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10f      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b7d      	ldr	r3, [pc, #500]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a7c      	ldr	r2, [pc, #496]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b7a      	ldr	r3, [pc, #488]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	4b77      	ldr	r3, [pc, #476]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f02:	4b74      	ldr	r3, [pc, #464]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a73      	ldr	r2, [pc, #460]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff f959 	bl	80011c4 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7ff f955 	bl	80011c4 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e10c      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x2ea>
 8001f3c:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	4a63      	ldr	r2, [pc, #396]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70
 8001f48:	e01c      	b.n	8001f84 <HAL_RCC_OscConfig+0x324>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x30c>
 8001f52:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a5e      	ldr	r2, [pc, #376]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a5b      	ldr	r2, [pc, #364]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0x324>
 8001f6c:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	4a57      	ldr	r2, [pc, #348]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	6713      	str	r3, [r2, #112]	; 0x70
 8001f78:	4b55      	ldr	r3, [pc, #340]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7c:	4a54      	ldr	r2, [pc, #336]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	f023 0304 	bic.w	r3, r3, #4
 8001f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d015      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7ff f91a 	bl	80011c4 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f94:	f7ff f916 	bl	80011c4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0cb      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001faa:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0ee      	beq.n	8001f94 <HAL_RCC_OscConfig+0x334>
 8001fb6:	e014      	b.n	8001fe2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7ff f904 	bl	80011c4 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7ff f900 	bl	80011c4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e0b5      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1ee      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d105      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe8:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	4a38      	ldr	r2, [pc, #224]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80a1 	beq.w	8002140 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ffe:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d05c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d141      	bne.n	8002096 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <HAL_RCC_OscConfig+0x478>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff f8d4 	bl	80011c4 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7ff f8d0 	bl	80011c4 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e087      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	019b      	lsls	r3, r3, #6
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	085b      	lsrs	r3, r3, #1
 8002056:	3b01      	subs	r3, #1
 8002058:	041b      	lsls	r3, r3, #16
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	491b      	ldr	r1, [pc, #108]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_RCC_OscConfig+0x478>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7ff f8a9 	bl	80011c4 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002076:	f7ff f8a5 	bl	80011c4 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e05c      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x416>
 8002094:	e054      	b.n	8002140 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_RCC_OscConfig+0x478>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff f892 	bl	80011c4 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7ff f88e 	bl	80011c4 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e045      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x444>
 80020c2:	e03d      	b.n	8002140 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e038      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40007000 	.word	0x40007000
 80020d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_RCC_OscConfig+0x4ec>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d028      	beq.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d121      	bne.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d11a      	bne.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800210c:	4013      	ands	r3, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002112:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002114:	4293      	cmp	r3, r2
 8002116:	d111      	bne.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	085b      	lsrs	r3, r3, #1
 8002124:	3b01      	subs	r3, #1
 8002126:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d107      	bne.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800

08002150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0cc      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002164:	4b68      	ldr	r3, [pc, #416]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d90c      	bls.n	800218c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b65      	ldr	r3, [pc, #404]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0b8      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a4:	4b59      	ldr	r3, [pc, #356]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021bc:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4a52      	ldr	r2, [pc, #328]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	494d      	ldr	r1, [pc, #308]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d044      	beq.n	8002270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d119      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e07f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d003      	beq.n	800220e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800220a:	2b03      	cmp	r3, #3
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220e:	4b3f      	ldr	r3, [pc, #252]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221e:	4b3b      	ldr	r3, [pc, #236]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e067      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222e:	4b37      	ldr	r3, [pc, #220]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f023 0203 	bic.w	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4934      	ldr	r1, [pc, #208]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002240:	f7fe ffc0 	bl	80011c4 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	e00a      	b.n	800225e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7fe ffbc 	bl	80011c4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e04f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 020c 	and.w	r2, r3, #12
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	429a      	cmp	r2, r3
 800226e:	d1eb      	bne.n	8002248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d20c      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e032      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4916      	ldr	r1, [pc, #88]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	490e      	ldr	r1, [pc, #56]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022d6:	f000 f821 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	490a      	ldr	r1, [pc, #40]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	5ccb      	ldrb	r3, [r1, r3]
 80022ea:	fa22 f303 	lsr.w	r3, r2, r3
 80022ee:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1c8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe ff20 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023c00 	.word	0x40023c00
 800230c:	40023800 	.word	0x40023800
 8002310:	08004b64 	.word	0x08004b64
 8002314:	20000000 	.word	0x20000000
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002320:	b090      	sub	sp, #64	; 0x40
 8002322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	637b      	str	r3, [r7, #52]	; 0x34
 8002328:	2300      	movs	r3, #0
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800232c:	2300      	movs	r3, #0
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002334:	4b59      	ldr	r3, [pc, #356]	; (800249c <HAL_RCC_GetSysClockFreq+0x180>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d00d      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x40>
 8002340:	2b08      	cmp	r3, #8
 8002342:	f200 80a1 	bhi.w	8002488 <HAL_RCC_GetSysClockFreq+0x16c>
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x34>
 800234a:	2b04      	cmp	r3, #4
 800234c:	d003      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x3a>
 800234e:	e09b      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002350:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002352:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002354:	e09b      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002356:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002358:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800235a:	e098      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800235c:	4b4f      	ldr	r3, [pc, #316]	; (800249c <HAL_RCC_GetSysClockFreq+0x180>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002364:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002366:	4b4d      	ldr	r3, [pc, #308]	; (800249c <HAL_RCC_GetSysClockFreq+0x180>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d028      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_RCC_GetSysClockFreq+0x180>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	2200      	movs	r2, #0
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	627a      	str	r2, [r7, #36]	; 0x24
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002384:	2100      	movs	r1, #0
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002388:	fb03 f201 	mul.w	r2, r3, r1
 800238c:	2300      	movs	r3, #0
 800238e:	fb00 f303 	mul.w	r3, r0, r3
 8002392:	4413      	add	r3, r2
 8002394:	4a43      	ldr	r2, [pc, #268]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002396:	fba0 1202 	umull	r1, r2, r0, r2
 800239a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800239c:	460a      	mov	r2, r1
 800239e:	62ba      	str	r2, [r7, #40]	; 0x28
 80023a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a2:	4413      	add	r3, r2
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a8:	2200      	movs	r2, #0
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	61fa      	str	r2, [r7, #28]
 80023ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023b6:	f7fd ff63 	bl	8000280 <__aeabi_uldivmod>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4613      	mov	r3, r2
 80023c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c2:	e053      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <HAL_RCC_GetSysClockFreq+0x180>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	2200      	movs	r2, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	617a      	str	r2, [r7, #20]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023d6:	f04f 0b00 	mov.w	fp, #0
 80023da:	4652      	mov	r2, sl
 80023dc:	465b      	mov	r3, fp
 80023de:	f04f 0000 	mov.w	r0, #0
 80023e2:	f04f 0100 	mov.w	r1, #0
 80023e6:	0159      	lsls	r1, r3, #5
 80023e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ec:	0150      	lsls	r0, r2, #5
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	ebb2 080a 	subs.w	r8, r2, sl
 80023f6:	eb63 090b 	sbc.w	r9, r3, fp
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002406:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800240a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800240e:	ebb2 0408 	subs.w	r4, r2, r8
 8002412:	eb63 0509 	sbc.w	r5, r3, r9
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	00eb      	lsls	r3, r5, #3
 8002420:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002424:	00e2      	lsls	r2, r4, #3
 8002426:	4614      	mov	r4, r2
 8002428:	461d      	mov	r5, r3
 800242a:	eb14 030a 	adds.w	r3, r4, sl
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	eb45 030b 	adc.w	r3, r5, fp
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002442:	4629      	mov	r1, r5
 8002444:	028b      	lsls	r3, r1, #10
 8002446:	4621      	mov	r1, r4
 8002448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800244c:	4621      	mov	r1, r4
 800244e:	028a      	lsls	r2, r1, #10
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	2200      	movs	r2, #0
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	60fa      	str	r2, [r7, #12]
 800245c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002460:	f7fd ff0e 	bl	8000280 <__aeabi_uldivmod>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4613      	mov	r3, r2
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_GetSysClockFreq+0x180>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	3301      	adds	r3, #1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800247c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002486:	e002      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800248a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800248c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002490:	4618      	mov	r0, r3
 8002492:	3740      	adds	r7, #64	; 0x40
 8002494:	46bd      	mov	sp, r7
 8002496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	00f42400 	.word	0x00f42400
 80024a4:	017d7840 	.word	0x017d7840

080024a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000000 	.word	0x20000000

080024c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024c4:	f7ff fff0 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0a9b      	lsrs	r3, r3, #10
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	08004b74 	.word	0x08004b74

080024e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024ec:	f7ff ffdc 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0b5b      	lsrs	r3, r3, #13
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4903      	ldr	r1, [pc, #12]	; (800250c <HAL_RCC_GetPCLK2Freq+0x24>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	08004b74 	.word	0x08004b74

08002510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07b      	b.n	800261a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	2b00      	cmp	r3, #0
 8002528:	d108      	bne.n	800253c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002532:	d009      	beq.n	8002548 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
 800253a:	e005      	b.n	8002548 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe fc36 	bl	8000dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800257e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025cc:	ea42 0103 	orr.w	r1, r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	f003 0104 	and.w	r1, r3, #4
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	f003 0210 	and.w	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002608:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e041      	b.n	80026b8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d106      	bne.n	800264e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7fe fc0b 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2202      	movs	r2, #2
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
 800265e:	4619      	mov	r1, r3
 8002660:	4610      	mov	r0, r2
 8002662:	f000 fa95 	bl	8002b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d001      	beq.n	80026d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e04e      	b.n	8002776 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a23      	ldr	r2, [pc, #140]	; (8002784 <HAL_TIM_Base_Start_IT+0xc4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d022      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002702:	d01d      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <HAL_TIM_Base_Start_IT+0xc8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d018      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1e      	ldr	r2, [pc, #120]	; (800278c <HAL_TIM_Base_Start_IT+0xcc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <HAL_TIM_Base_Start_IT+0xd0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00e      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_TIM_Base_Start_IT+0xd4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d009      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a19      	ldr	r2, [pc, #100]	; (8002798 <HAL_TIM_Base_Start_IT+0xd8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d004      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_TIM_Base_Start_IT+0xdc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d111      	bne.n	8002764 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b06      	cmp	r3, #6
 8002750:	d010      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0201 	orr.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002762:	e007      	b.n	8002774 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40010000 	.word	0x40010000
 8002788:	40000400 	.word	0x40000400
 800278c:	40000800 	.word	0x40000800
 8002790:	40000c00 	.word	0x40000c00
 8002794:	40010400 	.word	0x40010400
 8002798:	40014000 	.word	0x40014000
 800279c:	40001800 	.word	0x40001800

080027a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d122      	bne.n	80027fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d11b      	bne.n	80027fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0202 	mvn.w	r2, #2
 80027cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f9b5 	bl	8002b52 <HAL_TIM_IC_CaptureCallback>
 80027e8:	e005      	b.n	80027f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f9a7 	bl	8002b3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f9b8 	bl	8002b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b04      	cmp	r3, #4
 8002808:	d122      	bne.n	8002850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b04      	cmp	r3, #4
 8002816:	d11b      	bne.n	8002850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0204 	mvn.w	r2, #4
 8002820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f98b 	bl	8002b52 <HAL_TIM_IC_CaptureCallback>
 800283c:	e005      	b.n	800284a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f97d 	bl	8002b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f98e 	bl	8002b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b08      	cmp	r3, #8
 800285c:	d122      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b08      	cmp	r3, #8
 800286a:	d11b      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0208 	mvn.w	r2, #8
 8002874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2204      	movs	r2, #4
 800287a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f961 	bl	8002b52 <HAL_TIM_IC_CaptureCallback>
 8002890:	e005      	b.n	800289e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f953 	bl	8002b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f964 	bl	8002b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b10      	cmp	r3, #16
 80028b0:	d122      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d11b      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0210 	mvn.w	r2, #16
 80028c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2208      	movs	r2, #8
 80028ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f937 	bl	8002b52 <HAL_TIM_IC_CaptureCallback>
 80028e4:	e005      	b.n	80028f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f929 	bl	8002b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f93a 	bl	8002b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d10e      	bne.n	8002924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0201 	mvn.w	r2, #1
 800291c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fd fece 	bl	80006c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b80      	cmp	r3, #128	; 0x80
 8002930:	d10e      	bne.n	8002950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d107      	bne.n	8002950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fae0 	bl	8002f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295a:	2b40      	cmp	r3, #64	; 0x40
 800295c:	d10e      	bne.n	800297c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002968:	2b40      	cmp	r3, #64	; 0x40
 800296a:	d107      	bne.n	800297c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f8ff 	bl	8002b7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b20      	cmp	r3, #32
 8002988:	d10e      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b20      	cmp	r3, #32
 8002996:	d107      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0220 	mvn.w	r2, #32
 80029a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 faaa 	bl	8002efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_TIM_ConfigClockSource+0x1c>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e0b4      	b.n	8002b36 <HAL_TIM_ConfigClockSource+0x186>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a04:	d03e      	beq.n	8002a84 <HAL_TIM_ConfigClockSource+0xd4>
 8002a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0a:	f200 8087 	bhi.w	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a12:	f000 8086 	beq.w	8002b22 <HAL_TIM_ConfigClockSource+0x172>
 8002a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1a:	d87f      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a1c:	2b70      	cmp	r3, #112	; 0x70
 8002a1e:	d01a      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0xa6>
 8002a20:	2b70      	cmp	r3, #112	; 0x70
 8002a22:	d87b      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a24:	2b60      	cmp	r3, #96	; 0x60
 8002a26:	d050      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x11a>
 8002a28:	2b60      	cmp	r3, #96	; 0x60
 8002a2a:	d877      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a2c:	2b50      	cmp	r3, #80	; 0x50
 8002a2e:	d03c      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0xfa>
 8002a30:	2b50      	cmp	r3, #80	; 0x50
 8002a32:	d873      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d058      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0x13a>
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d86f      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a3c:	2b30      	cmp	r3, #48	; 0x30
 8002a3e:	d064      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x15a>
 8002a40:	2b30      	cmp	r3, #48	; 0x30
 8002a42:	d86b      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	d060      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x15a>
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d867      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d05c      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x15a>
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d05a      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x15a>
 8002a54:	e062      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6899      	ldr	r1, [r3, #8]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f000 f9ad 	bl	8002dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	609a      	str	r2, [r3, #8]
      break;
 8002a82:	e04f      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6899      	ldr	r1, [r3, #8]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f000 f996 	bl	8002dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aa6:	609a      	str	r2, [r3, #8]
      break;
 8002aa8:	e03c      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f000 f90a 	bl	8002cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2150      	movs	r1, #80	; 0x50
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 f963 	bl	8002d8e <TIM_ITRx_SetConfig>
      break;
 8002ac8:	e02c      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f000 f929 	bl	8002d2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2160      	movs	r1, #96	; 0x60
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f953 	bl	8002d8e <TIM_ITRx_SetConfig>
      break;
 8002ae8:	e01c      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f000 f8ea 	bl	8002cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2140      	movs	r1, #64	; 0x40
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f943 	bl	8002d8e <TIM_ITRx_SetConfig>
      break;
 8002b08:	e00c      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f000 f93a 	bl	8002d8e <TIM_ITRx_SetConfig>
      break;
 8002b1a:	e003      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b20:	e000      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a40      	ldr	r2, [pc, #256]	; (8002ca4 <TIM_Base_SetConfig+0x114>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d013      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bae:	d00f      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a3d      	ldr	r2, [pc, #244]	; (8002ca8 <TIM_Base_SetConfig+0x118>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00b      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a3c      	ldr	r2, [pc, #240]	; (8002cac <TIM_Base_SetConfig+0x11c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d007      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a3b      	ldr	r2, [pc, #236]	; (8002cb0 <TIM_Base_SetConfig+0x120>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a3a      	ldr	r2, [pc, #232]	; (8002cb4 <TIM_Base_SetConfig+0x124>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d108      	bne.n	8002be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a2f      	ldr	r2, [pc, #188]	; (8002ca4 <TIM_Base_SetConfig+0x114>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d02b      	beq.n	8002c42 <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d027      	beq.n	8002c42 <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2c      	ldr	r2, [pc, #176]	; (8002ca8 <TIM_Base_SetConfig+0x118>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d023      	beq.n	8002c42 <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a2b      	ldr	r2, [pc, #172]	; (8002cac <TIM_Base_SetConfig+0x11c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d01f      	beq.n	8002c42 <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a2a      	ldr	r2, [pc, #168]	; (8002cb0 <TIM_Base_SetConfig+0x120>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01b      	beq.n	8002c42 <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <TIM_Base_SetConfig+0x124>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d017      	beq.n	8002c42 <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a28      	ldr	r2, [pc, #160]	; (8002cb8 <TIM_Base_SetConfig+0x128>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d013      	beq.n	8002c42 <TIM_Base_SetConfig+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a27      	ldr	r2, [pc, #156]	; (8002cbc <TIM_Base_SetConfig+0x12c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00f      	beq.n	8002c42 <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a26      	ldr	r2, [pc, #152]	; (8002cc0 <TIM_Base_SetConfig+0x130>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00b      	beq.n	8002c42 <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a25      	ldr	r2, [pc, #148]	; (8002cc4 <TIM_Base_SetConfig+0x134>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d007      	beq.n	8002c42 <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a24      	ldr	r2, [pc, #144]	; (8002cc8 <TIM_Base_SetConfig+0x138>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d003      	beq.n	8002c42 <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a23      	ldr	r2, [pc, #140]	; (8002ccc <TIM_Base_SetConfig+0x13c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d108      	bne.n	8002c54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <TIM_Base_SetConfig+0x114>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d003      	beq.n	8002c88 <TIM_Base_SetConfig+0xf8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a0c      	ldr	r2, [pc, #48]	; (8002cb4 <TIM_Base_SetConfig+0x124>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d103      	bne.n	8002c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	615a      	str	r2, [r3, #20]
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800
 8002cb0:	40000c00 	.word	0x40000c00
 8002cb4:	40010400 	.word	0x40010400
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	40014400 	.word	0x40014400
 8002cc0:	40014800 	.word	0x40014800
 8002cc4:	40001800 	.word	0x40001800
 8002cc8:	40001c00 	.word	0x40001c00
 8002ccc:	40002000 	.word	0x40002000

08002cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f023 0201 	bic.w	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f023 030a 	bic.w	r3, r3, #10
 8002d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b087      	sub	sp, #28
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	f023 0210 	bic.w	r2, r3, #16
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	031b      	lsls	r3, r3, #12
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f043 0307 	orr.w	r3, r3, #7
 8002db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	609a      	str	r2, [r3, #8]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	021a      	lsls	r2, r3, #8
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	609a      	str	r2, [r3, #8]
}
 8002df8:	bf00      	nop
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e05a      	b.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a21      	ldr	r2, [pc, #132]	; (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d022      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e68:	d01d      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d018      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1b      	ldr	r2, [pc, #108]	; (8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1a      	ldr	r2, [pc, #104]	; (8002eec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00e      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d004      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40010000 	.word	0x40010000
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40000800 	.word	0x40000800
 8002eec:	40000c00 	.word	0x40000c00
 8002ef0:	40010400 	.word	0x40010400
 8002ef4:	40014000 	.word	0x40014000
 8002ef8:	40001800 	.word	0x40001800

08002efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e03f      	b.n	8002fb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fd ffb0 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2224      	movs	r2, #36	; 0x24
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f9cb 	bl	8003304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b08a      	sub	sp, #40	; 0x28
 8002fc2:	af02      	add	r7, sp, #8
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d17c      	bne.n	80030d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_UART_Transmit+0x2c>
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e075      	b.n	80030da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_UART_Transmit+0x3e>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e06e      	b.n	80030da <HAL_UART_Transmit+0x11c>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2221      	movs	r2, #33	; 0x21
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003012:	f7fe f8d7 	bl	80011c4 <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302c:	d108      	bne.n	8003040 <HAL_UART_Transmit+0x82>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e003      	b.n	8003048 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003050:	e02a      	b.n	80030a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	2180      	movs	r1, #128	; 0x80
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f8e2 	bl	8003226 <UART_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e036      	b.n	80030da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10b      	bne.n	800308a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003080:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	3302      	adds	r3, #2
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	e007      	b.n	800309a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	781a      	ldrb	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3301      	adds	r3, #1
 8003098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1cf      	bne.n	8003052 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2200      	movs	r2, #0
 80030ba:	2140      	movs	r1, #64	; 0x40
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f8b2 	bl	8003226 <UART_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e006      	b.n	80030da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e000      	b.n	80030da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
  }
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b08a      	sub	sp, #40	; 0x28
 80030e6:	af02      	add	r7, sp, #8
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	f040 808c 	bne.w	800321c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_UART_Receive+0x2e>
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e084      	b.n	800321e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_UART_Receive+0x40>
 800311e:	2302      	movs	r3, #2
 8003120:	e07d      	b.n	800321e <HAL_UART_Receive+0x13c>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2222      	movs	r2, #34	; 0x22
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800313e:	f7fe f841 	bl	80011c4 <HAL_GetTick>
 8003142:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	88fa      	ldrh	r2, [r7, #6]
 8003148:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	88fa      	ldrh	r2, [r7, #6]
 800314e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003158:	d108      	bne.n	800316c <HAL_UART_Receive+0x8a>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d104      	bne.n	800316c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	e003      	b.n	8003174 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800317c:	e043      	b.n	8003206 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	2120      	movs	r1, #32
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f84c 	bl	8003226 <UART_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e042      	b.n	800321e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10c      	bne.n	80031b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	3302      	adds	r3, #2
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	e01f      	b.n	80031f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c0:	d007      	beq.n	80031d2 <HAL_UART_Receive+0xf0>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <HAL_UART_Receive+0xfe>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e008      	b.n	80031f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3301      	adds	r3, #1
 80031f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1b6      	bne.n	800317e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e000      	b.n	800321e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b090      	sub	sp, #64	; 0x40
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	4613      	mov	r3, r2
 8003234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003236:	e050      	b.n	80032da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800323e:	d04c      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <UART_WaitOnFlagUntilTimeout+0x30>
 8003246:	f7fd ffbd 	bl	80011c4 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003252:	429a      	cmp	r2, r3
 8003254:	d241      	bcs.n	80032da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800326c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	330c      	adds	r3, #12
 8003274:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003276:	637a      	str	r2, [r7, #52]	; 0x34
 8003278:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800327c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e5      	bne.n	8003256 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3314      	adds	r3, #20
 8003290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	613b      	str	r3, [r7, #16]
   return(result);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3314      	adds	r3, #20
 80032a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032aa:	623a      	str	r2, [r7, #32]
 80032ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	69f9      	ldr	r1, [r7, #28]
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e5      	bne.n	800328a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e00f      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4013      	ands	r3, r2
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d09f      	beq.n	8003238 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3740      	adds	r7, #64	; 0x40
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003308:	b0c0      	sub	sp, #256	; 0x100
 800330a:	af00      	add	r7, sp, #0
 800330c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	68d9      	ldr	r1, [r3, #12]
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	ea40 0301 	orr.w	r3, r0, r1
 800332c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	431a      	orrs	r2, r3
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	431a      	orrs	r2, r3
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800335c:	f021 010c 	bic.w	r1, r1, #12
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800336a:	430b      	orrs	r3, r1
 800336c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337e:	6999      	ldr	r1, [r3, #24]
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	ea40 0301 	orr.w	r3, r0, r1
 800338a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b8f      	ldr	r3, [pc, #572]	; (80035d0 <UART_SetConfig+0x2cc>)
 8003394:	429a      	cmp	r2, r3
 8003396:	d005      	beq.n	80033a4 <UART_SetConfig+0xa0>
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b8d      	ldr	r3, [pc, #564]	; (80035d4 <UART_SetConfig+0x2d0>)
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d104      	bne.n	80033ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033a4:	f7ff f8a0 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 80033a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033ac:	e003      	b.n	80033b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ae:	f7ff f887 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 80033b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c0:	f040 810c 	bne.w	80035dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033d6:	4622      	mov	r2, r4
 80033d8:	462b      	mov	r3, r5
 80033da:	1891      	adds	r1, r2, r2
 80033dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80033de:	415b      	adcs	r3, r3
 80033e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033e6:	4621      	mov	r1, r4
 80033e8:	eb12 0801 	adds.w	r8, r2, r1
 80033ec:	4629      	mov	r1, r5
 80033ee:	eb43 0901 	adc.w	r9, r3, r1
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003406:	4690      	mov	r8, r2
 8003408:	4699      	mov	r9, r3
 800340a:	4623      	mov	r3, r4
 800340c:	eb18 0303 	adds.w	r3, r8, r3
 8003410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003414:	462b      	mov	r3, r5
 8003416:	eb49 0303 	adc.w	r3, r9, r3
 800341a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800342a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800342e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003432:	460b      	mov	r3, r1
 8003434:	18db      	adds	r3, r3, r3
 8003436:	653b      	str	r3, [r7, #80]	; 0x50
 8003438:	4613      	mov	r3, r2
 800343a:	eb42 0303 	adc.w	r3, r2, r3
 800343e:	657b      	str	r3, [r7, #84]	; 0x54
 8003440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003444:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003448:	f7fc ff1a 	bl	8000280 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4b61      	ldr	r3, [pc, #388]	; (80035d8 <UART_SetConfig+0x2d4>)
 8003452:	fba3 2302 	umull	r2, r3, r3, r2
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	011c      	lsls	r4, r3, #4
 800345a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003464:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003468:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800346c:	4642      	mov	r2, r8
 800346e:	464b      	mov	r3, r9
 8003470:	1891      	adds	r1, r2, r2
 8003472:	64b9      	str	r1, [r7, #72]	; 0x48
 8003474:	415b      	adcs	r3, r3
 8003476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003478:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800347c:	4641      	mov	r1, r8
 800347e:	eb12 0a01 	adds.w	sl, r2, r1
 8003482:	4649      	mov	r1, r9
 8003484:	eb43 0b01 	adc.w	fp, r3, r1
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003494:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800349c:	4692      	mov	sl, r2
 800349e:	469b      	mov	fp, r3
 80034a0:	4643      	mov	r3, r8
 80034a2:	eb1a 0303 	adds.w	r3, sl, r3
 80034a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034aa:	464b      	mov	r3, r9
 80034ac:	eb4b 0303 	adc.w	r3, fp, r3
 80034b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034c8:	460b      	mov	r3, r1
 80034ca:	18db      	adds	r3, r3, r3
 80034cc:	643b      	str	r3, [r7, #64]	; 0x40
 80034ce:	4613      	mov	r3, r2
 80034d0:	eb42 0303 	adc.w	r3, r2, r3
 80034d4:	647b      	str	r3, [r7, #68]	; 0x44
 80034d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034de:	f7fc fecf 	bl	8000280 <__aeabi_uldivmod>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4611      	mov	r1, r2
 80034e8:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <UART_SetConfig+0x2d4>)
 80034ea:	fba3 2301 	umull	r2, r3, r3, r1
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2264      	movs	r2, #100	; 0x64
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	1acb      	subs	r3, r1, r3
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034fe:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <UART_SetConfig+0x2d4>)
 8003500:	fba3 2302 	umull	r2, r3, r3, r2
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800350c:	441c      	add	r4, r3
 800350e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003512:	2200      	movs	r2, #0
 8003514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003518:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800351c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003520:	4642      	mov	r2, r8
 8003522:	464b      	mov	r3, r9
 8003524:	1891      	adds	r1, r2, r2
 8003526:	63b9      	str	r1, [r7, #56]	; 0x38
 8003528:	415b      	adcs	r3, r3
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003530:	4641      	mov	r1, r8
 8003532:	1851      	adds	r1, r2, r1
 8003534:	6339      	str	r1, [r7, #48]	; 0x30
 8003536:	4649      	mov	r1, r9
 8003538:	414b      	adcs	r3, r1
 800353a:	637b      	str	r3, [r7, #52]	; 0x34
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003548:	4659      	mov	r1, fp
 800354a:	00cb      	lsls	r3, r1, #3
 800354c:	4651      	mov	r1, sl
 800354e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003552:	4651      	mov	r1, sl
 8003554:	00ca      	lsls	r2, r1, #3
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	4603      	mov	r3, r0
 800355c:	4642      	mov	r2, r8
 800355e:	189b      	adds	r3, r3, r2
 8003560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003564:	464b      	mov	r3, r9
 8003566:	460a      	mov	r2, r1
 8003568:	eb42 0303 	adc.w	r3, r2, r3
 800356c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800357c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003580:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003584:	460b      	mov	r3, r1
 8003586:	18db      	adds	r3, r3, r3
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
 800358a:	4613      	mov	r3, r2
 800358c:	eb42 0303 	adc.w	r3, r2, r3
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003596:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800359a:	f7fc fe71 	bl	8000280 <__aeabi_uldivmod>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <UART_SetConfig+0x2d4>)
 80035a4:	fba3 1302 	umull	r1, r3, r3, r2
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	2164      	movs	r1, #100	; 0x64
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	3332      	adds	r3, #50	; 0x32
 80035b6:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <UART_SetConfig+0x2d4>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	f003 0207 	and.w	r2, r3, #7
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4422      	add	r2, r4
 80035ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035cc:	e105      	b.n	80037da <UART_SetConfig+0x4d6>
 80035ce:	bf00      	nop
 80035d0:	40011000 	.word	0x40011000
 80035d4:	40011400 	.word	0x40011400
 80035d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e0:	2200      	movs	r2, #0
 80035e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035ee:	4642      	mov	r2, r8
 80035f0:	464b      	mov	r3, r9
 80035f2:	1891      	adds	r1, r2, r2
 80035f4:	6239      	str	r1, [r7, #32]
 80035f6:	415b      	adcs	r3, r3
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035fe:	4641      	mov	r1, r8
 8003600:	1854      	adds	r4, r2, r1
 8003602:	4649      	mov	r1, r9
 8003604:	eb43 0501 	adc.w	r5, r3, r1
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	00eb      	lsls	r3, r5, #3
 8003612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003616:	00e2      	lsls	r2, r4, #3
 8003618:	4614      	mov	r4, r2
 800361a:	461d      	mov	r5, r3
 800361c:	4643      	mov	r3, r8
 800361e:	18e3      	adds	r3, r4, r3
 8003620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003624:	464b      	mov	r3, r9
 8003626:	eb45 0303 	adc.w	r3, r5, r3
 800362a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800363a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800364a:	4629      	mov	r1, r5
 800364c:	008b      	lsls	r3, r1, #2
 800364e:	4621      	mov	r1, r4
 8003650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003654:	4621      	mov	r1, r4
 8003656:	008a      	lsls	r2, r1, #2
 8003658:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800365c:	f7fc fe10 	bl	8000280 <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4b60      	ldr	r3, [pc, #384]	; (80037e8 <UART_SetConfig+0x4e4>)
 8003666:	fba3 2302 	umull	r2, r3, r3, r2
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	011c      	lsls	r4, r3, #4
 800366e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003672:	2200      	movs	r2, #0
 8003674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800367c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003680:	4642      	mov	r2, r8
 8003682:	464b      	mov	r3, r9
 8003684:	1891      	adds	r1, r2, r2
 8003686:	61b9      	str	r1, [r7, #24]
 8003688:	415b      	adcs	r3, r3
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003690:	4641      	mov	r1, r8
 8003692:	1851      	adds	r1, r2, r1
 8003694:	6139      	str	r1, [r7, #16]
 8003696:	4649      	mov	r1, r9
 8003698:	414b      	adcs	r3, r1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a8:	4659      	mov	r1, fp
 80036aa:	00cb      	lsls	r3, r1, #3
 80036ac:	4651      	mov	r1, sl
 80036ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036b2:	4651      	mov	r1, sl
 80036b4:	00ca      	lsls	r2, r1, #3
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	4603      	mov	r3, r0
 80036bc:	4642      	mov	r2, r8
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036c4:	464b      	mov	r3, r9
 80036c6:	460a      	mov	r2, r1
 80036c8:	eb42 0303 	adc.w	r3, r2, r3
 80036cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80036da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036e8:	4649      	mov	r1, r9
 80036ea:	008b      	lsls	r3, r1, #2
 80036ec:	4641      	mov	r1, r8
 80036ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036f2:	4641      	mov	r1, r8
 80036f4:	008a      	lsls	r2, r1, #2
 80036f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036fa:	f7fc fdc1 	bl	8000280 <__aeabi_uldivmod>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <UART_SetConfig+0x4e4>)
 8003704:	fba3 1302 	umull	r1, r3, r3, r2
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	2164      	movs	r1, #100	; 0x64
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	3332      	adds	r3, #50	; 0x32
 8003716:	4a34      	ldr	r2, [pc, #208]	; (80037e8 <UART_SetConfig+0x4e4>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003722:	441c      	add	r4, r3
 8003724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003728:	2200      	movs	r2, #0
 800372a:	673b      	str	r3, [r7, #112]	; 0x70
 800372c:	677a      	str	r2, [r7, #116]	; 0x74
 800372e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003732:	4642      	mov	r2, r8
 8003734:	464b      	mov	r3, r9
 8003736:	1891      	adds	r1, r2, r2
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	415b      	adcs	r3, r3
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003742:	4641      	mov	r1, r8
 8003744:	1851      	adds	r1, r2, r1
 8003746:	6039      	str	r1, [r7, #0]
 8003748:	4649      	mov	r1, r9
 800374a:	414b      	adcs	r3, r1
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800375a:	4659      	mov	r1, fp
 800375c:	00cb      	lsls	r3, r1, #3
 800375e:	4651      	mov	r1, sl
 8003760:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003764:	4651      	mov	r1, sl
 8003766:	00ca      	lsls	r2, r1, #3
 8003768:	4610      	mov	r0, r2
 800376a:	4619      	mov	r1, r3
 800376c:	4603      	mov	r3, r0
 800376e:	4642      	mov	r2, r8
 8003770:	189b      	adds	r3, r3, r2
 8003772:	66bb      	str	r3, [r7, #104]	; 0x68
 8003774:	464b      	mov	r3, r9
 8003776:	460a      	mov	r2, r1
 8003778:	eb42 0303 	adc.w	r3, r2, r3
 800377c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	663b      	str	r3, [r7, #96]	; 0x60
 8003788:	667a      	str	r2, [r7, #100]	; 0x64
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003796:	4649      	mov	r1, r9
 8003798:	008b      	lsls	r3, r1, #2
 800379a:	4641      	mov	r1, r8
 800379c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037a0:	4641      	mov	r1, r8
 80037a2:	008a      	lsls	r2, r1, #2
 80037a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037a8:	f7fc fd6a 	bl	8000280 <__aeabi_uldivmod>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <UART_SetConfig+0x4e4>)
 80037b2:	fba3 1302 	umull	r1, r3, r3, r2
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	2164      	movs	r1, #100	; 0x64
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	3332      	adds	r3, #50	; 0x32
 80037c4:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <UART_SetConfig+0x4e4>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	f003 020f 	and.w	r2, r3, #15
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4422      	add	r2, r4
 80037d8:	609a      	str	r2, [r3, #8]
}
 80037da:	bf00      	nop
 80037dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037e0:	46bd      	mov	sp, r7
 80037e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e6:	bf00      	nop
 80037e8:	51eb851f 	.word	0x51eb851f

080037ec <__errno>:
 80037ec:	4b01      	ldr	r3, [pc, #4]	; (80037f4 <__errno+0x8>)
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	2000000c 	.word	0x2000000c

080037f8 <__libc_init_array>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	4d0d      	ldr	r5, [pc, #52]	; (8003830 <__libc_init_array+0x38>)
 80037fc:	4c0d      	ldr	r4, [pc, #52]	; (8003834 <__libc_init_array+0x3c>)
 80037fe:	1b64      	subs	r4, r4, r5
 8003800:	10a4      	asrs	r4, r4, #2
 8003802:	2600      	movs	r6, #0
 8003804:	42a6      	cmp	r6, r4
 8003806:	d109      	bne.n	800381c <__libc_init_array+0x24>
 8003808:	4d0b      	ldr	r5, [pc, #44]	; (8003838 <__libc_init_array+0x40>)
 800380a:	4c0c      	ldr	r4, [pc, #48]	; (800383c <__libc_init_array+0x44>)
 800380c:	f001 f94a 	bl	8004aa4 <_init>
 8003810:	1b64      	subs	r4, r4, r5
 8003812:	10a4      	asrs	r4, r4, #2
 8003814:	2600      	movs	r6, #0
 8003816:	42a6      	cmp	r6, r4
 8003818:	d105      	bne.n	8003826 <__libc_init_array+0x2e>
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003820:	4798      	blx	r3
 8003822:	3601      	adds	r6, #1
 8003824:	e7ee      	b.n	8003804 <__libc_init_array+0xc>
 8003826:	f855 3b04 	ldr.w	r3, [r5], #4
 800382a:	4798      	blx	r3
 800382c:	3601      	adds	r6, #1
 800382e:	e7f2      	b.n	8003816 <__libc_init_array+0x1e>
 8003830:	08004d34 	.word	0x08004d34
 8003834:	08004d34 	.word	0x08004d34
 8003838:	08004d34 	.word	0x08004d34
 800383c:	08004d38 	.word	0x08004d38

08003840 <memset>:
 8003840:	4402      	add	r2, r0
 8003842:	4603      	mov	r3, r0
 8003844:	4293      	cmp	r3, r2
 8003846:	d100      	bne.n	800384a <memset+0xa>
 8003848:	4770      	bx	lr
 800384a:	f803 1b01 	strb.w	r1, [r3], #1
 800384e:	e7f9      	b.n	8003844 <memset+0x4>

08003850 <siprintf>:
 8003850:	b40e      	push	{r1, r2, r3}
 8003852:	b500      	push	{lr}
 8003854:	b09c      	sub	sp, #112	; 0x70
 8003856:	ab1d      	add	r3, sp, #116	; 0x74
 8003858:	9002      	str	r0, [sp, #8]
 800385a:	9006      	str	r0, [sp, #24]
 800385c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003860:	4809      	ldr	r0, [pc, #36]	; (8003888 <siprintf+0x38>)
 8003862:	9107      	str	r1, [sp, #28]
 8003864:	9104      	str	r1, [sp, #16]
 8003866:	4909      	ldr	r1, [pc, #36]	; (800388c <siprintf+0x3c>)
 8003868:	f853 2b04 	ldr.w	r2, [r3], #4
 800386c:	9105      	str	r1, [sp, #20]
 800386e:	6800      	ldr	r0, [r0, #0]
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	a902      	add	r1, sp, #8
 8003874:	f000 f896 	bl	80039a4 <_svfiprintf_r>
 8003878:	9b02      	ldr	r3, [sp, #8]
 800387a:	2200      	movs	r2, #0
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	b01c      	add	sp, #112	; 0x70
 8003880:	f85d eb04 	ldr.w	lr, [sp], #4
 8003884:	b003      	add	sp, #12
 8003886:	4770      	bx	lr
 8003888:	2000000c 	.word	0x2000000c
 800388c:	ffff0208 	.word	0xffff0208

08003890 <siscanf>:
 8003890:	b40e      	push	{r1, r2, r3}
 8003892:	b510      	push	{r4, lr}
 8003894:	b09f      	sub	sp, #124	; 0x7c
 8003896:	ac21      	add	r4, sp, #132	; 0x84
 8003898:	f44f 7101 	mov.w	r1, #516	; 0x204
 800389c:	f854 2b04 	ldr.w	r2, [r4], #4
 80038a0:	9201      	str	r2, [sp, #4]
 80038a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80038a6:	9004      	str	r0, [sp, #16]
 80038a8:	9008      	str	r0, [sp, #32]
 80038aa:	f7fc fc91 	bl	80001d0 <strlen>
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <siscanf+0x50>)
 80038b0:	9005      	str	r0, [sp, #20]
 80038b2:	9009      	str	r0, [sp, #36]	; 0x24
 80038b4:	930d      	str	r3, [sp, #52]	; 0x34
 80038b6:	480b      	ldr	r0, [pc, #44]	; (80038e4 <siscanf+0x54>)
 80038b8:	9a01      	ldr	r2, [sp, #4]
 80038ba:	6800      	ldr	r0, [r0, #0]
 80038bc:	9403      	str	r4, [sp, #12]
 80038be:	2300      	movs	r3, #0
 80038c0:	9311      	str	r3, [sp, #68]	; 0x44
 80038c2:	9316      	str	r3, [sp, #88]	; 0x58
 80038c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80038cc:	a904      	add	r1, sp, #16
 80038ce:	4623      	mov	r3, r4
 80038d0:	f000 f9c2 	bl	8003c58 <__ssvfiscanf_r>
 80038d4:	b01f      	add	sp, #124	; 0x7c
 80038d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038da:	b003      	add	sp, #12
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	080038e9 	.word	0x080038e9
 80038e4:	2000000c 	.word	0x2000000c

080038e8 <__seofread>:
 80038e8:	2000      	movs	r0, #0
 80038ea:	4770      	bx	lr

080038ec <__ssputs_r>:
 80038ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f0:	688e      	ldr	r6, [r1, #8]
 80038f2:	429e      	cmp	r6, r3
 80038f4:	4682      	mov	sl, r0
 80038f6:	460c      	mov	r4, r1
 80038f8:	4690      	mov	r8, r2
 80038fa:	461f      	mov	r7, r3
 80038fc:	d838      	bhi.n	8003970 <__ssputs_r+0x84>
 80038fe:	898a      	ldrh	r2, [r1, #12]
 8003900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003904:	d032      	beq.n	800396c <__ssputs_r+0x80>
 8003906:	6825      	ldr	r5, [r4, #0]
 8003908:	6909      	ldr	r1, [r1, #16]
 800390a:	eba5 0901 	sub.w	r9, r5, r1
 800390e:	6965      	ldr	r5, [r4, #20]
 8003910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003918:	3301      	adds	r3, #1
 800391a:	444b      	add	r3, r9
 800391c:	106d      	asrs	r5, r5, #1
 800391e:	429d      	cmp	r5, r3
 8003920:	bf38      	it	cc
 8003922:	461d      	movcc	r5, r3
 8003924:	0553      	lsls	r3, r2, #21
 8003926:	d531      	bpl.n	800398c <__ssputs_r+0xa0>
 8003928:	4629      	mov	r1, r5
 800392a:	f000 fff3 	bl	8004914 <_malloc_r>
 800392e:	4606      	mov	r6, r0
 8003930:	b950      	cbnz	r0, 8003948 <__ssputs_r+0x5c>
 8003932:	230c      	movs	r3, #12
 8003934:	f8ca 3000 	str.w	r3, [sl]
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800393e:	81a3      	strh	r3, [r4, #12]
 8003940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003948:	6921      	ldr	r1, [r4, #16]
 800394a:	464a      	mov	r2, r9
 800394c:	f000 ff4e 	bl	80047ec <memcpy>
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800395a:	81a3      	strh	r3, [r4, #12]
 800395c:	6126      	str	r6, [r4, #16]
 800395e:	6165      	str	r5, [r4, #20]
 8003960:	444e      	add	r6, r9
 8003962:	eba5 0509 	sub.w	r5, r5, r9
 8003966:	6026      	str	r6, [r4, #0]
 8003968:	60a5      	str	r5, [r4, #8]
 800396a:	463e      	mov	r6, r7
 800396c:	42be      	cmp	r6, r7
 800396e:	d900      	bls.n	8003972 <__ssputs_r+0x86>
 8003970:	463e      	mov	r6, r7
 8003972:	6820      	ldr	r0, [r4, #0]
 8003974:	4632      	mov	r2, r6
 8003976:	4641      	mov	r1, r8
 8003978:	f000 ff46 	bl	8004808 <memmove>
 800397c:	68a3      	ldr	r3, [r4, #8]
 800397e:	1b9b      	subs	r3, r3, r6
 8003980:	60a3      	str	r3, [r4, #8]
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	4433      	add	r3, r6
 8003986:	6023      	str	r3, [r4, #0]
 8003988:	2000      	movs	r0, #0
 800398a:	e7db      	b.n	8003944 <__ssputs_r+0x58>
 800398c:	462a      	mov	r2, r5
 800398e:	f001 f835 	bl	80049fc <_realloc_r>
 8003992:	4606      	mov	r6, r0
 8003994:	2800      	cmp	r0, #0
 8003996:	d1e1      	bne.n	800395c <__ssputs_r+0x70>
 8003998:	6921      	ldr	r1, [r4, #16]
 800399a:	4650      	mov	r0, sl
 800399c:	f000 ff4e 	bl	800483c <_free_r>
 80039a0:	e7c7      	b.n	8003932 <__ssputs_r+0x46>
	...

080039a4 <_svfiprintf_r>:
 80039a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a8:	4698      	mov	r8, r3
 80039aa:	898b      	ldrh	r3, [r1, #12]
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	b09d      	sub	sp, #116	; 0x74
 80039b0:	4607      	mov	r7, r0
 80039b2:	460d      	mov	r5, r1
 80039b4:	4614      	mov	r4, r2
 80039b6:	d50e      	bpl.n	80039d6 <_svfiprintf_r+0x32>
 80039b8:	690b      	ldr	r3, [r1, #16]
 80039ba:	b963      	cbnz	r3, 80039d6 <_svfiprintf_r+0x32>
 80039bc:	2140      	movs	r1, #64	; 0x40
 80039be:	f000 ffa9 	bl	8004914 <_malloc_r>
 80039c2:	6028      	str	r0, [r5, #0]
 80039c4:	6128      	str	r0, [r5, #16]
 80039c6:	b920      	cbnz	r0, 80039d2 <_svfiprintf_r+0x2e>
 80039c8:	230c      	movs	r3, #12
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039d0:	e0d1      	b.n	8003b76 <_svfiprintf_r+0x1d2>
 80039d2:	2340      	movs	r3, #64	; 0x40
 80039d4:	616b      	str	r3, [r5, #20]
 80039d6:	2300      	movs	r3, #0
 80039d8:	9309      	str	r3, [sp, #36]	; 0x24
 80039da:	2320      	movs	r3, #32
 80039dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80039e4:	2330      	movs	r3, #48	; 0x30
 80039e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b90 <_svfiprintf_r+0x1ec>
 80039ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039ee:	f04f 0901 	mov.w	r9, #1
 80039f2:	4623      	mov	r3, r4
 80039f4:	469a      	mov	sl, r3
 80039f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039fa:	b10a      	cbz	r2, 8003a00 <_svfiprintf_r+0x5c>
 80039fc:	2a25      	cmp	r2, #37	; 0x25
 80039fe:	d1f9      	bne.n	80039f4 <_svfiprintf_r+0x50>
 8003a00:	ebba 0b04 	subs.w	fp, sl, r4
 8003a04:	d00b      	beq.n	8003a1e <_svfiprintf_r+0x7a>
 8003a06:	465b      	mov	r3, fp
 8003a08:	4622      	mov	r2, r4
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	4638      	mov	r0, r7
 8003a0e:	f7ff ff6d 	bl	80038ec <__ssputs_r>
 8003a12:	3001      	adds	r0, #1
 8003a14:	f000 80aa 	beq.w	8003b6c <_svfiprintf_r+0x1c8>
 8003a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a1a:	445a      	add	r2, fp
 8003a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8003a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80a2 	beq.w	8003b6c <_svfiprintf_r+0x1c8>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a32:	f10a 0a01 	add.w	sl, sl, #1
 8003a36:	9304      	str	r3, [sp, #16]
 8003a38:	9307      	str	r3, [sp, #28]
 8003a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8003a40:	4654      	mov	r4, sl
 8003a42:	2205      	movs	r2, #5
 8003a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a48:	4851      	ldr	r0, [pc, #324]	; (8003b90 <_svfiprintf_r+0x1ec>)
 8003a4a:	f7fc fbc9 	bl	80001e0 <memchr>
 8003a4e:	9a04      	ldr	r2, [sp, #16]
 8003a50:	b9d8      	cbnz	r0, 8003a8a <_svfiprintf_r+0xe6>
 8003a52:	06d0      	lsls	r0, r2, #27
 8003a54:	bf44      	itt	mi
 8003a56:	2320      	movmi	r3, #32
 8003a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a5c:	0711      	lsls	r1, r2, #28
 8003a5e:	bf44      	itt	mi
 8003a60:	232b      	movmi	r3, #43	; 0x2b
 8003a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a66:	f89a 3000 	ldrb.w	r3, [sl]
 8003a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a6c:	d015      	beq.n	8003a9a <_svfiprintf_r+0xf6>
 8003a6e:	9a07      	ldr	r2, [sp, #28]
 8003a70:	4654      	mov	r4, sl
 8003a72:	2000      	movs	r0, #0
 8003a74:	f04f 0c0a 	mov.w	ip, #10
 8003a78:	4621      	mov	r1, r4
 8003a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a7e:	3b30      	subs	r3, #48	; 0x30
 8003a80:	2b09      	cmp	r3, #9
 8003a82:	d94e      	bls.n	8003b22 <_svfiprintf_r+0x17e>
 8003a84:	b1b0      	cbz	r0, 8003ab4 <_svfiprintf_r+0x110>
 8003a86:	9207      	str	r2, [sp, #28]
 8003a88:	e014      	b.n	8003ab4 <_svfiprintf_r+0x110>
 8003a8a:	eba0 0308 	sub.w	r3, r0, r8
 8003a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a92:	4313      	orrs	r3, r2
 8003a94:	9304      	str	r3, [sp, #16]
 8003a96:	46a2      	mov	sl, r4
 8003a98:	e7d2      	b.n	8003a40 <_svfiprintf_r+0x9c>
 8003a9a:	9b03      	ldr	r3, [sp, #12]
 8003a9c:	1d19      	adds	r1, r3, #4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	9103      	str	r1, [sp, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bfbb      	ittet	lt
 8003aa6:	425b      	neglt	r3, r3
 8003aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8003aac:	9307      	strge	r3, [sp, #28]
 8003aae:	9307      	strlt	r3, [sp, #28]
 8003ab0:	bfb8      	it	lt
 8003ab2:	9204      	strlt	r2, [sp, #16]
 8003ab4:	7823      	ldrb	r3, [r4, #0]
 8003ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ab8:	d10c      	bne.n	8003ad4 <_svfiprintf_r+0x130>
 8003aba:	7863      	ldrb	r3, [r4, #1]
 8003abc:	2b2a      	cmp	r3, #42	; 0x2a
 8003abe:	d135      	bne.n	8003b2c <_svfiprintf_r+0x188>
 8003ac0:	9b03      	ldr	r3, [sp, #12]
 8003ac2:	1d1a      	adds	r2, r3, #4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	9203      	str	r2, [sp, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bfb8      	it	lt
 8003acc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ad0:	3402      	adds	r4, #2
 8003ad2:	9305      	str	r3, [sp, #20]
 8003ad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ba0 <_svfiprintf_r+0x1fc>
 8003ad8:	7821      	ldrb	r1, [r4, #0]
 8003ada:	2203      	movs	r2, #3
 8003adc:	4650      	mov	r0, sl
 8003ade:	f7fc fb7f 	bl	80001e0 <memchr>
 8003ae2:	b140      	cbz	r0, 8003af6 <_svfiprintf_r+0x152>
 8003ae4:	2340      	movs	r3, #64	; 0x40
 8003ae6:	eba0 000a 	sub.w	r0, r0, sl
 8003aea:	fa03 f000 	lsl.w	r0, r3, r0
 8003aee:	9b04      	ldr	r3, [sp, #16]
 8003af0:	4303      	orrs	r3, r0
 8003af2:	3401      	adds	r4, #1
 8003af4:	9304      	str	r3, [sp, #16]
 8003af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003afa:	4826      	ldr	r0, [pc, #152]	; (8003b94 <_svfiprintf_r+0x1f0>)
 8003afc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b00:	2206      	movs	r2, #6
 8003b02:	f7fc fb6d 	bl	80001e0 <memchr>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d038      	beq.n	8003b7c <_svfiprintf_r+0x1d8>
 8003b0a:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <_svfiprintf_r+0x1f4>)
 8003b0c:	bb1b      	cbnz	r3, 8003b56 <_svfiprintf_r+0x1b2>
 8003b0e:	9b03      	ldr	r3, [sp, #12]
 8003b10:	3307      	adds	r3, #7
 8003b12:	f023 0307 	bic.w	r3, r3, #7
 8003b16:	3308      	adds	r3, #8
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b1c:	4433      	add	r3, r6
 8003b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b20:	e767      	b.n	80039f2 <_svfiprintf_r+0x4e>
 8003b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b26:	460c      	mov	r4, r1
 8003b28:	2001      	movs	r0, #1
 8003b2a:	e7a5      	b.n	8003a78 <_svfiprintf_r+0xd4>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	3401      	adds	r4, #1
 8003b30:	9305      	str	r3, [sp, #20]
 8003b32:	4619      	mov	r1, r3
 8003b34:	f04f 0c0a 	mov.w	ip, #10
 8003b38:	4620      	mov	r0, r4
 8003b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b3e:	3a30      	subs	r2, #48	; 0x30
 8003b40:	2a09      	cmp	r2, #9
 8003b42:	d903      	bls.n	8003b4c <_svfiprintf_r+0x1a8>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0c5      	beq.n	8003ad4 <_svfiprintf_r+0x130>
 8003b48:	9105      	str	r1, [sp, #20]
 8003b4a:	e7c3      	b.n	8003ad4 <_svfiprintf_r+0x130>
 8003b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b50:	4604      	mov	r4, r0
 8003b52:	2301      	movs	r3, #1
 8003b54:	e7f0      	b.n	8003b38 <_svfiprintf_r+0x194>
 8003b56:	ab03      	add	r3, sp, #12
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	462a      	mov	r2, r5
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <_svfiprintf_r+0x1f8>)
 8003b5e:	a904      	add	r1, sp, #16
 8003b60:	4638      	mov	r0, r7
 8003b62:	f3af 8000 	nop.w
 8003b66:	1c42      	adds	r2, r0, #1
 8003b68:	4606      	mov	r6, r0
 8003b6a:	d1d6      	bne.n	8003b1a <_svfiprintf_r+0x176>
 8003b6c:	89ab      	ldrh	r3, [r5, #12]
 8003b6e:	065b      	lsls	r3, r3, #25
 8003b70:	f53f af2c 	bmi.w	80039cc <_svfiprintf_r+0x28>
 8003b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b76:	b01d      	add	sp, #116	; 0x74
 8003b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b7c:	ab03      	add	r3, sp, #12
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	462a      	mov	r2, r5
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <_svfiprintf_r+0x1f8>)
 8003b84:	a904      	add	r1, sp, #16
 8003b86:	4638      	mov	r0, r7
 8003b88:	f000 fa4c 	bl	8004024 <_printf_i>
 8003b8c:	e7eb      	b.n	8003b66 <_svfiprintf_r+0x1c2>
 8003b8e:	bf00      	nop
 8003b90:	08004b7c 	.word	0x08004b7c
 8003b94:	08004b86 	.word	0x08004b86
 8003b98:	00000000 	.word	0x00000000
 8003b9c:	080038ed 	.word	0x080038ed
 8003ba0:	08004b82 	.word	0x08004b82

08003ba4 <_sungetc_r>:
 8003ba4:	b538      	push	{r3, r4, r5, lr}
 8003ba6:	1c4b      	adds	r3, r1, #1
 8003ba8:	4614      	mov	r4, r2
 8003baa:	d103      	bne.n	8003bb4 <_sungetc_r+0x10>
 8003bac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	bd38      	pop	{r3, r4, r5, pc}
 8003bb4:	8993      	ldrh	r3, [r2, #12]
 8003bb6:	f023 0320 	bic.w	r3, r3, #32
 8003bba:	8193      	strh	r3, [r2, #12]
 8003bbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bbe:	6852      	ldr	r2, [r2, #4]
 8003bc0:	b2cd      	uxtb	r5, r1
 8003bc2:	b18b      	cbz	r3, 8003be8 <_sungetc_r+0x44>
 8003bc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	dd08      	ble.n	8003bdc <_sungetc_r+0x38>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	1e5a      	subs	r2, r3, #1
 8003bce:	6022      	str	r2, [r4, #0]
 8003bd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003bd4:	6863      	ldr	r3, [r4, #4]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	6063      	str	r3, [r4, #4]
 8003bda:	e7e9      	b.n	8003bb0 <_sungetc_r+0xc>
 8003bdc:	4621      	mov	r1, r4
 8003bde:	f000 fdc9 	bl	8004774 <__submore>
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d0f1      	beq.n	8003bca <_sungetc_r+0x26>
 8003be6:	e7e1      	b.n	8003bac <_sungetc_r+0x8>
 8003be8:	6921      	ldr	r1, [r4, #16]
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	b151      	cbz	r1, 8003c04 <_sungetc_r+0x60>
 8003bee:	4299      	cmp	r1, r3
 8003bf0:	d208      	bcs.n	8003c04 <_sungetc_r+0x60>
 8003bf2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003bf6:	42a9      	cmp	r1, r5
 8003bf8:	d104      	bne.n	8003c04 <_sungetc_r+0x60>
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	3201      	adds	r2, #1
 8003bfe:	6023      	str	r3, [r4, #0]
 8003c00:	6062      	str	r2, [r4, #4]
 8003c02:	e7d5      	b.n	8003bb0 <_sungetc_r+0xc>
 8003c04:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8003c0e:	2303      	movs	r3, #3
 8003c10:	63a3      	str	r3, [r4, #56]	; 0x38
 8003c12:	4623      	mov	r3, r4
 8003c14:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e7dc      	b.n	8003bd8 <_sungetc_r+0x34>

08003c1e <__ssrefill_r>:
 8003c1e:	b510      	push	{r4, lr}
 8003c20:	460c      	mov	r4, r1
 8003c22:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003c24:	b169      	cbz	r1, 8003c42 <__ssrefill_r+0x24>
 8003c26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c2a:	4299      	cmp	r1, r3
 8003c2c:	d001      	beq.n	8003c32 <__ssrefill_r+0x14>
 8003c2e:	f000 fe05 	bl	800483c <_free_r>
 8003c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c34:	6063      	str	r3, [r4, #4]
 8003c36:	2000      	movs	r0, #0
 8003c38:	6360      	str	r0, [r4, #52]	; 0x34
 8003c3a:	b113      	cbz	r3, 8003c42 <__ssrefill_r+0x24>
 8003c3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c3e:	6023      	str	r3, [r4, #0]
 8003c40:	bd10      	pop	{r4, pc}
 8003c42:	6923      	ldr	r3, [r4, #16]
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	2300      	movs	r3, #0
 8003c48:	6063      	str	r3, [r4, #4]
 8003c4a:	89a3      	ldrh	r3, [r4, #12]
 8003c4c:	f043 0320 	orr.w	r3, r3, #32
 8003c50:	81a3      	strh	r3, [r4, #12]
 8003c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c56:	e7f3      	b.n	8003c40 <__ssrefill_r+0x22>

08003c58 <__ssvfiscanf_r>:
 8003c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003c62:	2100      	movs	r1, #0
 8003c64:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003c68:	49a6      	ldr	r1, [pc, #664]	; (8003f04 <__ssvfiscanf_r+0x2ac>)
 8003c6a:	91a0      	str	r1, [sp, #640]	; 0x280
 8003c6c:	f10d 0804 	add.w	r8, sp, #4
 8003c70:	49a5      	ldr	r1, [pc, #660]	; (8003f08 <__ssvfiscanf_r+0x2b0>)
 8003c72:	4fa6      	ldr	r7, [pc, #664]	; (8003f0c <__ssvfiscanf_r+0x2b4>)
 8003c74:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003f10 <__ssvfiscanf_r+0x2b8>
 8003c78:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003c7c:	4606      	mov	r6, r0
 8003c7e:	91a1      	str	r1, [sp, #644]	; 0x284
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	7813      	ldrb	r3, [r2, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 815a 	beq.w	8003f3e <__ssvfiscanf_r+0x2e6>
 8003c8a:	5dd9      	ldrb	r1, [r3, r7]
 8003c8c:	f011 0108 	ands.w	r1, r1, #8
 8003c90:	f102 0501 	add.w	r5, r2, #1
 8003c94:	d019      	beq.n	8003cca <__ssvfiscanf_r+0x72>
 8003c96:	6863      	ldr	r3, [r4, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	dd0f      	ble.n	8003cbc <__ssvfiscanf_r+0x64>
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	5cba      	ldrb	r2, [r7, r2]
 8003ca2:	0712      	lsls	r2, r2, #28
 8003ca4:	d401      	bmi.n	8003caa <__ssvfiscanf_r+0x52>
 8003ca6:	462a      	mov	r2, r5
 8003ca8:	e7eb      	b.n	8003c82 <__ssvfiscanf_r+0x2a>
 8003caa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003cac:	3201      	adds	r2, #1
 8003cae:	9245      	str	r2, [sp, #276]	; 0x114
 8003cb0:	6862      	ldr	r2, [r4, #4]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	3a01      	subs	r2, #1
 8003cb6:	6062      	str	r2, [r4, #4]
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	e7ec      	b.n	8003c96 <__ssvfiscanf_r+0x3e>
 8003cbc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	4798      	blx	r3
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d0e9      	beq.n	8003c9c <__ssvfiscanf_r+0x44>
 8003cc8:	e7ed      	b.n	8003ca6 <__ssvfiscanf_r+0x4e>
 8003cca:	2b25      	cmp	r3, #37	; 0x25
 8003ccc:	d012      	beq.n	8003cf4 <__ssvfiscanf_r+0x9c>
 8003cce:	469a      	mov	sl, r3
 8003cd0:	6863      	ldr	r3, [r4, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f340 8091 	ble.w	8003dfa <__ssvfiscanf_r+0x1a2>
 8003cd8:	6822      	ldr	r2, [r4, #0]
 8003cda:	7813      	ldrb	r3, [r2, #0]
 8003cdc:	4553      	cmp	r3, sl
 8003cde:	f040 812e 	bne.w	8003f3e <__ssvfiscanf_r+0x2e6>
 8003ce2:	6863      	ldr	r3, [r4, #4]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	6063      	str	r3, [r4, #4]
 8003ce8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003cea:	3201      	adds	r2, #1
 8003cec:	3301      	adds	r3, #1
 8003cee:	6022      	str	r2, [r4, #0]
 8003cf0:	9345      	str	r3, [sp, #276]	; 0x114
 8003cf2:	e7d8      	b.n	8003ca6 <__ssvfiscanf_r+0x4e>
 8003cf4:	9141      	str	r1, [sp, #260]	; 0x104
 8003cf6:	9143      	str	r1, [sp, #268]	; 0x10c
 8003cf8:	7853      	ldrb	r3, [r2, #1]
 8003cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8003cfc:	bf02      	ittt	eq
 8003cfe:	2310      	moveq	r3, #16
 8003d00:	1c95      	addeq	r5, r2, #2
 8003d02:	9341      	streq	r3, [sp, #260]	; 0x104
 8003d04:	220a      	movs	r2, #10
 8003d06:	46aa      	mov	sl, r5
 8003d08:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003d0c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003d10:	2b09      	cmp	r3, #9
 8003d12:	d91d      	bls.n	8003d50 <__ssvfiscanf_r+0xf8>
 8003d14:	487e      	ldr	r0, [pc, #504]	; (8003f10 <__ssvfiscanf_r+0x2b8>)
 8003d16:	2203      	movs	r2, #3
 8003d18:	f7fc fa62 	bl	80001e0 <memchr>
 8003d1c:	b140      	cbz	r0, 8003d30 <__ssvfiscanf_r+0xd8>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	eba0 0009 	sub.w	r0, r0, r9
 8003d24:	fa03 f000 	lsl.w	r0, r3, r0
 8003d28:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003d2a:	4318      	orrs	r0, r3
 8003d2c:	9041      	str	r0, [sp, #260]	; 0x104
 8003d2e:	4655      	mov	r5, sl
 8003d30:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d34:	2b78      	cmp	r3, #120	; 0x78
 8003d36:	d806      	bhi.n	8003d46 <__ssvfiscanf_r+0xee>
 8003d38:	2b57      	cmp	r3, #87	; 0x57
 8003d3a:	d810      	bhi.n	8003d5e <__ssvfiscanf_r+0x106>
 8003d3c:	2b25      	cmp	r3, #37	; 0x25
 8003d3e:	d0c6      	beq.n	8003cce <__ssvfiscanf_r+0x76>
 8003d40:	d856      	bhi.n	8003df0 <__ssvfiscanf_r+0x198>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d064      	beq.n	8003e10 <__ssvfiscanf_r+0x1b8>
 8003d46:	2303      	movs	r3, #3
 8003d48:	9347      	str	r3, [sp, #284]	; 0x11c
 8003d4a:	230a      	movs	r3, #10
 8003d4c:	9342      	str	r3, [sp, #264]	; 0x108
 8003d4e:	e071      	b.n	8003e34 <__ssvfiscanf_r+0x1dc>
 8003d50:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003d52:	fb02 1103 	mla	r1, r2, r3, r1
 8003d56:	3930      	subs	r1, #48	; 0x30
 8003d58:	9143      	str	r1, [sp, #268]	; 0x10c
 8003d5a:	4655      	mov	r5, sl
 8003d5c:	e7d3      	b.n	8003d06 <__ssvfiscanf_r+0xae>
 8003d5e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003d62:	2a20      	cmp	r2, #32
 8003d64:	d8ef      	bhi.n	8003d46 <__ssvfiscanf_r+0xee>
 8003d66:	a101      	add	r1, pc, #4	; (adr r1, 8003d6c <__ssvfiscanf_r+0x114>)
 8003d68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003d6c:	08003e1f 	.word	0x08003e1f
 8003d70:	08003d47 	.word	0x08003d47
 8003d74:	08003d47 	.word	0x08003d47
 8003d78:	08003e7d 	.word	0x08003e7d
 8003d7c:	08003d47 	.word	0x08003d47
 8003d80:	08003d47 	.word	0x08003d47
 8003d84:	08003d47 	.word	0x08003d47
 8003d88:	08003d47 	.word	0x08003d47
 8003d8c:	08003d47 	.word	0x08003d47
 8003d90:	08003d47 	.word	0x08003d47
 8003d94:	08003d47 	.word	0x08003d47
 8003d98:	08003e93 	.word	0x08003e93
 8003d9c:	08003e69 	.word	0x08003e69
 8003da0:	08003df7 	.word	0x08003df7
 8003da4:	08003df7 	.word	0x08003df7
 8003da8:	08003df7 	.word	0x08003df7
 8003dac:	08003d47 	.word	0x08003d47
 8003db0:	08003e6d 	.word	0x08003e6d
 8003db4:	08003d47 	.word	0x08003d47
 8003db8:	08003d47 	.word	0x08003d47
 8003dbc:	08003d47 	.word	0x08003d47
 8003dc0:	08003d47 	.word	0x08003d47
 8003dc4:	08003ea3 	.word	0x08003ea3
 8003dc8:	08003e75 	.word	0x08003e75
 8003dcc:	08003e17 	.word	0x08003e17
 8003dd0:	08003d47 	.word	0x08003d47
 8003dd4:	08003d47 	.word	0x08003d47
 8003dd8:	08003e9f 	.word	0x08003e9f
 8003ddc:	08003d47 	.word	0x08003d47
 8003de0:	08003e69 	.word	0x08003e69
 8003de4:	08003d47 	.word	0x08003d47
 8003de8:	08003d47 	.word	0x08003d47
 8003dec:	08003e1f 	.word	0x08003e1f
 8003df0:	3b45      	subs	r3, #69	; 0x45
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d8a7      	bhi.n	8003d46 <__ssvfiscanf_r+0xee>
 8003df6:	2305      	movs	r3, #5
 8003df8:	e01b      	b.n	8003e32 <__ssvfiscanf_r+0x1da>
 8003dfa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	4630      	mov	r0, r6
 8003e00:	4798      	blx	r3
 8003e02:	2800      	cmp	r0, #0
 8003e04:	f43f af68 	beq.w	8003cd8 <__ssvfiscanf_r+0x80>
 8003e08:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	f040 808d 	bne.w	8003f2a <__ssvfiscanf_r+0x2d2>
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e14:	e08f      	b.n	8003f36 <__ssvfiscanf_r+0x2de>
 8003e16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003e18:	f042 0220 	orr.w	r2, r2, #32
 8003e1c:	9241      	str	r2, [sp, #260]	; 0x104
 8003e1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e24:	9241      	str	r2, [sp, #260]	; 0x104
 8003e26:	2210      	movs	r2, #16
 8003e28:	2b6f      	cmp	r3, #111	; 0x6f
 8003e2a:	9242      	str	r2, [sp, #264]	; 0x108
 8003e2c:	bf34      	ite	cc
 8003e2e:	2303      	movcc	r3, #3
 8003e30:	2304      	movcs	r3, #4
 8003e32:	9347      	str	r3, [sp, #284]	; 0x11c
 8003e34:	6863      	ldr	r3, [r4, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	dd42      	ble.n	8003ec0 <__ssvfiscanf_r+0x268>
 8003e3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003e3c:	0659      	lsls	r1, r3, #25
 8003e3e:	d404      	bmi.n	8003e4a <__ssvfiscanf_r+0x1f2>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	781a      	ldrb	r2, [r3, #0]
 8003e44:	5cba      	ldrb	r2, [r7, r2]
 8003e46:	0712      	lsls	r2, r2, #28
 8003e48:	d441      	bmi.n	8003ece <__ssvfiscanf_r+0x276>
 8003e4a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	dc50      	bgt.n	8003ef2 <__ssvfiscanf_r+0x29a>
 8003e50:	466b      	mov	r3, sp
 8003e52:	4622      	mov	r2, r4
 8003e54:	a941      	add	r1, sp, #260	; 0x104
 8003e56:	4630      	mov	r0, r6
 8003e58:	f000 fa0a 	bl	8004270 <_scanf_chars>
 8003e5c:	2801      	cmp	r0, #1
 8003e5e:	d06e      	beq.n	8003f3e <__ssvfiscanf_r+0x2e6>
 8003e60:	2802      	cmp	r0, #2
 8003e62:	f47f af20 	bne.w	8003ca6 <__ssvfiscanf_r+0x4e>
 8003e66:	e7cf      	b.n	8003e08 <__ssvfiscanf_r+0x1b0>
 8003e68:	220a      	movs	r2, #10
 8003e6a:	e7dd      	b.n	8003e28 <__ssvfiscanf_r+0x1d0>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9342      	str	r3, [sp, #264]	; 0x108
 8003e70:	2303      	movs	r3, #3
 8003e72:	e7de      	b.n	8003e32 <__ssvfiscanf_r+0x1da>
 8003e74:	2308      	movs	r3, #8
 8003e76:	9342      	str	r3, [sp, #264]	; 0x108
 8003e78:	2304      	movs	r3, #4
 8003e7a:	e7da      	b.n	8003e32 <__ssvfiscanf_r+0x1da>
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	4640      	mov	r0, r8
 8003e80:	f000 fb48 	bl	8004514 <__sccl>
 8003e84:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e8a:	9341      	str	r3, [sp, #260]	; 0x104
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e7cf      	b.n	8003e32 <__ssvfiscanf_r+0x1da>
 8003e92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e98:	9341      	str	r3, [sp, #260]	; 0x104
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e7c9      	b.n	8003e32 <__ssvfiscanf_r+0x1da>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e7c7      	b.n	8003e32 <__ssvfiscanf_r+0x1da>
 8003ea2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003ea4:	06c3      	lsls	r3, r0, #27
 8003ea6:	f53f aefe 	bmi.w	8003ca6 <__ssvfiscanf_r+0x4e>
 8003eaa:	9b00      	ldr	r3, [sp, #0]
 8003eac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003eae:	1d19      	adds	r1, r3, #4
 8003eb0:	9100      	str	r1, [sp, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f010 0f01 	tst.w	r0, #1
 8003eb8:	bf14      	ite	ne
 8003eba:	801a      	strhne	r2, [r3, #0]
 8003ebc:	601a      	streq	r2, [r3, #0]
 8003ebe:	e6f2      	b.n	8003ca6 <__ssvfiscanf_r+0x4e>
 8003ec0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	4798      	blx	r3
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d0b6      	beq.n	8003e3a <__ssvfiscanf_r+0x1e2>
 8003ecc:	e79c      	b.n	8003e08 <__ssvfiscanf_r+0x1b0>
 8003ece:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003ed0:	3201      	adds	r2, #1
 8003ed2:	9245      	str	r2, [sp, #276]	; 0x114
 8003ed4:	6862      	ldr	r2, [r4, #4]
 8003ed6:	3a01      	subs	r2, #1
 8003ed8:	2a00      	cmp	r2, #0
 8003eda:	6062      	str	r2, [r4, #4]
 8003edc:	dd02      	ble.n	8003ee4 <__ssvfiscanf_r+0x28c>
 8003ede:	3301      	adds	r3, #1
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	e7ad      	b.n	8003e40 <__ssvfiscanf_r+0x1e8>
 8003ee4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	4630      	mov	r0, r6
 8003eea:	4798      	blx	r3
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d0a7      	beq.n	8003e40 <__ssvfiscanf_r+0x1e8>
 8003ef0:	e78a      	b.n	8003e08 <__ssvfiscanf_r+0x1b0>
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	dc0e      	bgt.n	8003f14 <__ssvfiscanf_r+0x2bc>
 8003ef6:	466b      	mov	r3, sp
 8003ef8:	4622      	mov	r2, r4
 8003efa:	a941      	add	r1, sp, #260	; 0x104
 8003efc:	4630      	mov	r0, r6
 8003efe:	f000 fa11 	bl	8004324 <_scanf_i>
 8003f02:	e7ab      	b.n	8003e5c <__ssvfiscanf_r+0x204>
 8003f04:	08003ba5 	.word	0x08003ba5
 8003f08:	08003c1f 	.word	0x08003c1f
 8003f0c:	08004bcb 	.word	0x08004bcb
 8003f10:	08004b82 	.word	0x08004b82
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <__ssvfiscanf_r+0x2ec>)
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f43f aec5 	beq.w	8003ca6 <__ssvfiscanf_r+0x4e>
 8003f1c:	466b      	mov	r3, sp
 8003f1e:	4622      	mov	r2, r4
 8003f20:	a941      	add	r1, sp, #260	; 0x104
 8003f22:	4630      	mov	r0, r6
 8003f24:	f3af 8000 	nop.w
 8003f28:	e798      	b.n	8003e5c <__ssvfiscanf_r+0x204>
 8003f2a:	89a3      	ldrh	r3, [r4, #12]
 8003f2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f30:	bf18      	it	ne
 8003f32:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003f36:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f3e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003f40:	e7f9      	b.n	8003f36 <__ssvfiscanf_r+0x2de>
 8003f42:	bf00      	nop
 8003f44:	00000000 	.word	0x00000000

08003f48 <_printf_common>:
 8003f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f4c:	4616      	mov	r6, r2
 8003f4e:	4699      	mov	r9, r3
 8003f50:	688a      	ldr	r2, [r1, #8]
 8003f52:	690b      	ldr	r3, [r1, #16]
 8003f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	bfb8      	it	lt
 8003f5c:	4613      	movlt	r3, r2
 8003f5e:	6033      	str	r3, [r6, #0]
 8003f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f64:	4607      	mov	r7, r0
 8003f66:	460c      	mov	r4, r1
 8003f68:	b10a      	cbz	r2, 8003f6e <_printf_common+0x26>
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	6033      	str	r3, [r6, #0]
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	0699      	lsls	r1, r3, #26
 8003f72:	bf42      	ittt	mi
 8003f74:	6833      	ldrmi	r3, [r6, #0]
 8003f76:	3302      	addmi	r3, #2
 8003f78:	6033      	strmi	r3, [r6, #0]
 8003f7a:	6825      	ldr	r5, [r4, #0]
 8003f7c:	f015 0506 	ands.w	r5, r5, #6
 8003f80:	d106      	bne.n	8003f90 <_printf_common+0x48>
 8003f82:	f104 0a19 	add.w	sl, r4, #25
 8003f86:	68e3      	ldr	r3, [r4, #12]
 8003f88:	6832      	ldr	r2, [r6, #0]
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	42ab      	cmp	r3, r5
 8003f8e:	dc26      	bgt.n	8003fde <_printf_common+0x96>
 8003f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f94:	1e13      	subs	r3, r2, #0
 8003f96:	6822      	ldr	r2, [r4, #0]
 8003f98:	bf18      	it	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	0692      	lsls	r2, r2, #26
 8003f9e:	d42b      	bmi.n	8003ff8 <_printf_common+0xb0>
 8003fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	47c0      	blx	r8
 8003faa:	3001      	adds	r0, #1
 8003fac:	d01e      	beq.n	8003fec <_printf_common+0xa4>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	68e5      	ldr	r5, [r4, #12]
 8003fb2:	6832      	ldr	r2, [r6, #0]
 8003fb4:	f003 0306 	and.w	r3, r3, #6
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	bf08      	it	eq
 8003fbc:	1aad      	subeq	r5, r5, r2
 8003fbe:	68a3      	ldr	r3, [r4, #8]
 8003fc0:	6922      	ldr	r2, [r4, #16]
 8003fc2:	bf0c      	ite	eq
 8003fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fc8:	2500      	movne	r5, #0
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	bfc4      	itt	gt
 8003fce:	1a9b      	subgt	r3, r3, r2
 8003fd0:	18ed      	addgt	r5, r5, r3
 8003fd2:	2600      	movs	r6, #0
 8003fd4:	341a      	adds	r4, #26
 8003fd6:	42b5      	cmp	r5, r6
 8003fd8:	d11a      	bne.n	8004010 <_printf_common+0xc8>
 8003fda:	2000      	movs	r0, #0
 8003fdc:	e008      	b.n	8003ff0 <_printf_common+0xa8>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	4652      	mov	r2, sl
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	4638      	mov	r0, r7
 8003fe6:	47c0      	blx	r8
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d103      	bne.n	8003ff4 <_printf_common+0xac>
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff4:	3501      	adds	r5, #1
 8003ff6:	e7c6      	b.n	8003f86 <_printf_common+0x3e>
 8003ff8:	18e1      	adds	r1, r4, r3
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	2030      	movs	r0, #48	; 0x30
 8003ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004002:	4422      	add	r2, r4
 8004004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800400c:	3302      	adds	r3, #2
 800400e:	e7c7      	b.n	8003fa0 <_printf_common+0x58>
 8004010:	2301      	movs	r3, #1
 8004012:	4622      	mov	r2, r4
 8004014:	4649      	mov	r1, r9
 8004016:	4638      	mov	r0, r7
 8004018:	47c0      	blx	r8
 800401a:	3001      	adds	r0, #1
 800401c:	d0e6      	beq.n	8003fec <_printf_common+0xa4>
 800401e:	3601      	adds	r6, #1
 8004020:	e7d9      	b.n	8003fd6 <_printf_common+0x8e>
	...

08004024 <_printf_i>:
 8004024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004028:	7e0f      	ldrb	r7, [r1, #24]
 800402a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800402c:	2f78      	cmp	r7, #120	; 0x78
 800402e:	4691      	mov	r9, r2
 8004030:	4680      	mov	r8, r0
 8004032:	460c      	mov	r4, r1
 8004034:	469a      	mov	sl, r3
 8004036:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800403a:	d807      	bhi.n	800404c <_printf_i+0x28>
 800403c:	2f62      	cmp	r7, #98	; 0x62
 800403e:	d80a      	bhi.n	8004056 <_printf_i+0x32>
 8004040:	2f00      	cmp	r7, #0
 8004042:	f000 80d8 	beq.w	80041f6 <_printf_i+0x1d2>
 8004046:	2f58      	cmp	r7, #88	; 0x58
 8004048:	f000 80a3 	beq.w	8004192 <_printf_i+0x16e>
 800404c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004054:	e03a      	b.n	80040cc <_printf_i+0xa8>
 8004056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800405a:	2b15      	cmp	r3, #21
 800405c:	d8f6      	bhi.n	800404c <_printf_i+0x28>
 800405e:	a101      	add	r1, pc, #4	; (adr r1, 8004064 <_printf_i+0x40>)
 8004060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004064:	080040bd 	.word	0x080040bd
 8004068:	080040d1 	.word	0x080040d1
 800406c:	0800404d 	.word	0x0800404d
 8004070:	0800404d 	.word	0x0800404d
 8004074:	0800404d 	.word	0x0800404d
 8004078:	0800404d 	.word	0x0800404d
 800407c:	080040d1 	.word	0x080040d1
 8004080:	0800404d 	.word	0x0800404d
 8004084:	0800404d 	.word	0x0800404d
 8004088:	0800404d 	.word	0x0800404d
 800408c:	0800404d 	.word	0x0800404d
 8004090:	080041dd 	.word	0x080041dd
 8004094:	08004101 	.word	0x08004101
 8004098:	080041bf 	.word	0x080041bf
 800409c:	0800404d 	.word	0x0800404d
 80040a0:	0800404d 	.word	0x0800404d
 80040a4:	080041ff 	.word	0x080041ff
 80040a8:	0800404d 	.word	0x0800404d
 80040ac:	08004101 	.word	0x08004101
 80040b0:	0800404d 	.word	0x0800404d
 80040b4:	0800404d 	.word	0x0800404d
 80040b8:	080041c7 	.word	0x080041c7
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	602a      	str	r2, [r5, #0]
 80040c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0a3      	b.n	8004218 <_printf_i+0x1f4>
 80040d0:	6820      	ldr	r0, [r4, #0]
 80040d2:	6829      	ldr	r1, [r5, #0]
 80040d4:	0606      	lsls	r6, r0, #24
 80040d6:	f101 0304 	add.w	r3, r1, #4
 80040da:	d50a      	bpl.n	80040f2 <_printf_i+0xce>
 80040dc:	680e      	ldr	r6, [r1, #0]
 80040de:	602b      	str	r3, [r5, #0]
 80040e0:	2e00      	cmp	r6, #0
 80040e2:	da03      	bge.n	80040ec <_printf_i+0xc8>
 80040e4:	232d      	movs	r3, #45	; 0x2d
 80040e6:	4276      	negs	r6, r6
 80040e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ec:	485e      	ldr	r0, [pc, #376]	; (8004268 <_printf_i+0x244>)
 80040ee:	230a      	movs	r3, #10
 80040f0:	e019      	b.n	8004126 <_printf_i+0x102>
 80040f2:	680e      	ldr	r6, [r1, #0]
 80040f4:	602b      	str	r3, [r5, #0]
 80040f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040fa:	bf18      	it	ne
 80040fc:	b236      	sxthne	r6, r6
 80040fe:	e7ef      	b.n	80040e0 <_printf_i+0xbc>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	6820      	ldr	r0, [r4, #0]
 8004104:	1d19      	adds	r1, r3, #4
 8004106:	6029      	str	r1, [r5, #0]
 8004108:	0601      	lsls	r1, r0, #24
 800410a:	d501      	bpl.n	8004110 <_printf_i+0xec>
 800410c:	681e      	ldr	r6, [r3, #0]
 800410e:	e002      	b.n	8004116 <_printf_i+0xf2>
 8004110:	0646      	lsls	r6, r0, #25
 8004112:	d5fb      	bpl.n	800410c <_printf_i+0xe8>
 8004114:	881e      	ldrh	r6, [r3, #0]
 8004116:	4854      	ldr	r0, [pc, #336]	; (8004268 <_printf_i+0x244>)
 8004118:	2f6f      	cmp	r7, #111	; 0x6f
 800411a:	bf0c      	ite	eq
 800411c:	2308      	moveq	r3, #8
 800411e:	230a      	movne	r3, #10
 8004120:	2100      	movs	r1, #0
 8004122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004126:	6865      	ldr	r5, [r4, #4]
 8004128:	60a5      	str	r5, [r4, #8]
 800412a:	2d00      	cmp	r5, #0
 800412c:	bfa2      	ittt	ge
 800412e:	6821      	ldrge	r1, [r4, #0]
 8004130:	f021 0104 	bicge.w	r1, r1, #4
 8004134:	6021      	strge	r1, [r4, #0]
 8004136:	b90e      	cbnz	r6, 800413c <_printf_i+0x118>
 8004138:	2d00      	cmp	r5, #0
 800413a:	d04d      	beq.n	80041d8 <_printf_i+0x1b4>
 800413c:	4615      	mov	r5, r2
 800413e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004142:	fb03 6711 	mls	r7, r3, r1, r6
 8004146:	5dc7      	ldrb	r7, [r0, r7]
 8004148:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800414c:	4637      	mov	r7, r6
 800414e:	42bb      	cmp	r3, r7
 8004150:	460e      	mov	r6, r1
 8004152:	d9f4      	bls.n	800413e <_printf_i+0x11a>
 8004154:	2b08      	cmp	r3, #8
 8004156:	d10b      	bne.n	8004170 <_printf_i+0x14c>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	07de      	lsls	r6, r3, #31
 800415c:	d508      	bpl.n	8004170 <_printf_i+0x14c>
 800415e:	6923      	ldr	r3, [r4, #16]
 8004160:	6861      	ldr	r1, [r4, #4]
 8004162:	4299      	cmp	r1, r3
 8004164:	bfde      	ittt	le
 8004166:	2330      	movle	r3, #48	; 0x30
 8004168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800416c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004170:	1b52      	subs	r2, r2, r5
 8004172:	6122      	str	r2, [r4, #16]
 8004174:	f8cd a000 	str.w	sl, [sp]
 8004178:	464b      	mov	r3, r9
 800417a:	aa03      	add	r2, sp, #12
 800417c:	4621      	mov	r1, r4
 800417e:	4640      	mov	r0, r8
 8004180:	f7ff fee2 	bl	8003f48 <_printf_common>
 8004184:	3001      	adds	r0, #1
 8004186:	d14c      	bne.n	8004222 <_printf_i+0x1fe>
 8004188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800418c:	b004      	add	sp, #16
 800418e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004192:	4835      	ldr	r0, [pc, #212]	; (8004268 <_printf_i+0x244>)
 8004194:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004198:	6829      	ldr	r1, [r5, #0]
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	f851 6b04 	ldr.w	r6, [r1], #4
 80041a0:	6029      	str	r1, [r5, #0]
 80041a2:	061d      	lsls	r5, r3, #24
 80041a4:	d514      	bpl.n	80041d0 <_printf_i+0x1ac>
 80041a6:	07df      	lsls	r7, r3, #31
 80041a8:	bf44      	itt	mi
 80041aa:	f043 0320 	orrmi.w	r3, r3, #32
 80041ae:	6023      	strmi	r3, [r4, #0]
 80041b0:	b91e      	cbnz	r6, 80041ba <_printf_i+0x196>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	f023 0320 	bic.w	r3, r3, #32
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	2310      	movs	r3, #16
 80041bc:	e7b0      	b.n	8004120 <_printf_i+0xfc>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	f043 0320 	orr.w	r3, r3, #32
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	2378      	movs	r3, #120	; 0x78
 80041c8:	4828      	ldr	r0, [pc, #160]	; (800426c <_printf_i+0x248>)
 80041ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041ce:	e7e3      	b.n	8004198 <_printf_i+0x174>
 80041d0:	0659      	lsls	r1, r3, #25
 80041d2:	bf48      	it	mi
 80041d4:	b2b6      	uxthmi	r6, r6
 80041d6:	e7e6      	b.n	80041a6 <_printf_i+0x182>
 80041d8:	4615      	mov	r5, r2
 80041da:	e7bb      	b.n	8004154 <_printf_i+0x130>
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	6826      	ldr	r6, [r4, #0]
 80041e0:	6961      	ldr	r1, [r4, #20]
 80041e2:	1d18      	adds	r0, r3, #4
 80041e4:	6028      	str	r0, [r5, #0]
 80041e6:	0635      	lsls	r5, r6, #24
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	d501      	bpl.n	80041f0 <_printf_i+0x1cc>
 80041ec:	6019      	str	r1, [r3, #0]
 80041ee:	e002      	b.n	80041f6 <_printf_i+0x1d2>
 80041f0:	0670      	lsls	r0, r6, #25
 80041f2:	d5fb      	bpl.n	80041ec <_printf_i+0x1c8>
 80041f4:	8019      	strh	r1, [r3, #0]
 80041f6:	2300      	movs	r3, #0
 80041f8:	6123      	str	r3, [r4, #16]
 80041fa:	4615      	mov	r5, r2
 80041fc:	e7ba      	b.n	8004174 <_printf_i+0x150>
 80041fe:	682b      	ldr	r3, [r5, #0]
 8004200:	1d1a      	adds	r2, r3, #4
 8004202:	602a      	str	r2, [r5, #0]
 8004204:	681d      	ldr	r5, [r3, #0]
 8004206:	6862      	ldr	r2, [r4, #4]
 8004208:	2100      	movs	r1, #0
 800420a:	4628      	mov	r0, r5
 800420c:	f7fb ffe8 	bl	80001e0 <memchr>
 8004210:	b108      	cbz	r0, 8004216 <_printf_i+0x1f2>
 8004212:	1b40      	subs	r0, r0, r5
 8004214:	6060      	str	r0, [r4, #4]
 8004216:	6863      	ldr	r3, [r4, #4]
 8004218:	6123      	str	r3, [r4, #16]
 800421a:	2300      	movs	r3, #0
 800421c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004220:	e7a8      	b.n	8004174 <_printf_i+0x150>
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	462a      	mov	r2, r5
 8004226:	4649      	mov	r1, r9
 8004228:	4640      	mov	r0, r8
 800422a:	47d0      	blx	sl
 800422c:	3001      	adds	r0, #1
 800422e:	d0ab      	beq.n	8004188 <_printf_i+0x164>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	079b      	lsls	r3, r3, #30
 8004234:	d413      	bmi.n	800425e <_printf_i+0x23a>
 8004236:	68e0      	ldr	r0, [r4, #12]
 8004238:	9b03      	ldr	r3, [sp, #12]
 800423a:	4298      	cmp	r0, r3
 800423c:	bfb8      	it	lt
 800423e:	4618      	movlt	r0, r3
 8004240:	e7a4      	b.n	800418c <_printf_i+0x168>
 8004242:	2301      	movs	r3, #1
 8004244:	4632      	mov	r2, r6
 8004246:	4649      	mov	r1, r9
 8004248:	4640      	mov	r0, r8
 800424a:	47d0      	blx	sl
 800424c:	3001      	adds	r0, #1
 800424e:	d09b      	beq.n	8004188 <_printf_i+0x164>
 8004250:	3501      	adds	r5, #1
 8004252:	68e3      	ldr	r3, [r4, #12]
 8004254:	9903      	ldr	r1, [sp, #12]
 8004256:	1a5b      	subs	r3, r3, r1
 8004258:	42ab      	cmp	r3, r5
 800425a:	dcf2      	bgt.n	8004242 <_printf_i+0x21e>
 800425c:	e7eb      	b.n	8004236 <_printf_i+0x212>
 800425e:	2500      	movs	r5, #0
 8004260:	f104 0619 	add.w	r6, r4, #25
 8004264:	e7f5      	b.n	8004252 <_printf_i+0x22e>
 8004266:	bf00      	nop
 8004268:	08004b8d 	.word	0x08004b8d
 800426c:	08004b9e 	.word	0x08004b9e

08004270 <_scanf_chars>:
 8004270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004274:	4615      	mov	r5, r2
 8004276:	688a      	ldr	r2, [r1, #8]
 8004278:	4680      	mov	r8, r0
 800427a:	460c      	mov	r4, r1
 800427c:	b932      	cbnz	r2, 800428c <_scanf_chars+0x1c>
 800427e:	698a      	ldr	r2, [r1, #24]
 8004280:	2a00      	cmp	r2, #0
 8004282:	bf0c      	ite	eq
 8004284:	2201      	moveq	r2, #1
 8004286:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800428a:	608a      	str	r2, [r1, #8]
 800428c:	6822      	ldr	r2, [r4, #0]
 800428e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004320 <_scanf_chars+0xb0>
 8004292:	06d1      	lsls	r1, r2, #27
 8004294:	bf5f      	itttt	pl
 8004296:	681a      	ldrpl	r2, [r3, #0]
 8004298:	1d11      	addpl	r1, r2, #4
 800429a:	6019      	strpl	r1, [r3, #0]
 800429c:	6816      	ldrpl	r6, [r2, #0]
 800429e:	2700      	movs	r7, #0
 80042a0:	69a0      	ldr	r0, [r4, #24]
 80042a2:	b188      	cbz	r0, 80042c8 <_scanf_chars+0x58>
 80042a4:	2801      	cmp	r0, #1
 80042a6:	d107      	bne.n	80042b8 <_scanf_chars+0x48>
 80042a8:	682a      	ldr	r2, [r5, #0]
 80042aa:	7811      	ldrb	r1, [r2, #0]
 80042ac:	6962      	ldr	r2, [r4, #20]
 80042ae:	5c52      	ldrb	r2, [r2, r1]
 80042b0:	b952      	cbnz	r2, 80042c8 <_scanf_chars+0x58>
 80042b2:	2f00      	cmp	r7, #0
 80042b4:	d031      	beq.n	800431a <_scanf_chars+0xaa>
 80042b6:	e022      	b.n	80042fe <_scanf_chars+0x8e>
 80042b8:	2802      	cmp	r0, #2
 80042ba:	d120      	bne.n	80042fe <_scanf_chars+0x8e>
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80042c4:	071b      	lsls	r3, r3, #28
 80042c6:	d41a      	bmi.n	80042fe <_scanf_chars+0x8e>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	06da      	lsls	r2, r3, #27
 80042cc:	bf5e      	ittt	pl
 80042ce:	682b      	ldrpl	r3, [r5, #0]
 80042d0:	781b      	ldrbpl	r3, [r3, #0]
 80042d2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80042d6:	682a      	ldr	r2, [r5, #0]
 80042d8:	686b      	ldr	r3, [r5, #4]
 80042da:	3201      	adds	r2, #1
 80042dc:	602a      	str	r2, [r5, #0]
 80042de:	68a2      	ldr	r2, [r4, #8]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	3a01      	subs	r2, #1
 80042e4:	606b      	str	r3, [r5, #4]
 80042e6:	3701      	adds	r7, #1
 80042e8:	60a2      	str	r2, [r4, #8]
 80042ea:	b142      	cbz	r2, 80042fe <_scanf_chars+0x8e>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	dcd7      	bgt.n	80042a0 <_scanf_chars+0x30>
 80042f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80042f4:	4629      	mov	r1, r5
 80042f6:	4640      	mov	r0, r8
 80042f8:	4798      	blx	r3
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d0d0      	beq.n	80042a0 <_scanf_chars+0x30>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	f013 0310 	ands.w	r3, r3, #16
 8004304:	d105      	bne.n	8004312 <_scanf_chars+0xa2>
 8004306:	68e2      	ldr	r2, [r4, #12]
 8004308:	3201      	adds	r2, #1
 800430a:	60e2      	str	r2, [r4, #12]
 800430c:	69a2      	ldr	r2, [r4, #24]
 800430e:	b102      	cbz	r2, 8004312 <_scanf_chars+0xa2>
 8004310:	7033      	strb	r3, [r6, #0]
 8004312:	6923      	ldr	r3, [r4, #16]
 8004314:	443b      	add	r3, r7
 8004316:	6123      	str	r3, [r4, #16]
 8004318:	2000      	movs	r0, #0
 800431a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800431e:	bf00      	nop
 8004320:	08004bcb 	.word	0x08004bcb

08004324 <_scanf_i>:
 8004324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004328:	4698      	mov	r8, r3
 800432a:	4b76      	ldr	r3, [pc, #472]	; (8004504 <_scanf_i+0x1e0>)
 800432c:	460c      	mov	r4, r1
 800432e:	4682      	mov	sl, r0
 8004330:	4616      	mov	r6, r2
 8004332:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004336:	b087      	sub	sp, #28
 8004338:	ab03      	add	r3, sp, #12
 800433a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800433e:	4b72      	ldr	r3, [pc, #456]	; (8004508 <_scanf_i+0x1e4>)
 8004340:	69a1      	ldr	r1, [r4, #24]
 8004342:	4a72      	ldr	r2, [pc, #456]	; (800450c <_scanf_i+0x1e8>)
 8004344:	2903      	cmp	r1, #3
 8004346:	bf18      	it	ne
 8004348:	461a      	movne	r2, r3
 800434a:	68a3      	ldr	r3, [r4, #8]
 800434c:	9201      	str	r2, [sp, #4]
 800434e:	1e5a      	subs	r2, r3, #1
 8004350:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004354:	bf88      	it	hi
 8004356:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800435a:	4627      	mov	r7, r4
 800435c:	bf82      	ittt	hi
 800435e:	eb03 0905 	addhi.w	r9, r3, r5
 8004362:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004366:	60a3      	strhi	r3, [r4, #8]
 8004368:	f857 3b1c 	ldr.w	r3, [r7], #28
 800436c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004370:	bf98      	it	ls
 8004372:	f04f 0900 	movls.w	r9, #0
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	463d      	mov	r5, r7
 800437a:	f04f 0b00 	mov.w	fp, #0
 800437e:	6831      	ldr	r1, [r6, #0]
 8004380:	ab03      	add	r3, sp, #12
 8004382:	7809      	ldrb	r1, [r1, #0]
 8004384:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004388:	2202      	movs	r2, #2
 800438a:	f7fb ff29 	bl	80001e0 <memchr>
 800438e:	b328      	cbz	r0, 80043dc <_scanf_i+0xb8>
 8004390:	f1bb 0f01 	cmp.w	fp, #1
 8004394:	d159      	bne.n	800444a <_scanf_i+0x126>
 8004396:	6862      	ldr	r2, [r4, #4]
 8004398:	b92a      	cbnz	r2, 80043a6 <_scanf_i+0x82>
 800439a:	6822      	ldr	r2, [r4, #0]
 800439c:	2308      	movs	r3, #8
 800439e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a2:	6063      	str	r3, [r4, #4]
 80043a4:	6022      	str	r2, [r4, #0]
 80043a6:	6822      	ldr	r2, [r4, #0]
 80043a8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80043ac:	6022      	str	r2, [r4, #0]
 80043ae:	68a2      	ldr	r2, [r4, #8]
 80043b0:	1e51      	subs	r1, r2, #1
 80043b2:	60a1      	str	r1, [r4, #8]
 80043b4:	b192      	cbz	r2, 80043dc <_scanf_i+0xb8>
 80043b6:	6832      	ldr	r2, [r6, #0]
 80043b8:	1c51      	adds	r1, r2, #1
 80043ba:	6031      	str	r1, [r6, #0]
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	f805 2b01 	strb.w	r2, [r5], #1
 80043c2:	6872      	ldr	r2, [r6, #4]
 80043c4:	3a01      	subs	r2, #1
 80043c6:	2a00      	cmp	r2, #0
 80043c8:	6072      	str	r2, [r6, #4]
 80043ca:	dc07      	bgt.n	80043dc <_scanf_i+0xb8>
 80043cc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80043d0:	4631      	mov	r1, r6
 80043d2:	4650      	mov	r0, sl
 80043d4:	4790      	blx	r2
 80043d6:	2800      	cmp	r0, #0
 80043d8:	f040 8085 	bne.w	80044e6 <_scanf_i+0x1c2>
 80043dc:	f10b 0b01 	add.w	fp, fp, #1
 80043e0:	f1bb 0f03 	cmp.w	fp, #3
 80043e4:	d1cb      	bne.n	800437e <_scanf_i+0x5a>
 80043e6:	6863      	ldr	r3, [r4, #4]
 80043e8:	b90b      	cbnz	r3, 80043ee <_scanf_i+0xca>
 80043ea:	230a      	movs	r3, #10
 80043ec:	6063      	str	r3, [r4, #4]
 80043ee:	6863      	ldr	r3, [r4, #4]
 80043f0:	4947      	ldr	r1, [pc, #284]	; (8004510 <_scanf_i+0x1ec>)
 80043f2:	6960      	ldr	r0, [r4, #20]
 80043f4:	1ac9      	subs	r1, r1, r3
 80043f6:	f000 f88d 	bl	8004514 <__sccl>
 80043fa:	f04f 0b00 	mov.w	fp, #0
 80043fe:	68a3      	ldr	r3, [r4, #8]
 8004400:	6822      	ldr	r2, [r4, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d03d      	beq.n	8004482 <_scanf_i+0x15e>
 8004406:	6831      	ldr	r1, [r6, #0]
 8004408:	6960      	ldr	r0, [r4, #20]
 800440a:	f891 c000 	ldrb.w	ip, [r1]
 800440e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004412:	2800      	cmp	r0, #0
 8004414:	d035      	beq.n	8004482 <_scanf_i+0x15e>
 8004416:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800441a:	d124      	bne.n	8004466 <_scanf_i+0x142>
 800441c:	0510      	lsls	r0, r2, #20
 800441e:	d522      	bpl.n	8004466 <_scanf_i+0x142>
 8004420:	f10b 0b01 	add.w	fp, fp, #1
 8004424:	f1b9 0f00 	cmp.w	r9, #0
 8004428:	d003      	beq.n	8004432 <_scanf_i+0x10e>
 800442a:	3301      	adds	r3, #1
 800442c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004430:	60a3      	str	r3, [r4, #8]
 8004432:	6873      	ldr	r3, [r6, #4]
 8004434:	3b01      	subs	r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	6073      	str	r3, [r6, #4]
 800443a:	dd1b      	ble.n	8004474 <_scanf_i+0x150>
 800443c:	6833      	ldr	r3, [r6, #0]
 800443e:	3301      	adds	r3, #1
 8004440:	6033      	str	r3, [r6, #0]
 8004442:	68a3      	ldr	r3, [r4, #8]
 8004444:	3b01      	subs	r3, #1
 8004446:	60a3      	str	r3, [r4, #8]
 8004448:	e7d9      	b.n	80043fe <_scanf_i+0xda>
 800444a:	f1bb 0f02 	cmp.w	fp, #2
 800444e:	d1ae      	bne.n	80043ae <_scanf_i+0x8a>
 8004450:	6822      	ldr	r2, [r4, #0]
 8004452:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004456:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800445a:	d1bf      	bne.n	80043dc <_scanf_i+0xb8>
 800445c:	2310      	movs	r3, #16
 800445e:	6063      	str	r3, [r4, #4]
 8004460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004464:	e7a2      	b.n	80043ac <_scanf_i+0x88>
 8004466:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	780b      	ldrb	r3, [r1, #0]
 800446e:	f805 3b01 	strb.w	r3, [r5], #1
 8004472:	e7de      	b.n	8004432 <_scanf_i+0x10e>
 8004474:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004478:	4631      	mov	r1, r6
 800447a:	4650      	mov	r0, sl
 800447c:	4798      	blx	r3
 800447e:	2800      	cmp	r0, #0
 8004480:	d0df      	beq.n	8004442 <_scanf_i+0x11e>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	05db      	lsls	r3, r3, #23
 8004486:	d50d      	bpl.n	80044a4 <_scanf_i+0x180>
 8004488:	42bd      	cmp	r5, r7
 800448a:	d909      	bls.n	80044a0 <_scanf_i+0x17c>
 800448c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004490:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004494:	4632      	mov	r2, r6
 8004496:	4650      	mov	r0, sl
 8004498:	4798      	blx	r3
 800449a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800449e:	464d      	mov	r5, r9
 80044a0:	42bd      	cmp	r5, r7
 80044a2:	d02d      	beq.n	8004500 <_scanf_i+0x1dc>
 80044a4:	6822      	ldr	r2, [r4, #0]
 80044a6:	f012 0210 	ands.w	r2, r2, #16
 80044aa:	d113      	bne.n	80044d4 <_scanf_i+0x1b0>
 80044ac:	702a      	strb	r2, [r5, #0]
 80044ae:	6863      	ldr	r3, [r4, #4]
 80044b0:	9e01      	ldr	r6, [sp, #4]
 80044b2:	4639      	mov	r1, r7
 80044b4:	4650      	mov	r0, sl
 80044b6:	47b0      	blx	r6
 80044b8:	6821      	ldr	r1, [r4, #0]
 80044ba:	f8d8 3000 	ldr.w	r3, [r8]
 80044be:	f011 0f20 	tst.w	r1, #32
 80044c2:	d013      	beq.n	80044ec <_scanf_i+0x1c8>
 80044c4:	1d1a      	adds	r2, r3, #4
 80044c6:	f8c8 2000 	str.w	r2, [r8]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6018      	str	r0, [r3, #0]
 80044ce:	68e3      	ldr	r3, [r4, #12]
 80044d0:	3301      	adds	r3, #1
 80044d2:	60e3      	str	r3, [r4, #12]
 80044d4:	1bed      	subs	r5, r5, r7
 80044d6:	44ab      	add	fp, r5
 80044d8:	6925      	ldr	r5, [r4, #16]
 80044da:	445d      	add	r5, fp
 80044dc:	6125      	str	r5, [r4, #16]
 80044de:	2000      	movs	r0, #0
 80044e0:	b007      	add	sp, #28
 80044e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e6:	f04f 0b00 	mov.w	fp, #0
 80044ea:	e7ca      	b.n	8004482 <_scanf_i+0x15e>
 80044ec:	1d1a      	adds	r2, r3, #4
 80044ee:	f8c8 2000 	str.w	r2, [r8]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f011 0f01 	tst.w	r1, #1
 80044f8:	bf14      	ite	ne
 80044fa:	8018      	strhne	r0, [r3, #0]
 80044fc:	6018      	streq	r0, [r3, #0]
 80044fe:	e7e6      	b.n	80044ce <_scanf_i+0x1aa>
 8004500:	2001      	movs	r0, #1
 8004502:	e7ed      	b.n	80044e0 <_scanf_i+0x1bc>
 8004504:	08004b08 	.word	0x08004b08
 8004508:	08004771 	.word	0x08004771
 800450c:	08004689 	.word	0x08004689
 8004510:	08004bc8 	.word	0x08004bc8

08004514 <__sccl>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	780b      	ldrb	r3, [r1, #0]
 8004518:	4604      	mov	r4, r0
 800451a:	2b5e      	cmp	r3, #94	; 0x5e
 800451c:	bf0b      	itete	eq
 800451e:	784b      	ldrbeq	r3, [r1, #1]
 8004520:	1c48      	addne	r0, r1, #1
 8004522:	1c88      	addeq	r0, r1, #2
 8004524:	2200      	movne	r2, #0
 8004526:	bf08      	it	eq
 8004528:	2201      	moveq	r2, #1
 800452a:	1e61      	subs	r1, r4, #1
 800452c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004530:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004534:	42a9      	cmp	r1, r5
 8004536:	d1fb      	bne.n	8004530 <__sccl+0x1c>
 8004538:	b90b      	cbnz	r3, 800453e <__sccl+0x2a>
 800453a:	3801      	subs	r0, #1
 800453c:	bd70      	pop	{r4, r5, r6, pc}
 800453e:	f082 0201 	eor.w	r2, r2, #1
 8004542:	54e2      	strb	r2, [r4, r3]
 8004544:	4605      	mov	r5, r0
 8004546:	4628      	mov	r0, r5
 8004548:	f810 1b01 	ldrb.w	r1, [r0], #1
 800454c:	292d      	cmp	r1, #45	; 0x2d
 800454e:	d006      	beq.n	800455e <__sccl+0x4a>
 8004550:	295d      	cmp	r1, #93	; 0x5d
 8004552:	d0f3      	beq.n	800453c <__sccl+0x28>
 8004554:	b909      	cbnz	r1, 800455a <__sccl+0x46>
 8004556:	4628      	mov	r0, r5
 8004558:	e7f0      	b.n	800453c <__sccl+0x28>
 800455a:	460b      	mov	r3, r1
 800455c:	e7f1      	b.n	8004542 <__sccl+0x2e>
 800455e:	786e      	ldrb	r6, [r5, #1]
 8004560:	2e5d      	cmp	r6, #93	; 0x5d
 8004562:	d0fa      	beq.n	800455a <__sccl+0x46>
 8004564:	42b3      	cmp	r3, r6
 8004566:	dcf8      	bgt.n	800455a <__sccl+0x46>
 8004568:	3502      	adds	r5, #2
 800456a:	4619      	mov	r1, r3
 800456c:	3101      	adds	r1, #1
 800456e:	428e      	cmp	r6, r1
 8004570:	5462      	strb	r2, [r4, r1]
 8004572:	dcfb      	bgt.n	800456c <__sccl+0x58>
 8004574:	1af1      	subs	r1, r6, r3
 8004576:	3901      	subs	r1, #1
 8004578:	1c58      	adds	r0, r3, #1
 800457a:	42b3      	cmp	r3, r6
 800457c:	bfa8      	it	ge
 800457e:	2100      	movge	r1, #0
 8004580:	1843      	adds	r3, r0, r1
 8004582:	e7e0      	b.n	8004546 <__sccl+0x32>

08004584 <_strtol_l.constprop.0>:
 8004584:	2b01      	cmp	r3, #1
 8004586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800458a:	d001      	beq.n	8004590 <_strtol_l.constprop.0+0xc>
 800458c:	2b24      	cmp	r3, #36	; 0x24
 800458e:	d906      	bls.n	800459e <_strtol_l.constprop.0+0x1a>
 8004590:	f7ff f92c 	bl	80037ec <__errno>
 8004594:	2316      	movs	r3, #22
 8004596:	6003      	str	r3, [r0, #0]
 8004598:	2000      	movs	r0, #0
 800459a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004684 <_strtol_l.constprop.0+0x100>
 80045a2:	460d      	mov	r5, r1
 80045a4:	462e      	mov	r6, r5
 80045a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80045ae:	f017 0708 	ands.w	r7, r7, #8
 80045b2:	d1f7      	bne.n	80045a4 <_strtol_l.constprop.0+0x20>
 80045b4:	2c2d      	cmp	r4, #45	; 0x2d
 80045b6:	d132      	bne.n	800461e <_strtol_l.constprop.0+0x9a>
 80045b8:	782c      	ldrb	r4, [r5, #0]
 80045ba:	2701      	movs	r7, #1
 80045bc:	1cb5      	adds	r5, r6, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d05b      	beq.n	800467a <_strtol_l.constprop.0+0xf6>
 80045c2:	2b10      	cmp	r3, #16
 80045c4:	d109      	bne.n	80045da <_strtol_l.constprop.0+0x56>
 80045c6:	2c30      	cmp	r4, #48	; 0x30
 80045c8:	d107      	bne.n	80045da <_strtol_l.constprop.0+0x56>
 80045ca:	782c      	ldrb	r4, [r5, #0]
 80045cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80045d0:	2c58      	cmp	r4, #88	; 0x58
 80045d2:	d14d      	bne.n	8004670 <_strtol_l.constprop.0+0xec>
 80045d4:	786c      	ldrb	r4, [r5, #1]
 80045d6:	2310      	movs	r3, #16
 80045d8:	3502      	adds	r5, #2
 80045da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80045de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80045e2:	f04f 0c00 	mov.w	ip, #0
 80045e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80045ea:	4666      	mov	r6, ip
 80045ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80045f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80045f4:	f1be 0f09 	cmp.w	lr, #9
 80045f8:	d816      	bhi.n	8004628 <_strtol_l.constprop.0+0xa4>
 80045fa:	4674      	mov	r4, lr
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	dd24      	ble.n	800464a <_strtol_l.constprop.0+0xc6>
 8004600:	f1bc 0f00 	cmp.w	ip, #0
 8004604:	db1e      	blt.n	8004644 <_strtol_l.constprop.0+0xc0>
 8004606:	45b1      	cmp	r9, r6
 8004608:	d31c      	bcc.n	8004644 <_strtol_l.constprop.0+0xc0>
 800460a:	d101      	bne.n	8004610 <_strtol_l.constprop.0+0x8c>
 800460c:	45a2      	cmp	sl, r4
 800460e:	db19      	blt.n	8004644 <_strtol_l.constprop.0+0xc0>
 8004610:	fb06 4603 	mla	r6, r6, r3, r4
 8004614:	f04f 0c01 	mov.w	ip, #1
 8004618:	f815 4b01 	ldrb.w	r4, [r5], #1
 800461c:	e7e8      	b.n	80045f0 <_strtol_l.constprop.0+0x6c>
 800461e:	2c2b      	cmp	r4, #43	; 0x2b
 8004620:	bf04      	itt	eq
 8004622:	782c      	ldrbeq	r4, [r5, #0]
 8004624:	1cb5      	addeq	r5, r6, #2
 8004626:	e7ca      	b.n	80045be <_strtol_l.constprop.0+0x3a>
 8004628:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800462c:	f1be 0f19 	cmp.w	lr, #25
 8004630:	d801      	bhi.n	8004636 <_strtol_l.constprop.0+0xb2>
 8004632:	3c37      	subs	r4, #55	; 0x37
 8004634:	e7e2      	b.n	80045fc <_strtol_l.constprop.0+0x78>
 8004636:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800463a:	f1be 0f19 	cmp.w	lr, #25
 800463e:	d804      	bhi.n	800464a <_strtol_l.constprop.0+0xc6>
 8004640:	3c57      	subs	r4, #87	; 0x57
 8004642:	e7db      	b.n	80045fc <_strtol_l.constprop.0+0x78>
 8004644:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8004648:	e7e6      	b.n	8004618 <_strtol_l.constprop.0+0x94>
 800464a:	f1bc 0f00 	cmp.w	ip, #0
 800464e:	da05      	bge.n	800465c <_strtol_l.constprop.0+0xd8>
 8004650:	2322      	movs	r3, #34	; 0x22
 8004652:	6003      	str	r3, [r0, #0]
 8004654:	4646      	mov	r6, r8
 8004656:	b942      	cbnz	r2, 800466a <_strtol_l.constprop.0+0xe6>
 8004658:	4630      	mov	r0, r6
 800465a:	e79e      	b.n	800459a <_strtol_l.constprop.0+0x16>
 800465c:	b107      	cbz	r7, 8004660 <_strtol_l.constprop.0+0xdc>
 800465e:	4276      	negs	r6, r6
 8004660:	2a00      	cmp	r2, #0
 8004662:	d0f9      	beq.n	8004658 <_strtol_l.constprop.0+0xd4>
 8004664:	f1bc 0f00 	cmp.w	ip, #0
 8004668:	d000      	beq.n	800466c <_strtol_l.constprop.0+0xe8>
 800466a:	1e69      	subs	r1, r5, #1
 800466c:	6011      	str	r1, [r2, #0]
 800466e:	e7f3      	b.n	8004658 <_strtol_l.constprop.0+0xd4>
 8004670:	2430      	movs	r4, #48	; 0x30
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1b1      	bne.n	80045da <_strtol_l.constprop.0+0x56>
 8004676:	2308      	movs	r3, #8
 8004678:	e7af      	b.n	80045da <_strtol_l.constprop.0+0x56>
 800467a:	2c30      	cmp	r4, #48	; 0x30
 800467c:	d0a5      	beq.n	80045ca <_strtol_l.constprop.0+0x46>
 800467e:	230a      	movs	r3, #10
 8004680:	e7ab      	b.n	80045da <_strtol_l.constprop.0+0x56>
 8004682:	bf00      	nop
 8004684:	08004bcb 	.word	0x08004bcb

08004688 <_strtol_r>:
 8004688:	f7ff bf7c 	b.w	8004584 <_strtol_l.constprop.0>

0800468c <_strtoul_l.constprop.0>:
 800468c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004690:	4f36      	ldr	r7, [pc, #216]	; (800476c <_strtoul_l.constprop.0+0xe0>)
 8004692:	4686      	mov	lr, r0
 8004694:	460d      	mov	r5, r1
 8004696:	4628      	mov	r0, r5
 8004698:	f815 4b01 	ldrb.w	r4, [r5], #1
 800469c:	5de6      	ldrb	r6, [r4, r7]
 800469e:	f016 0608 	ands.w	r6, r6, #8
 80046a2:	d1f8      	bne.n	8004696 <_strtoul_l.constprop.0+0xa>
 80046a4:	2c2d      	cmp	r4, #45	; 0x2d
 80046a6:	d12f      	bne.n	8004708 <_strtoul_l.constprop.0+0x7c>
 80046a8:	782c      	ldrb	r4, [r5, #0]
 80046aa:	2601      	movs	r6, #1
 80046ac:	1c85      	adds	r5, r0, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d057      	beq.n	8004762 <_strtoul_l.constprop.0+0xd6>
 80046b2:	2b10      	cmp	r3, #16
 80046b4:	d109      	bne.n	80046ca <_strtoul_l.constprop.0+0x3e>
 80046b6:	2c30      	cmp	r4, #48	; 0x30
 80046b8:	d107      	bne.n	80046ca <_strtoul_l.constprop.0+0x3e>
 80046ba:	7828      	ldrb	r0, [r5, #0]
 80046bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80046c0:	2858      	cmp	r0, #88	; 0x58
 80046c2:	d149      	bne.n	8004758 <_strtoul_l.constprop.0+0xcc>
 80046c4:	786c      	ldrb	r4, [r5, #1]
 80046c6:	2310      	movs	r3, #16
 80046c8:	3502      	adds	r5, #2
 80046ca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80046ce:	2700      	movs	r7, #0
 80046d0:	fbb8 f8f3 	udiv	r8, r8, r3
 80046d4:	fb03 f908 	mul.w	r9, r3, r8
 80046d8:	ea6f 0909 	mvn.w	r9, r9
 80046dc:	4638      	mov	r0, r7
 80046de:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80046e2:	f1bc 0f09 	cmp.w	ip, #9
 80046e6:	d814      	bhi.n	8004712 <_strtoul_l.constprop.0+0x86>
 80046e8:	4664      	mov	r4, ip
 80046ea:	42a3      	cmp	r3, r4
 80046ec:	dd22      	ble.n	8004734 <_strtoul_l.constprop.0+0xa8>
 80046ee:	2f00      	cmp	r7, #0
 80046f0:	db1d      	blt.n	800472e <_strtoul_l.constprop.0+0xa2>
 80046f2:	4580      	cmp	r8, r0
 80046f4:	d31b      	bcc.n	800472e <_strtoul_l.constprop.0+0xa2>
 80046f6:	d101      	bne.n	80046fc <_strtoul_l.constprop.0+0x70>
 80046f8:	45a1      	cmp	r9, r4
 80046fa:	db18      	blt.n	800472e <_strtoul_l.constprop.0+0xa2>
 80046fc:	fb00 4003 	mla	r0, r0, r3, r4
 8004700:	2701      	movs	r7, #1
 8004702:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004706:	e7ea      	b.n	80046de <_strtoul_l.constprop.0+0x52>
 8004708:	2c2b      	cmp	r4, #43	; 0x2b
 800470a:	bf04      	itt	eq
 800470c:	782c      	ldrbeq	r4, [r5, #0]
 800470e:	1c85      	addeq	r5, r0, #2
 8004710:	e7cd      	b.n	80046ae <_strtoul_l.constprop.0+0x22>
 8004712:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004716:	f1bc 0f19 	cmp.w	ip, #25
 800471a:	d801      	bhi.n	8004720 <_strtoul_l.constprop.0+0x94>
 800471c:	3c37      	subs	r4, #55	; 0x37
 800471e:	e7e4      	b.n	80046ea <_strtoul_l.constprop.0+0x5e>
 8004720:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004724:	f1bc 0f19 	cmp.w	ip, #25
 8004728:	d804      	bhi.n	8004734 <_strtoul_l.constprop.0+0xa8>
 800472a:	3c57      	subs	r4, #87	; 0x57
 800472c:	e7dd      	b.n	80046ea <_strtoul_l.constprop.0+0x5e>
 800472e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004732:	e7e6      	b.n	8004702 <_strtoul_l.constprop.0+0x76>
 8004734:	2f00      	cmp	r7, #0
 8004736:	da07      	bge.n	8004748 <_strtoul_l.constprop.0+0xbc>
 8004738:	2322      	movs	r3, #34	; 0x22
 800473a:	f8ce 3000 	str.w	r3, [lr]
 800473e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004742:	b932      	cbnz	r2, 8004752 <_strtoul_l.constprop.0+0xc6>
 8004744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004748:	b106      	cbz	r6, 800474c <_strtoul_l.constprop.0+0xc0>
 800474a:	4240      	negs	r0, r0
 800474c:	2a00      	cmp	r2, #0
 800474e:	d0f9      	beq.n	8004744 <_strtoul_l.constprop.0+0xb8>
 8004750:	b107      	cbz	r7, 8004754 <_strtoul_l.constprop.0+0xc8>
 8004752:	1e69      	subs	r1, r5, #1
 8004754:	6011      	str	r1, [r2, #0]
 8004756:	e7f5      	b.n	8004744 <_strtoul_l.constprop.0+0xb8>
 8004758:	2430      	movs	r4, #48	; 0x30
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1b5      	bne.n	80046ca <_strtoul_l.constprop.0+0x3e>
 800475e:	2308      	movs	r3, #8
 8004760:	e7b3      	b.n	80046ca <_strtoul_l.constprop.0+0x3e>
 8004762:	2c30      	cmp	r4, #48	; 0x30
 8004764:	d0a9      	beq.n	80046ba <_strtoul_l.constprop.0+0x2e>
 8004766:	230a      	movs	r3, #10
 8004768:	e7af      	b.n	80046ca <_strtoul_l.constprop.0+0x3e>
 800476a:	bf00      	nop
 800476c:	08004bcb 	.word	0x08004bcb

08004770 <_strtoul_r>:
 8004770:	f7ff bf8c 	b.w	800468c <_strtoul_l.constprop.0>

08004774 <__submore>:
 8004774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004778:	460c      	mov	r4, r1
 800477a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800477c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004780:	4299      	cmp	r1, r3
 8004782:	d11d      	bne.n	80047c0 <__submore+0x4c>
 8004784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004788:	f000 f8c4 	bl	8004914 <_malloc_r>
 800478c:	b918      	cbnz	r0, 8004796 <__submore+0x22>
 800478e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800479a:	63a3      	str	r3, [r4, #56]	; 0x38
 800479c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80047a0:	6360      	str	r0, [r4, #52]	; 0x34
 80047a2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80047a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80047aa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80047ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80047b2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80047b6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80047ba:	6020      	str	r0, [r4, #0]
 80047bc:	2000      	movs	r0, #0
 80047be:	e7e8      	b.n	8004792 <__submore+0x1e>
 80047c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80047c2:	0077      	lsls	r7, r6, #1
 80047c4:	463a      	mov	r2, r7
 80047c6:	f000 f919 	bl	80049fc <_realloc_r>
 80047ca:	4605      	mov	r5, r0
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d0de      	beq.n	800478e <__submore+0x1a>
 80047d0:	eb00 0806 	add.w	r8, r0, r6
 80047d4:	4601      	mov	r1, r0
 80047d6:	4632      	mov	r2, r6
 80047d8:	4640      	mov	r0, r8
 80047da:	f000 f807 	bl	80047ec <memcpy>
 80047de:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80047e2:	f8c4 8000 	str.w	r8, [r4]
 80047e6:	e7e9      	b.n	80047bc <__submore+0x48>

080047e8 <__retarget_lock_acquire_recursive>:
 80047e8:	4770      	bx	lr

080047ea <__retarget_lock_release_recursive>:
 80047ea:	4770      	bx	lr

080047ec <memcpy>:
 80047ec:	440a      	add	r2, r1
 80047ee:	4291      	cmp	r1, r2
 80047f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80047f4:	d100      	bne.n	80047f8 <memcpy+0xc>
 80047f6:	4770      	bx	lr
 80047f8:	b510      	push	{r4, lr}
 80047fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004802:	4291      	cmp	r1, r2
 8004804:	d1f9      	bne.n	80047fa <memcpy+0xe>
 8004806:	bd10      	pop	{r4, pc}

08004808 <memmove>:
 8004808:	4288      	cmp	r0, r1
 800480a:	b510      	push	{r4, lr}
 800480c:	eb01 0402 	add.w	r4, r1, r2
 8004810:	d902      	bls.n	8004818 <memmove+0x10>
 8004812:	4284      	cmp	r4, r0
 8004814:	4623      	mov	r3, r4
 8004816:	d807      	bhi.n	8004828 <memmove+0x20>
 8004818:	1e43      	subs	r3, r0, #1
 800481a:	42a1      	cmp	r1, r4
 800481c:	d008      	beq.n	8004830 <memmove+0x28>
 800481e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004826:	e7f8      	b.n	800481a <memmove+0x12>
 8004828:	4402      	add	r2, r0
 800482a:	4601      	mov	r1, r0
 800482c:	428a      	cmp	r2, r1
 800482e:	d100      	bne.n	8004832 <memmove+0x2a>
 8004830:	bd10      	pop	{r4, pc}
 8004832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800483a:	e7f7      	b.n	800482c <memmove+0x24>

0800483c <_free_r>:
 800483c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800483e:	2900      	cmp	r1, #0
 8004840:	d044      	beq.n	80048cc <_free_r+0x90>
 8004842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004846:	9001      	str	r0, [sp, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	f1a1 0404 	sub.w	r4, r1, #4
 800484e:	bfb8      	it	lt
 8004850:	18e4      	addlt	r4, r4, r3
 8004852:	f000 f913 	bl	8004a7c <__malloc_lock>
 8004856:	4a1e      	ldr	r2, [pc, #120]	; (80048d0 <_free_r+0x94>)
 8004858:	9801      	ldr	r0, [sp, #4]
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	b933      	cbnz	r3, 800486c <_free_r+0x30>
 800485e:	6063      	str	r3, [r4, #4]
 8004860:	6014      	str	r4, [r2, #0]
 8004862:	b003      	add	sp, #12
 8004864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004868:	f000 b90e 	b.w	8004a88 <__malloc_unlock>
 800486c:	42a3      	cmp	r3, r4
 800486e:	d908      	bls.n	8004882 <_free_r+0x46>
 8004870:	6825      	ldr	r5, [r4, #0]
 8004872:	1961      	adds	r1, r4, r5
 8004874:	428b      	cmp	r3, r1
 8004876:	bf01      	itttt	eq
 8004878:	6819      	ldreq	r1, [r3, #0]
 800487a:	685b      	ldreq	r3, [r3, #4]
 800487c:	1949      	addeq	r1, r1, r5
 800487e:	6021      	streq	r1, [r4, #0]
 8004880:	e7ed      	b.n	800485e <_free_r+0x22>
 8004882:	461a      	mov	r2, r3
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	b10b      	cbz	r3, 800488c <_free_r+0x50>
 8004888:	42a3      	cmp	r3, r4
 800488a:	d9fa      	bls.n	8004882 <_free_r+0x46>
 800488c:	6811      	ldr	r1, [r2, #0]
 800488e:	1855      	adds	r5, r2, r1
 8004890:	42a5      	cmp	r5, r4
 8004892:	d10b      	bne.n	80048ac <_free_r+0x70>
 8004894:	6824      	ldr	r4, [r4, #0]
 8004896:	4421      	add	r1, r4
 8004898:	1854      	adds	r4, r2, r1
 800489a:	42a3      	cmp	r3, r4
 800489c:	6011      	str	r1, [r2, #0]
 800489e:	d1e0      	bne.n	8004862 <_free_r+0x26>
 80048a0:	681c      	ldr	r4, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	6053      	str	r3, [r2, #4]
 80048a6:	4421      	add	r1, r4
 80048a8:	6011      	str	r1, [r2, #0]
 80048aa:	e7da      	b.n	8004862 <_free_r+0x26>
 80048ac:	d902      	bls.n	80048b4 <_free_r+0x78>
 80048ae:	230c      	movs	r3, #12
 80048b0:	6003      	str	r3, [r0, #0]
 80048b2:	e7d6      	b.n	8004862 <_free_r+0x26>
 80048b4:	6825      	ldr	r5, [r4, #0]
 80048b6:	1961      	adds	r1, r4, r5
 80048b8:	428b      	cmp	r3, r1
 80048ba:	bf04      	itt	eq
 80048bc:	6819      	ldreq	r1, [r3, #0]
 80048be:	685b      	ldreq	r3, [r3, #4]
 80048c0:	6063      	str	r3, [r4, #4]
 80048c2:	bf04      	itt	eq
 80048c4:	1949      	addeq	r1, r1, r5
 80048c6:	6021      	streq	r1, [r4, #0]
 80048c8:	6054      	str	r4, [r2, #4]
 80048ca:	e7ca      	b.n	8004862 <_free_r+0x26>
 80048cc:	b003      	add	sp, #12
 80048ce:	bd30      	pop	{r4, r5, pc}
 80048d0:	20000258 	.word	0x20000258

080048d4 <sbrk_aligned>:
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	4e0e      	ldr	r6, [pc, #56]	; (8004910 <sbrk_aligned+0x3c>)
 80048d8:	460c      	mov	r4, r1
 80048da:	6831      	ldr	r1, [r6, #0]
 80048dc:	4605      	mov	r5, r0
 80048de:	b911      	cbnz	r1, 80048e6 <sbrk_aligned+0x12>
 80048e0:	f000 f8bc 	bl	8004a5c <_sbrk_r>
 80048e4:	6030      	str	r0, [r6, #0]
 80048e6:	4621      	mov	r1, r4
 80048e8:	4628      	mov	r0, r5
 80048ea:	f000 f8b7 	bl	8004a5c <_sbrk_r>
 80048ee:	1c43      	adds	r3, r0, #1
 80048f0:	d00a      	beq.n	8004908 <sbrk_aligned+0x34>
 80048f2:	1cc4      	adds	r4, r0, #3
 80048f4:	f024 0403 	bic.w	r4, r4, #3
 80048f8:	42a0      	cmp	r0, r4
 80048fa:	d007      	beq.n	800490c <sbrk_aligned+0x38>
 80048fc:	1a21      	subs	r1, r4, r0
 80048fe:	4628      	mov	r0, r5
 8004900:	f000 f8ac 	bl	8004a5c <_sbrk_r>
 8004904:	3001      	adds	r0, #1
 8004906:	d101      	bne.n	800490c <sbrk_aligned+0x38>
 8004908:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800490c:	4620      	mov	r0, r4
 800490e:	bd70      	pop	{r4, r5, r6, pc}
 8004910:	2000025c 	.word	0x2000025c

08004914 <_malloc_r>:
 8004914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004918:	1ccd      	adds	r5, r1, #3
 800491a:	f025 0503 	bic.w	r5, r5, #3
 800491e:	3508      	adds	r5, #8
 8004920:	2d0c      	cmp	r5, #12
 8004922:	bf38      	it	cc
 8004924:	250c      	movcc	r5, #12
 8004926:	2d00      	cmp	r5, #0
 8004928:	4607      	mov	r7, r0
 800492a:	db01      	blt.n	8004930 <_malloc_r+0x1c>
 800492c:	42a9      	cmp	r1, r5
 800492e:	d905      	bls.n	800493c <_malloc_r+0x28>
 8004930:	230c      	movs	r3, #12
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	2600      	movs	r6, #0
 8004936:	4630      	mov	r0, r6
 8004938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800493c:	4e2e      	ldr	r6, [pc, #184]	; (80049f8 <_malloc_r+0xe4>)
 800493e:	f000 f89d 	bl	8004a7c <__malloc_lock>
 8004942:	6833      	ldr	r3, [r6, #0]
 8004944:	461c      	mov	r4, r3
 8004946:	bb34      	cbnz	r4, 8004996 <_malloc_r+0x82>
 8004948:	4629      	mov	r1, r5
 800494a:	4638      	mov	r0, r7
 800494c:	f7ff ffc2 	bl	80048d4 <sbrk_aligned>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	4604      	mov	r4, r0
 8004954:	d14d      	bne.n	80049f2 <_malloc_r+0xde>
 8004956:	6834      	ldr	r4, [r6, #0]
 8004958:	4626      	mov	r6, r4
 800495a:	2e00      	cmp	r6, #0
 800495c:	d140      	bne.n	80049e0 <_malloc_r+0xcc>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	4631      	mov	r1, r6
 8004962:	4638      	mov	r0, r7
 8004964:	eb04 0803 	add.w	r8, r4, r3
 8004968:	f000 f878 	bl	8004a5c <_sbrk_r>
 800496c:	4580      	cmp	r8, r0
 800496e:	d13a      	bne.n	80049e6 <_malloc_r+0xd2>
 8004970:	6821      	ldr	r1, [r4, #0]
 8004972:	3503      	adds	r5, #3
 8004974:	1a6d      	subs	r5, r5, r1
 8004976:	f025 0503 	bic.w	r5, r5, #3
 800497a:	3508      	adds	r5, #8
 800497c:	2d0c      	cmp	r5, #12
 800497e:	bf38      	it	cc
 8004980:	250c      	movcc	r5, #12
 8004982:	4629      	mov	r1, r5
 8004984:	4638      	mov	r0, r7
 8004986:	f7ff ffa5 	bl	80048d4 <sbrk_aligned>
 800498a:	3001      	adds	r0, #1
 800498c:	d02b      	beq.n	80049e6 <_malloc_r+0xd2>
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	442b      	add	r3, r5
 8004992:	6023      	str	r3, [r4, #0]
 8004994:	e00e      	b.n	80049b4 <_malloc_r+0xa0>
 8004996:	6822      	ldr	r2, [r4, #0]
 8004998:	1b52      	subs	r2, r2, r5
 800499a:	d41e      	bmi.n	80049da <_malloc_r+0xc6>
 800499c:	2a0b      	cmp	r2, #11
 800499e:	d916      	bls.n	80049ce <_malloc_r+0xba>
 80049a0:	1961      	adds	r1, r4, r5
 80049a2:	42a3      	cmp	r3, r4
 80049a4:	6025      	str	r5, [r4, #0]
 80049a6:	bf18      	it	ne
 80049a8:	6059      	strne	r1, [r3, #4]
 80049aa:	6863      	ldr	r3, [r4, #4]
 80049ac:	bf08      	it	eq
 80049ae:	6031      	streq	r1, [r6, #0]
 80049b0:	5162      	str	r2, [r4, r5]
 80049b2:	604b      	str	r3, [r1, #4]
 80049b4:	4638      	mov	r0, r7
 80049b6:	f104 060b 	add.w	r6, r4, #11
 80049ba:	f000 f865 	bl	8004a88 <__malloc_unlock>
 80049be:	f026 0607 	bic.w	r6, r6, #7
 80049c2:	1d23      	adds	r3, r4, #4
 80049c4:	1af2      	subs	r2, r6, r3
 80049c6:	d0b6      	beq.n	8004936 <_malloc_r+0x22>
 80049c8:	1b9b      	subs	r3, r3, r6
 80049ca:	50a3      	str	r3, [r4, r2]
 80049cc:	e7b3      	b.n	8004936 <_malloc_r+0x22>
 80049ce:	6862      	ldr	r2, [r4, #4]
 80049d0:	42a3      	cmp	r3, r4
 80049d2:	bf0c      	ite	eq
 80049d4:	6032      	streq	r2, [r6, #0]
 80049d6:	605a      	strne	r2, [r3, #4]
 80049d8:	e7ec      	b.n	80049b4 <_malloc_r+0xa0>
 80049da:	4623      	mov	r3, r4
 80049dc:	6864      	ldr	r4, [r4, #4]
 80049de:	e7b2      	b.n	8004946 <_malloc_r+0x32>
 80049e0:	4634      	mov	r4, r6
 80049e2:	6876      	ldr	r6, [r6, #4]
 80049e4:	e7b9      	b.n	800495a <_malloc_r+0x46>
 80049e6:	230c      	movs	r3, #12
 80049e8:	603b      	str	r3, [r7, #0]
 80049ea:	4638      	mov	r0, r7
 80049ec:	f000 f84c 	bl	8004a88 <__malloc_unlock>
 80049f0:	e7a1      	b.n	8004936 <_malloc_r+0x22>
 80049f2:	6025      	str	r5, [r4, #0]
 80049f4:	e7de      	b.n	80049b4 <_malloc_r+0xa0>
 80049f6:	bf00      	nop
 80049f8:	20000258 	.word	0x20000258

080049fc <_realloc_r>:
 80049fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a00:	4680      	mov	r8, r0
 8004a02:	4614      	mov	r4, r2
 8004a04:	460e      	mov	r6, r1
 8004a06:	b921      	cbnz	r1, 8004a12 <_realloc_r+0x16>
 8004a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	f7ff bf81 	b.w	8004914 <_malloc_r>
 8004a12:	b92a      	cbnz	r2, 8004a20 <_realloc_r+0x24>
 8004a14:	f7ff ff12 	bl	800483c <_free_r>
 8004a18:	4625      	mov	r5, r4
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a20:	f000 f838 	bl	8004a94 <_malloc_usable_size_r>
 8004a24:	4284      	cmp	r4, r0
 8004a26:	4607      	mov	r7, r0
 8004a28:	d802      	bhi.n	8004a30 <_realloc_r+0x34>
 8004a2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a2e:	d812      	bhi.n	8004a56 <_realloc_r+0x5a>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4640      	mov	r0, r8
 8004a34:	f7ff ff6e 	bl	8004914 <_malloc_r>
 8004a38:	4605      	mov	r5, r0
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d0ed      	beq.n	8004a1a <_realloc_r+0x1e>
 8004a3e:	42bc      	cmp	r4, r7
 8004a40:	4622      	mov	r2, r4
 8004a42:	4631      	mov	r1, r6
 8004a44:	bf28      	it	cs
 8004a46:	463a      	movcs	r2, r7
 8004a48:	f7ff fed0 	bl	80047ec <memcpy>
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4640      	mov	r0, r8
 8004a50:	f7ff fef4 	bl	800483c <_free_r>
 8004a54:	e7e1      	b.n	8004a1a <_realloc_r+0x1e>
 8004a56:	4635      	mov	r5, r6
 8004a58:	e7df      	b.n	8004a1a <_realloc_r+0x1e>
	...

08004a5c <_sbrk_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	4d06      	ldr	r5, [pc, #24]	; (8004a78 <_sbrk_r+0x1c>)
 8004a60:	2300      	movs	r3, #0
 8004a62:	4604      	mov	r4, r0
 8004a64:	4608      	mov	r0, r1
 8004a66:	602b      	str	r3, [r5, #0]
 8004a68:	f7fc fad4 	bl	8001014 <_sbrk>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <_sbrk_r+0x1a>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <_sbrk_r+0x1a>
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	20000250 	.word	0x20000250

08004a7c <__malloc_lock>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	; (8004a84 <__malloc_lock+0x8>)
 8004a7e:	f7ff beb3 	b.w	80047e8 <__retarget_lock_acquire_recursive>
 8004a82:	bf00      	nop
 8004a84:	20000254 	.word	0x20000254

08004a88 <__malloc_unlock>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__malloc_unlock+0x8>)
 8004a8a:	f7ff beae 	b.w	80047ea <__retarget_lock_release_recursive>
 8004a8e:	bf00      	nop
 8004a90:	20000254 	.word	0x20000254

08004a94 <_malloc_usable_size_r>:
 8004a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a98:	1f18      	subs	r0, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfbc      	itt	lt
 8004a9e:	580b      	ldrlt	r3, [r1, r0]
 8004aa0:	18c0      	addlt	r0, r0, r3
 8004aa2:	4770      	bx	lr

08004aa4 <_init>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr

08004ab0 <_fini>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	bf00      	nop
 8004ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab6:	bc08      	pop	{r3}
 8004ab8:	469e      	mov	lr, r3
 8004aba:	4770      	bx	lr
